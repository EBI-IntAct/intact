#summary One-sentence summary of this page.

= Introduction =

This is an introduction to the core API of !IntAct (aka. intact-core), more specifically introducing users to a central concept: !IntactContext.

= Table of Content =

<wiki:toc max_depth="3" />

= !IntactContext =

== Description ==

 If there was only one object you should know about in the !IntAct API, !IntactContext would be the one as everything starts from it. It allows you to:
   * get access to the !IntAct configuration
   * initialize the connection to the underlying database, 
   * get access to the stored data,
   * create or alter data,
   * get access to the underlying Spring context.

== Initialization Examples ==

In order to quickly configure the !IntAct API you can rely on its default configuration. It will create a stand-alone in-memory database using [http://www.h2.org H2].

The way to initialize the API is as follow:
{{{
IntactContext.initStandaloneContext();
}}}

Now obviously, this is fine when you are toying with !IntAct as whenever you stop the API, the database will simply not be available anymore. 
So now what you have to do it to create the !IntAct database schema into a relational database of your choice (so far we support Oracle, !PostgreSQL and H2) and configure !IntAct to use it. The following steps cover this.


== Spring ==

Spring is a framework that delivers a large amount of functionalities to enterprise Java applications, of which, !IntAct 2.0 is heavily relying on a few such as:
 * [http://static.springsource.org/spring/docs/2.5.x/reference/beans.html#beans-introduction Inversion of control container]
 * [http://static.springsource.org/spring/docs/2.5.x/reference/aop.html#aop-introductionAspect Oriented Programming]
 * [http://static.springsource.org/spring/docs/2.5.x/reference/orm.html#orm-jpa Abstraction layer over our Object Relational Mapping (JPA/Hibernate)].

 

   === Support ===

   === Configuration ===


== Using !IntactContext in Web Applications ===








