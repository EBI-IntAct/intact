<?xml version="1.0" encoding="UTF-8"?>
<!--
     ANT build configuration file for search module.
     Author: Sugath Mudali, smudali@ebi.ac.uk.
     Version: $Id$
-->

<project name="search" basedir="." default="compile">
    <property name="project.version" value="3.0"/>

    <property name="jdk.version" value="1.5"/>

    <!-- Intact core locations -->
    <property name="intact.root" value="../.."/>
    <property name="root.lib.dir" value="${intact.root}/lib"/>
    <property name="root.src.dir" value="${intact.root}/src"/>
    <property name="root.dest.dir" value="${intact.root}/classes"/>
    <property name="root.config.dir" value="${intact.root}/config"/>
    <property name="root.dist.dir" value="${intact.root}/dist"/>
    <property name="root.jar.file" value="${root.dist.dir}/intact-core.jar"/>

    <!-- Intact application location. -->
    <property name="intact.app.dir" value=".."/>

    <!-- Tomcat specific properties, to be able to deploy/undeploy using the manager -->
    <property file="${intact.app.dir}/deployment.local.properties"/>
    <property file="${intact.app.dir}/deployment.properties"/>

    <!-- Context path for search -->
    <property name="intact.context.dir" value="${intact.app.dir}/context"/>
    <property name="search-context-file" value="search-context.xml"/>

    <property environment="env"/>
    <property name="tomcat.home" value="${env.CATALINA_HOME}"/>
    <property name="webapps.dir" value="${tomcat.home}/webapps"/>

    <!-- <property name="tomcat.conf.dir" value="${tomcat.home}/conf/Catalina/localhost"/> -->
    <!-- The build properties. -->
    <property file="${intact.root}/config/build.properties"/>

    <property name="intact.app.lib.dir" value="${intact.app.dir}/lib"/>

    <!-- The jdbc properties. -->
    <property file="${intact.root}/config/jdbc.properties"/>


    <property name="dist.dir" value="dist"/>
    <property name="temp.dir" value="${dist.dir}/temp-web"/>
    <property name="temp.dir.web-inf" value="${temp.dir}/WEB-INF"/>
    <property name="temp.dir.lib" value="${temp.dir.web-inf}/lib"/>
    <property name="temp.dir.classes" value="${temp.dir.web-inf}/classes"/>
    <property name="temp.dir.meta-inf" value="${temp.dir}/META-INF"/>

    <property name="pg.war.file" value="${ant.project.name}.war"/>

    <!-- This project specific paths. -->
    <property name="src.dir" value="src"/>
    <property name="layouts.dir" value="layouts"/>
    <property name="styles.dir" value="styles"/>
    <property name="pages.dir" value="pages"/>
    <property name="images.dir" value="images"/>
    <property name="lib.dir" value="WEB-INF/lib"/>
    <property name="tld.dir" value="WEB-INF/tld"/>
    <property name="dest.dir" value="WEB-INF/classes"/>
    <property name="docs.dir" value="doc/api"/>

    <!-- Where is HttpUnit located? -->
    <property name="httpunit.install.dir" value="${intact.app.lib.dir}/test/httpunit"/>


    <!-- The name of the last modified file -->
    <property name="last.modified.file" value="last-modified.txt"/>

    <!-- Build working classpath -->
    <path id="project.class.path">

        <!--         Currently no JAR file use in search -->
        <!--         Project specific jar files. -->
        <!--                <fileset dir="${lib.dir}">-->
        <!--                    <include name="**/*.jar"/>-->
        <!--                </fileset>-->

        <!-- Where the classes are compiled to. -->
        <pathelement path="${dest.dir}"/>

        <!-- Intact core at root. -->
        <pathelement path="${root.dest.dir}"/>

        <!-- Common jar files. -->
        <pathelement path="${root.lib.dir}/junit.jar"/>
        <pathelement path="${root.lib.dir}/db-ojb-1.0.rc6.jar"/>
        <pathelement path="${root.lib.dir}/servlet.jar"/>
        <pathelement path="${root.lib.dir}/log4j-1.2.11.jar"/>
        <pathelement path="${root.lib.dir}/commons-dbcp-1.1.jar"/>
        <pathelement path="${root.lib.dir}/xercesImpl.jar"/>
        <pathelement path="${root.lib.dir}/commons-logging-1.0.4.jar"/>
        <pathelement path="${root.lib.dir}/commons-cli-1.0.jar"/>

        <!-- Needed for URL check -->
        <pathelement path="${root.lib.dir}/commons-httpclient-3.0-rc2.jar"/>
        <pathelement path="${root.lib.dir}/commons-codec-1.4-dev.jar"/>

        <!-- NB these probably need upgrading from the intact lib directory.. -->
        <pathelement path="${intact.app.dir}/lib/struts.jar"/>
        <pathelement path="${root.lib.dir}/commons-collections-3.0.jar"/>
        <pathelement path="${intact.app.dir}/lib/commons-lang.jar"/>
        <pathelement path="${intact.app.dir}/lib/commons-beanutils.jar"/>
        <pathelement path="${intact.app.dir}/lib/concurrent.jar"/>

        <!-- http unit test -->
        <pathelement path="${httpunit.install.dir}/lib/httpunit.jar"/>
        <pathelement path="${httpunit.install.dir}/jars/js.jar"/>
        <pathelement path="${httpunit.install.dir}/jars/Tidy.jar"/>
        <pathelement path="${httpunit.install.dir}/jars/netkohtml.jar"/>
        <pathelement path="${httpunit.install.dir}/jars/xmlParserAPIs.jar"/>

        <!-- jar files specific for the advanced search-->
        <pathelement path="${intact.app.dir}/lib/lucene-1.4.3.jar"/>
        <pathelement path="${intact.app.dir}/lib/jimi.jar"/>
        <pathelement path="${intact.app.dir}/lib/antlr.jar"/>

        <!-- hibernate -->
        <fileset dir="${root.lib.dir}/hibernate">
            <include name="**/*.jar"/>
        </fileset>


        <fileset dir="${root.lib.dir}">
            <include name="junit.jar"/>
        </fileset>

    </path>


    <!-- =================================================================== -->

    <!-- Sets the time stamp and various 'present' properties. -->
    <target name="prepare">
        <tstamp/>
        <available file="${root.jar.file}" type="file" property="intact.jar.present"/>
    </target>

    <!-- =================================================================== -->

    <!-- Creates the temporary folder where the application will be built. -->
    <target name="prepare-temp-dir">
        <!-- Create temporary folders -->
        <mkdir dir="${dist.dir}" />
        <mkdir dir="${temp.dir}" />
        <mkdir dir="${temp.dir.web-inf}" />
        <mkdir dir="${temp.dir.lib}" />
        <mkdir dir="${temp.dir.classes}" />
        <mkdir dir="${temp.dir.meta-inf}" />
    </target>

    <!-- =================================================================== -->

    <!-- Sets the time stamp. -->
    <target name="set-tstamp">
        <tstamp>
            <format property="TODAY" pattern="yyyy-MM-dd" locale="en"/>
        </tstamp>
    </target>

    <!-- =================================================================== -->

    <!-- Creates the 'docs' directory. -->
    <target name="mk-docs">
        <mkdir dir="${docs.dir}"/>
    </target>

    <!-- =================================================================== -->

    <!-- Remove 'dest' and docs directories for clean build -->
    <target name="clean" description="Prepare for clean build">
        <!-- Delete directories first -->
        <delete dir="${dest.dir}"/>
        <delete dir="${docs.dir}"/>
        <delete dir="${dist.dir}"/>

        <delete file="${last.modified.file}" quiet="true"/>
    </target>

    <!-- =================================================================== -->

    <!-- Calls the jar task from core build file if intact core jar file
         is missing.
    -->
    <target name="make-jar" depends="prepare" unless="intact.jar.present">
        <ant dir="${intact.root}" target="jar-core" inheritAll="false"/>
    </target>

    <!-- =================================================================== -->

    <!-- Copy configuration files. -->
    <target name="cpConfigFiles">
        <!-- Copy repository files -->
        <copy todir="${temp.dir.classes}/config">
            <fileset dir="${root.config.dir}">
                <include name="repository*.xml"/>
                <include name="repository.dtd"/>
                <include name="Institution.properties"/>
            </fileset>
        </copy>

        <!-- Copy search property files and XML mapping file-->
        <copy todir="${temp.dir.classes}/config">
            <fileset dir="WEB-INF/config">
                <include name="*.properties"/>
                <include name="*.xml"/>
            </fileset>
        </copy>

        <!-- the OJB and log4J properties files should be at the top level in 'dest' -->
        <copy todir="${temp.dir.classes}" file="${root.config.dir}/OJB.properties"/>
        <copy todir="${temp.dir.classes}" file="${root.config.dir}/log4j.properties"/>
    </target>

    <!-- =================================================================== -->

    <!-- The Lexer file -->
    <property name="antlr.lexer.file" value="${basedir}/antlr/valuelexer.g"/>

    <!-- The grammar file -->
    <property name="antlr.grammar.file" value="${basedir}/antlr/iql2lucene.g"/>

    <!-- Where the ANTLR auto-generated file should be put in -->
    <property name="antlr.output.dir"
              value="${intact.root}/src/uk/ac/ebi/intact/application/search3/advancedSearch/powerSearch/parser/iql2luceneParser"/>

    <!-- Compile the source tree; creates the dest dir if it doesn't exist. -->
    <target name="antlr2java" description="Generates Java handlers from ANTLR lexer/grammar files">

        <echo message="The output directory will be: ${antlr.output.dir}"/>

        <echo message="Converting ANTLR Lexer (${antlr.lexer.file}) to Java..."/>
        <java classname="antlr.Tool" fork="yes">
            <arg line="-o ${antlr.output.dir}"/>
            <arg value="${antlr.lexer.file}"/>
            <classpath refid="project.class.path"/>
        </java>

        <echo message="Converting ANTLR Grammar (${antlr.grammar.file}) to Java..."/>
        <java classname="antlr.Tool" fork="yes">
            <arg line="-o ${antlr.output.dir}"/>
            <arg value="${antlr.grammar.file}"/>
            <classpath refid="project.class.path"/>
        </java>

    </target>

    <!-- =================================================================== -->

    <!-- Compile the source tree; creates the dest dir if it doesn't exist. -->
    <target name="compile">

        <!-- Create the dest dir if it doesn't exist. -->
        <mkdir dir="${dest.dir}"/>

        <!-- Only compile search sources only. -->
        <javac srcdir="${root.src.dir}"
               destdir="${temp.dir.classes}"
               deprecation="on"
               includes="**/application/search3/**,
                         **/application/commons/**"
               debug="on"
               source="${jdk.version}">
            <classpath refid="project.class.path"/>
        </javac>

        <!-- Copy configuration files -->
        <antcall target="cpConfigFiles"/>
    </target>

    <!-- =================================================================== -->

    <!-- Compile the source tree; and generate JavaDoc. -->
    <target name="javadoc" depends="compile"
            description="Creates Search API Documentation">

        <!-- Start with a fresh directory. -->
        <delete dir="${docs.dir}" quiet="true"/>
        <mkdir dir="${docs.dir}"/>

        <javadoc destdir="${docs.dir}"
                 author="true"
                 version="true"
                 doctitle="&lt;h1&gt;Search Documentation (Version ${project.version})&lt;/h1&gt;"
                 bottom="&lt;i&gt;Samuel Kerrien EMBL-EBI 2006 - skerrien@ebi.ac.uk&lt;/i&gt;"
                 source="${jdk.version}"
                 use="true"
                 windowtitle="Intact core API Documentation">

            <!-- Exclude javadoc for test packages. -->
            <packageset dir="${root.src.dir}">
                <include name="**/search3/**"/>
                <exclude name="**/test/**"/>
            </packageset>
            <classpath refid="project.class.path"/>
        </javadoc>
    </target>

    <!-- =================================================================== -->

    <!-- Static analysis of the JavaDoc comments and build a report. -->
    <target name="javadoc-check" depends="compile"
            description="Check JavaDoc Documentation and build report.">

        <!-- Start with a fresh directory. -->
        <delete dir="${docs.dir}/check" quiet="true"/>
        <mkdir dir="${docs.dir}/check"/>

        <!-- for help, cf. http://java.sun.com/j2se/javadoc/doccheck/docs/DocCheck.html -->
        <javadoc docletpath="${root.lib.dir}/doccheck.jar"
                 doclet="com.sun.tools.doclets.doccheck.DocCheck"
                 defaultexcludes="yes"
                 source="${jdk.version}"
                 sourcepath="${root.src.dir}"
                 destdir="${docs.dir}/check"
                 additionalparam="-classlist
                                  -docletID
                                  -title 'DocCheck Sample Code'">

            <!-- Exclude javadoc for test packages. -->
            <packageset dir="${root.src.dir}">
                <include name="**/search3/**"/>

                <!-- autogenerated source packages -->
                <exclude name="**/search3/advancedSearch/powerSearch/parser/iql2luceneParser/**"/>
                <exclude name="**/search3/advancedSearch/powerSearch/business/graphdraw/graph/**"/>
                <exclude name="**/search3/searchEngine/**"/>


                <!-- Test packages -->
                <exclude name="**/test/**"/>
            </packageset>
            <classpath refid="project.class.path"/>
        </javadoc>
    </target>

    <!-- =================================================================== -->

    <!-- Builds a war file using the current database setup. -->

    <target name="war" description="Builds a war file"
            depends="set-tstamp, set-db-type, war-postgres, war-oracle"/>

    <!-- =================================================================== -->

    <!-- Builds a war file. The database to include is specified as a parameter. -->

    <target name="build-war" depends="prepare-temp-dir ,compile, make-jar, gen-last-modified-file"
            description="Builds a war file">
        <echo message="Generating ${war.file} file"/>

        <!-- Create local directories to copy common files. -->
        <property name="temp.dir.layouts" value="${temp.dir}/layouts"/>
        <property name="temp.dir.styles" value="${temp.dir.layouts}/styles"/>
        <property name="temp.dir.images" value="${temp.dir}/images"/>
        <property name="temp.dir.pages" value="${temp.dir}/pages"/>
        <property name="temp.dir.tld" value="${temp.dir.web-inf}/tld"/>


        <mkdir dir="${temp.dir.layouts}"/>
        <mkdir dir="${temp.dir.styles}"/>
        <mkdir dir="${temp.dir.images}"/>
        <mkdir dir="${temp.dir.pages}"/>
        <mkdir dir="${temp.dir.tld}"/>

        <!-- files -->
        <copy todir="${temp.dir}">
            <fileset dir="${basedir}">
                <include name="*.jsp"/>
                <!--<include name="cvBrowser.jsp"/>-->
                <include name="*.jpg"/>
                <include name="*.css"/>
                <include name="*.xsl"/>
                <include name="*.html"/>
                <exclude name="WEB-INF/**"/>
                <include name="${tld.dir}/**"/>
                <include name="images/*"/>
                <exclude name="pages/**"/>
                <exclude name="layouts/**"/>
                <include name="${last.modified.file}"/>
                <include name="META-INF/*.xml"/>
            </fileset>
        </copy>

        <!-- Common layouts -->
        <copy todir="${temp.dir.layouts}">
            <fileset dir="${layouts.dir}"/>
            <fileset dir="${intact.app.dir}/layouts">
                <!-- Don't need any frame layouts for this application -->
                <exclude name="*Frame.jsp"/>
                <!--  No EBI header for this application (yet) -->
                <exclude name="ebiHeaderLayout.jsp"/>
                <!-- Exclude common styles -->
                <exclude name="styles/**"/>
            </fileset>
        </copy>

        <!-- Common images -->
        <copy todir="${temp.dir.images}">
            <fileset dir="${images.dir}"/>
            <fileset dir="${intact.app.dir}/images"/>
        </copy>

        <!-- Common jsp files -->
        <copy todir="${temp.dir.pages}">
            <fileset dir="${pages.dir}"/>
            <fileset dir="${intact.app.dir}/pages">
                <!-- Don't need error frame JSP -->
                <exclude name="errorFrame.jsp"/>
            </fileset>
        </copy>

        <!-- WEB-INF conf giles -->
        <copy todir="${temp.dir.web-inf}">
            <fileset dir="WEB-INF">
                <include name="*.xml"/>
            </fileset>
        </copy>

        <!-- Delete the war file or else it will keep the old one -->
        <delete file="${dist.dir}/${war.file}" quiet="true"/>

        <!-- Copy struts standard tld files -->
        <copy todir="${temp.dir.tld}">
            <fileset dir="${tld.dir}"/>
            <fileset dir="${intact.app.dir}/tld">
                <include name="*.tld"/>
                <!-- Don't need intact.tld for this application -->
                <!--                <exclude name="intact.tld"/>-->
            </fileset>
        </copy>

        <!-- Copy jars to lib temp folder -->
        <copy todir="${temp.dir.lib}">
             <!-- Inlcude the intact core -->
            <fileset dir="${root.dist.dir}"/>

            <!-- Include application common jar files but exclude test files -->
            <fileset dir="${intact.app.dir}/lib">
                <exclude name="test/**"/>
            </fileset>

            <!-- Include common jar files from intact core. -->
            <fileset dir="${root.lib.dir}">
                <include name="db-ojb-1.0.rc6.jar"/>
                <include name="log4j-1.2.11.jar"/>
                <include name="${db}"/>
                <include name="commons-pool-1.1.jar"/>
                <include name="commons-dbcp-1.1.jar"/>
                <include name="commons-collections-3.0.jar"/>
                <include name="commons-httpclient-3.0-rc2.jar"/>
                <include name="commons-codec-1.4-dev.jar"/>
            </fileset>

             <!-- hibernate -->
            <fileset dir="${root.lib.dir}/hibernate">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${root.lib.dir}/hibernate/transitive-deps">
                <include name="*.jar"/>
            </fileset>

        </copy>

        <war destfile="${dist.dir}/${war.file}" webxml="WEB-INF/web.xml">
            <fileset dir="${temp.dir}">
                <exclude name="WEB-INF/classes/**"/>
                <exclude name="WEB-INF/lib/**"/>
                <exclude name="WEB-INF/web.xml"/>
            </fileset>


            <!-- Inlcude the libs -->
            <lib dir="${temp.dir.lib}"/>

            <!-- search specific classes -->
            <classes dir="${temp.dir.classes}"/>
        </war>

        <antcall target="gen-context-file"/>
    </target>

    <!-- =================================================================== -->

    <!-- Sets the database type using the values given in build.properties. -->

    <target name="set-db-type">
        <condition property="postgres">
            <contains string="${target.env}" substring="-postgres-"/>
        </condition>
        <condition property="oracle">
            <contains string="${target.env}" substring="-oracle-"/>
        </condition>
    </target>

    <!-- =================================================================== -->

    <!--
         Builds a war file with postgres;
         should be called only after calling set-db-type.
      -->

    <target name="war-postgres" if="postgres">
        <!-- Load postgres properties. -->
        <property file="${intact.root}/config/postgres.properties"/>

        <echo message="Building a war for postgres ${dbalias} database"/>
        <property name="war.name" value="${ant.project.name}-${dbalias}-${TODAY}.war"/>

        <antcall target="build-war">
            <param name="db" value="${postgresql.jar}"/>
            <param name="war.file" value="${war.name}"/>
        </antcall>
    </target>

    <!-- =================================================================== -->

    <!--
        Builds a war file for oracle database;
        should be called only after calling set-db-type.
      -->

    <target name="war-oracle" description="Builds a war file for oracle" if="oracle">
        <!-- Load oracle properties. -->
        <property file="${intact.root}/config/oracle.properties"/>

        <echo message="Building a war for oracle ${dbalias} database"/>
        <property name="war.name" value="${ant.project.name}-${dbalias}-${TODAY}.war"/>

        <antcall target="build-war">
            <param name="db" value="${oracle.jar}"/>
            <param name="war.file" value="${war.name}"/>
        </antcall>
    </target>

    <!-- =================================================================== -->

    <!-- Deploys the war file on the Tomcat server. -->
    <target name="deploy" description="Deploys the WAR file on the Tomcat server" depends="war">
        <!--  OLD DEPLOYMENT
        <ant dir=".." inheritAll="false" target="deploy">
            <property name="war" value="search3/${dist.dir}/${war.name}"/>
        </ant>
        -->
         <ant dir=".." inheritAll="false" target="deploy-using-manager">
            <property name="context.path" value="/${server.name}/search"/>
            <property name="dist.dir.absolute.path" value="${basedir}/${dist.dir}"/>
            <property name="context.file.name" value="${search-context-file}" />
            <property name="war.file.name" value="${war.name}"/>
        </ant>

        <!-- Copy context files in the Tomcat's webapps directory -->
        <!--
          <copy file="${dist.dir}/${search-context-file}"
              todir="${tomcat.conf.dir}" overwrite="yes"/>
        -->
        <copy file="${dist.dir}/${search-context-file}"
              todir="${webapps.dir}" overwrite="yes"/>
    </target>

    <!-- =================================================================== -->

    <!-- Undeploys the war file from the Tomcat server. -->
    <target name="undeploy"
            description="Undeploys the WAR file from the Tomcat server">
        <!--  OLD DEPLOYMENT
        <ant dir=".." inheritAll="false" target="undeploy">
            <property name="war" value="search3"/>
        </ant>
        -->
        <ant dir=".." inheritAll="false" target="undeploy-using-manager">
            <property name="context.path" value="/${server.name}/search"/>
        </ant>

        <!-- Delete context files from the Tomcat's webapps directory -->
        <delete file="${webapps.dir}/${search-context-file}" quiet="true"/>
    </target>

    <!-- =================================================================== -->

    <!-- Runs the JUnit tester directly. The output is redirected to std out -->
    <target name="junit-test" depends="compile"
            description="Runs JUnit directly with output directed to stdout">
        <java classname="junit.textui.TestRunner">
            <arg value=
                    "uk.ac.ebi.intact.application.search3.test.AllJUnitTests"/>
            <classpath refid="project.class.path"/>
        </java>
    </target>

    <!-- =================================================================== -->

    <!-- Runs the HttpJUnit tester directly. The output is redirected to std out -->
    <target name="httpunit-test" depends="compile"
            description="Runs JUnit directly with output directed to stdout">
        <java classname="junit.textui.TestRunner">
            <arg value=
                    "uk.ac.ebi.intact.application.search3.test.HttpUnitTests"/>
            <classpath refid="project.class.path"/>
        </java>
    </target>

    <!-- =================================================================== -->

    <!-- Starts the Tomcat server. -->

    <target name="start-tomcat">
        <ant dir=".." inheritAll="false" target="start-tomcat"/>
    </target>

    <!-- =================================================================== -->

    <!-- Stops the Tomcat server. -->

    <target name="stop-tomcat">
        <ant dir=".." inheritAll="false" target="stop-tomcat"/>
    </target>

    <!-- =================================================================== -->

    <!-- Restarts the Tomcat server. -->

    <target name="restart-tomcat">
        <ant dir=".." inheritAll="false" target="restart-tomcat"/>
    </target>

    <!-- =================================================================== -->

    <!-- Displays the status of Tomcat server. -->

    <target name="status-tomcat">
        <ant dir=".." inheritAll="false" target="status-tomcat"/>
    </target>

    <!-- =================================================================== -->

    <!-- Generates the last modified date file. -->

    <target name="gen-last-modified-file">
        <ant dir=".." inheritAll="false" target="gen-last-modified-file">
            <property name="file" value="search3/${last.modified.file}"/>
        </ant>
    </target>

    <!-- =================================================================== -->

    <!-- Create the context file. -->

    <target name="gen-context-file">
        <echo message="Creating the context file..."/>

        <!-- Copy the template file -->
        <copy todir="${dist.dir}"
              file="${intact.context.dir}/${search-context-file}"
              overwrite="true"/>

        <!-- Customize the context file -->
        <ant dir=".." inheritall="false" target="customize-context-file">
            <property name="dist.dir.absolute.path" value="${basedir}/${dist.dir}"/>
            <property name="context.file.name" value="${search-context-file}" />
            <property name="war.file.name" value="${war.name}"/>
         </ant>

        <!-- Customize the context file
        <replace file="${dist.dir}/${search-context-file}"
                 token="[WAR.ABSOLUTE.PATH]"
                 value="${scp.destination.dir}/${war.file}"/>
        <replace file="${dist.dir}/${search-context-file}"
                 token="[server.name]"
                 value="${server.name}"/>
                 -->
    </target>

</project>
