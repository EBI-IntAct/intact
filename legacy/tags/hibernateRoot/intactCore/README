README for Intact Core
**********************************************************************

DIRECTORIES
------------

application/    : IntAct web applications, including JSPs etc
classes/        : compiled Java classes
config/	        : configuration files
data/           : data flat files for test purposes
doc/            : documentation
ide/            : project files of Java IDEs
lib/            : third-party libraries needed in addition to the standard JDK
perl/           : auxiliary perl scripts
scripts/        : auxiliary scripts, ant files, make files
specifications/ : specifications, mainly screen mockups, for IntAct applications
sql/            : sql scripts for Oracle and Postgres
src/            : Java sources
template/       : template files for configuration etc.
test/           : contains JUNIT 4.0 tests for the IntAct model
uml/            : UML modeling files

Other directories under intactCore not mentioned above are currently not relevant to installing/running intact.


OUTLINE
-------

1. Prerequisites
2. Setup
3. Applications
4. Hints and Tips



DETAILED INSTALLATION NOTES
----------------------------

1. Prerequisites
-----------------
To install and run the intact software you must have the following installed in your
environment (or, for the DBs, at least have access to them over the network):

	- java JDK 1.4
	  see http://java.sun.com/j2se/downloads.html
	- ant 1.5 or above (all the intact build process relies on ant)
	  see http://ant.apache.org/bindownload.cgi
	- Tomcat Light Edition, for JDK 1.4 (preferably 4.1.1.8 LE)
        see http://jakarta.apache.org/builds/jakarta-tomcat-4.0/release/v4.1.18/bin/
	- either Postgres 7.2 or Oracle 8.1.6 (or higher)
        for postgres see http://www.postgresql.org/mirrors-ftp.html

For hierarchView:

	- Apache Axis web application (1.0beta2) for web services (for use with the HierarchView application)
	  see http://ws.apache.org/axis/
	- Tulip, the graph rendering library which is needed by HierarchView
	  see http://www.tulip-software.org/
	- gcc++ 2.96 AND NO OTHER RELEASE to build the Console executable to access Tulip

If you plan to run hierarchView, then Tulip needs the following environment variables to be set:

TLPDIR=<location of the main tulip directory>
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:TLPDIR/lib

There are more detailed notes for hierarchView in a README file in the directory application/hierarchView.

The following environment variables should be set:

$CATALINA_HOME - the home directory of your tomcat installation
$CATALINA_OPTS - should be set with your proxy setting (needed by protein loading, and so by search)
                in the EBI, it would be set to '-DproxySet=true -DproxyHost=www-proxy.ebi.ac.uk -DproxyPort=8080'
$JAVA_HOME - the home directory of your JDK
$CLASSPATH should contains, at least, the current directory (i.e. : .).


All those variable settings could be done by sourcing one of the following scripts :
  - scripts/setEnv.sh  (for bash environment)
    type: . scripts/setEnv.sh
  - scripts/setEnv.csh (for csh environment)
    type: source scripts/setEnv.csh

Intact has been tested on both Redhat Linux 7.1 and Windows 2000/XP running inside cygwin, and with both local and
remote postgres databases as well as a remote oracle DB. Thus intact is based around a linux/unix environment, but if you
have Windows then everything can still be used provided you have cygwin installed.


For postgres 7.x:
    To allow all computer in the local network to connect to the database you have to configure the file 'pg_hba.conf'
    in your postgres directory.
    e.g:
    # Allow any user from any host with IP address 127.x.x.x to connect to database
    # TYPE  DATABASE    USER        IP-ADDRESS        IP-MASK           METHOD
    host    all         all         127.0.0.0         255.0.0.0         trust

    See also http://www.postgresql.org/docs/7.x/interactive/client-authentication.html#AUTH-PG-HBA-CONF
    (replace the '7.x' in the URL with your postgres version)

    
2. Setup
---------
a) Firstly download the intact software from http://sourceforge.net/projects/intact, by following the
instructions for anonymous download on the CVS pages. All of what follows assumes a root directory of 'intactCore'.

b) You must then ensure that the configuration files are set correctly for you environment. A lot of this is automated
for you, via the 'config/build.properties' file.

c.) You have to download the relevant jdbc driver for your database and store this driver in /lib.
    Then set the jdbc-driver filename and the class of the driver itself for your database in config/jdbc.properties.
    You will find examples of configuration in that file. 

    Here are locations from which you can download JDBC drivers for wither PostgreSQL and Oracle:

        - Postgres users should download the relevant jdbc-driver for your postgres version from
          http://jdbc.postgresql.org/download.html#jars

        - Oracle users should download the relevant jdbc-driver for your oracle version from
          http://www.oracle.com/technology/software/tech/java/sqlj_jdbc/index.html

Features:
        - Target database:
          Uncomment the target environment that you have (ie currently for oracle or postgres)
          Note that you need to have a file in the config directory called 'oracle.properties' (respectivly
          'postgres.properties') containing your password (eg 'password=abcd'), username...
          In the 'template' directory you will find a file called 'oracle.template' ('postgres.template') -
          edit this file to define database access, then save it as 'oracle.properties' ('postgres.properties')
          in the 'config' directory.

        - Caching:
          you can enable/disable database caching by modifying the property: ojb.ObjectCacheClass

        - IntAct URL:
          you can customise the URL at which the intact applications will be available by editing
          the property: server.name
          If you set it to 'intact', all applications will be reachable from the following URL pattern:
          http://www.myserver.com/intact/<application>

In the intactCore directory, type

	ant set-target-env

Afterwards you should check the config/repository_database.xml file to ensure that your correct DB connection details have been
generated. If not you should edit 'repository_database.xml' manually to set the DB URL, user/password etc by using
the template in that file as a guide.

c) As IntAct is using HTTP connexion to communicate with external resources (eg. SRS, ego, Newt...),
   you could encounter some problems (ie. no connection allowed) if your system runs behind an HTTP proxy.
   In order to go through you proxy server, you need to customize the file 'config/proxy.properties'
   by turning the proxy support on and specifying the hostname and port number of your proxy.

   example:
             if your proxy hostname is 'myproxy.mycompany.com' and it runs on the port '3129',
             you should customize your configuration file as follow:

             proxy.enable=true
             proxy.host=myproxy.mycompany.com
             proxy.port=3129

d) Having downloaded intact and set the configuration details as above, from the intactCore directory type

	ant compile-core

This will generate the core intact classes - individual applications can then be built (there is also an option to
build everything in one go - 'ant compile-all' - if you so wish).

e) the final step for the intact core setup is to load the database. There are sample data files in the data directory,
and to populate your database with this data simply type

	scripts/postgres/testfill.sh 'user/pwd' <dbname> small | medium | large | onlyCV  (postgres - quotes can be omitted if no password)

or
	scripts/oracle/testfill.sh 'user/pwd' <dbname> small | medium | large | onlyCV (oracle)

"small" is for minimal tests, will need < 5 minutes. "large" is full, real data from the Ho and Gavin experiments,
will run ca. 30 minutes.

You should then check your database using an appropriate tool (eg pgaccess for postgres/linux) to make sure you have the
intact tables and that they are populated.

Finally to build the javadoc just type

	ant javadoc

the generated javadoc can then be found in doc/api.


3. Applications
----------------

Intact comes bundled with a number of web applications - currently we have:

	- search:       The search application.
	- editor:       Edit interface for IntAct objects.
	- hierarchView: Graph visualisation.
    	- intact:       Contains only static documentation pages,
                   	but installation is the same as for normal
                    	web applications.

There is also the 'synchron' application which is use to exchange data between intact sites - this is standalone
and not web-based. As this application matures further details will be included about it in this file
(it is currently still under development).

IMPORTANT NOTE - ORACLE USERS
------------------------------
There is a problem when running against an oracle database with 'open cursors' on the oracle server. If you use
the default connection pooling provided by OJB then the cursors will not be closed properly on the server, which
will eventually result in queries failing. This is only an issue if you want connection pooling - if not then
no action is required; however we recommend that you use the 'OracleConnectionCacheImpl' driver, as this will
clean up the resources used by pooled connections correctly.


For search there is one file to customize. In the file

        application/search/WEB-INF/config/HierarchView.properties

the hostname of the machine running hierarchView must be set correctly. The default is set to 'localhost', but
if you wish to view graphs using the search application from remote machines then the hostname in this file
should be set to a correct DNS value (ie your machine name where hierarchView resides). If you do not do this then
browsers on remote machines will try to find the hierarchView application on their own machine!

HierarchView requires a little more effort. The web service for hierarchView needs to first be deployed.
please read the README file in the application/hierarchView directory for more details about how to install
the web service and the hierarchView application.

The next step is to put the web applications into your tomcat server and start it, as follows:

a) cd applications/<webapp-name>, then type

	ant war deploy

This will build a war file and copy it to your tomcat webapps directory
(assuming you have $CATALINA_HOME set as an environment variable).
Just to check things worked OK, you should see a collection of <appname>.war files in your
$CATALINA_HOME/webapps directory.

b) type ant start-tomcat (once)- if this fails, simply go to your tomcat bin directory and
   start it manually from there.

c) to start a web application, open a web browser and type

	http://<hostname>:8080/<webapp-name>
	or
 	http://<hostname>:8080/intact/<webapp-name>

	Example:
	http://localhost:8080/intact/search

Note that from the search application it is also possible to generate a graph of selected items - but to use this facility
you should have installed the components for hierarchView (ie Tulip and axis). Note that Tulip is a C++ application and
has only been tested on Redhat Linux 7.1 and 8.0.


4. Hints and Tips
------------------
a) If you find that you get OutOfMemoryErrors with large queries through tomcat, increasing the heap
   size that tomcat uses can help. You can do this simply by setting the envirnoment variable JAVA_OPTS as follows:

   setenv JAVA_OPTS '-Xms128M -Xmx512M' (or use export if you use another shell)

   before you start tomcat.

b) If you experience problems relating to database connections which are generated from the OJB layer
   then you can try the following:

    - first edit the OJB.properties file and increase the  "maxConnectionsInPool" property (the default is 21).
    - if that does not help, edit the repository.xml file and set 'eager-release="true"' in the jdbc-connection-descriptor
      tag. This is supposed to be for use with application servers to encourage early release of database connections,
      but it may improve things in general.

c) If you wish to see (a lot of!) debug logging output, then edit the log4j.properties file and replace the
   line "log4j.rootCategory=ERROR, A1, A2" with "log4j.rootCategory=, A1, A2". This will generate a lot of
   logging output to a file called "intact-ojb.log". For example, a MetatDataException thrown from OJB usually
   indicates that there is an error in the repository_user.xml file when specifying the object to table
   mapping. Note however that this file can become large very quickly, especially if you are doing lots of
   large queries. Another source of logging information is the logfile generated by tomact, which you can
   find in the $CATALINA_HOME/logs directory (this is usually timestamped).

d) hierarchView can be very memory intensive, and will probably be refactored over time - so be aware that
   you may experience some of the above when submitting many requests to hierarchView.

e) Some IntAct applications, namely hierarchView, statisticView, make use of graphical libraries which, under linux,
   would try to connect to the X11 server. If your DISPLAY variable is not correctly configured this may prevent the
   application from being able to produce graphics and usually display exception such as:

   Exception in thread "main" java.lang.InternalError: Can't connect to X11 window server using 'machine_name:0' as
                                                       the value of the DISPLAY variable.

   If you encounter such problem you could try to give an additional option to the JVM,
   ie. JAVA_OPTS="-Djava.awt.headless=true"
   That should shortcut the access to the X server and allow the application to run smoothly.


ACKNOWLEDGEMENTS
This product includes software developed by
the Apache Software Foundation (http://www.apache.org),
Ed Hill (ed-hill@uiowa.edu), and
the ExoLab project (http://www.exolab.org).


