<?xml version="1.0" encoding="UTF-8"?>
<!--
     ANT build configuration file for Graph2MIF WebService
     Author: Henning Mersch - hmersch@ebi.ac.uk
     Version: $Id$
-->
<project name="graph2MIFWS" basedir="." default="compile">
    <property name="project.title" value="graph2MIFWS"/>
    <property name="project.version" value="0.5"/>

    <!-- Intact core locations -->
    <property name="intact.root" value="../.."/>
    <property name="root.lib.dir" value="${intact.root}/lib"/>
    <property name="root.src.dir" value="${intact.root}/src"/>
    <property name="root.dest.dir" value="${intact.root}/classes"/>
    <property name="root.config.dir" value="${intact.root}/config"/>
    <property name="root.dist.dir" value="${intact.root}/dist"/>
    <property name="root.jar.file" value="${root.dist.dir}/intact-core.jar"/>

    <!-- Intact application location. -->
    <property name="intact.app.dir" value=".."/>

    <!-- context path for graph2MIF store in the application level -->
    <property name="intact.context.dir"     value="${intact.app.dir}/context"/>
    <property name="graph2MIF.context.file" value="graph2MIF-context.xml"/>

    <property environment="env"/>
    <property name="tomcat.home" value="${env.CATALINA_HOME}"/>
    <property name="webapps.dir" value="${tomcat.home}/webapps"/>

    <!-- The build properties. -->
    <property file="${intact.root}/config/build.properties"/>

    <!-- The logging configuration -->
    <property file="${intact.root}/config/log4j.properties"/>

    <property name="dist.dir" value="dist"/>
	<property name="docs.dir" value="doc/api"/>
    <property name="war.file" value="graph2mif.war"/>

    <!-- The console properties -->
    <property file="client.properties"/>

    <!-- The web service properties -->
    <property file="graph2MIF.properties"/>

    <!-- This project specific paths. -->
	<property name="src.dir" value="src"/>
    <property name="lib.dir" value="WEB-INF/lib"/>
    <property name="wsdd.file" value="Graph2MIFWS.wsdd"/>

    <!-- A snapshot of the war file -->
    <property name="temp.web" value="temp-web"/>
    <property name="dest.dir" value="${temp.web}/WEB-INF/classes"/>

    <!-- Build intact classpath -->
    <path id="intact.class.path">
        <!-- Project specific jar files. -->
        <fileset dir="${root.lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <!-- Where the classes are compiled to. -->
        <pathelement path="${root.dest.dir}"/>

        <!-- Intact core at root. -->
        <pathelement path="${root.jar.file}"/>

    </path>
    <!-- Build working/project classpath -->
    <path id="project.class.path">
        <!-- Project specific jar files. -->
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>

        <!-- Where the classes are compiled to. -->
        <pathelement path="${dest.dir}"/>

        <!-- Intact core at root. -->
        <pathelement path="${root.jar.file}"/>

        <!-- Common jar files. -->
        <pathelement path="${root.lib.dir}/db-ojb-1.0.rc6.jar"/>
        <pathelement path="${root.lib.dir}/commons-dbcp-1.1.jar"/>
        <pathelement path="${root.lib.dir}/log4j-1.2.8.jar"/>
        <pathelement path="${root.lib.dir}/servlet.jar"/>
        <pathelement path="${root.lib.dir}/commons-logging.jar"/>
        <pathelement path="${root.lib.dir}/jaxrpc.jar"/>
        <pathelement path="${root.lib.dir}/commons-lang-2.0.jar"/>
        <pathelement path="${root.lib.dir}/commons-cli-1.0.jar"/>
        <pathelement path="${root.lib.dir}/commons-pool-1.1.jar"/>
        <pathelement path="${root.lib.dir}/xercesImpl.jar"/>
        <pathelement path="${root.lib.dir}/xml-apis.jar"/>
    </path>

    <!-- =================================================================== -->

    <!-- Sets the time stamp and various 'present' properties. -->
    <target name="prepare">
        <tstamp/>
        <mkdir dir="${basedir}/${lib.dir}"/>
        <available file="${root.jar.file}" type="file" property="intact.jar.present"/>

        <!-- Check the log level -->
        <condition property="log.level.is.error">
            <contains string="${log4j.logger.graph2MIF}" substring="ERROR"/>
        </condition>

        <ant target="check-log-level" />

    </target>

    <!-- =================================================================== -->

    <!-- If the log level isn't set to ERROR, a blocking message is displayed to let the user know -->
    <target name="check-log-level" unless="log.level.is.error" >

        <echo>
            BEWARE that if the logging feature isn't set to ERROR (ie. ${log4j.logger.graph2MIF}),
            it might affect considerably the performance of the application.
            Up to now, even the WARN level is generating a huge load of log.
            cf. the file $INTACT_CORE/config/log4j.properties (section graph2mif).
        </echo>

        <input message="Press the ENTER to continue..."/>

    </target>

    <!-- =================================================================== -->

    <!-- Sets the time stamp. -->
    <target name="set-tstamp">
        <tstamp>
            <format property="TODAY" pattern="yyyy-MM-dd" locale="en"/>
        </tstamp>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the java 'docs' . -->
    <target name="doc">
        <mkdir dir="${docs.dir}"/>
		<javadoc packagenames="uk.ac.ebi.intact.application.graph2MIF, uk.ac.ebi.intact.application.graph2MIF.client"
		         sourcepath="${root.src.dir}"
				 defaultexcludes="yes"
				 destdir="${docs.dir}"
				 author="true"
				 private="true"
				 version="true"
				 use="true"
				 windowtitle="graph2MIF APIS">
			  <classpath refid="project.class.path"/>
		 </javadoc>
    </target>

    <!-- =================================================================== -->
    <!-- Remove 'dest' and docs directories for clean build -->
    <target name="clean" description="Prepare for clean build">
        <!-- Delete directories first -->
        <delete dir="${temp.web}"/>
        <delete dir="${docs.dir}"/>
    </target>

    <!-- =================================================================== -->

    <!-- Cleans temp-web, classes and docs directories  -->
    <target name="clean-all" description="Cleaning everything..." depends="clean">
		<delete dir="${root.dest.dir}/uk/ac/ebi/intact/application/graph2MIF/"/>
    </target>

    <!-- =================================================================== -->

    <!-- Calls the jar task from core build file if intact core jar file
         is missing.
    -->
    <target name="make-jar" depends="prepare" unless="intact.jar.present">
        <ant dir="${intact.root}" target="jar-core" inheritAll="false"/>
    </target>

    <!-- =================================================================== -->

    <!-- Copy configuration files. -->
    <target name="cp-config-files">
        <!-- Copy repository files -->
        <copy todir="${dest.dir}/config">
            <fileset dir="${root.config.dir}">
                <include name="repository*.xml"/>
                <include name="repository.dtd"/>
                <include name="Institution.properties"/>
            </fileset>
        </copy>

        <!-- the OJB and log4J properties files should be at the top level in 'dest' -->
        <copy todir="${dest.dir}" file="${root.config.dir}/OJB.properties"/>
        <copy todir="${dest.dir}" file="${root.config.dir}/log4j.properties"/>

    </target>
    
    <!-- =================================================================== -->

    <!-- Compile the source tree; creates the dest dir if it doesn't exist. -->
    <target name="compile" depends="make-jar"
        description="Compiles non test source files">

        <!-- Create the dest dir if it doesn't exist. -->
        <mkdir dir="${dest.dir}"/>

        <!-- Only compile graph2MIF sources only. -->
        <javac srcdir="${root.src.dir}" destdir="${dest.dir}" deprecation="on"
            debug="on" source="1.4"
            includes="**/application/graph2MIF/**"
            excludes="**/graph2MIF/client/**">
            <classpath refid="project.class.path"/>
        </javac>

        <!-- Copy configuration files -->
        <antcall target="cp-config-files"/>
    </target>

    <!-- =================================================================== -->

    <!-- Compile the source tree; creates the dest dir if it doesn't exist. -->
    <target name="compile-all" depends="make-jar"
        description="Compiles all the source files">

        <!-- Create the dest dir if it doesn't exist. -->
        <mkdir dir="${dest.dir}"/>

        <!-- Only compile graph2MIF sources only. -->
        <javac srcdir="${root.src.dir}" destdir="${dest.dir}" deprecation="on"
            debug="on" source="1.4"
            includes="**/application/graph2MIF/**">
            <classpath refid="project.class.path"/>
        </javac>

        <!-- Copy configuration files -->
        <antcall target="cp-config-files"/>
    </target>

    <!-- =================================================================== -->

    <!-- Builds a war file using the current database setup. -->

    <target name="war" description="Builds a war file"
        depends="set-tstamp, set-db-type, war-postgres, war-oracle"/>

    <!-- =================================================================== -->

    <!-- Builds a war file. The database to include is specified as a parameter. -->

    <target name="build-war" depends="compile, gen-context-file">

        <!-- Copy XML (configuration) files -->
        <copy todir="${temp.web}/WEB-INF">
            <fileset dir="WEB-INF">
                <include name="*.xml"/>
                <exclude name="web.xml"/>
            </fileset>
        </copy>

        <!-- Copy JSPs files -->
        <copy todir="${temp.web}">
            <fileset dir=".">
                <include name="*.jsp"/>
            </fileset>
        </copy>

        <echo message="-----------------------------------------------------------------------------------------------" /> 
        <echo message="The jar file: jaxprpc.jar has to be put in a shared location between hierarchView and graph2MIF" />
        <echo message="-----------------------------------------------------------------------------------------------" />

        <!-- Copy jar files -->
        <copy todir="${temp.web}/WEB-INF/lib">
            <!--  Graph2MIF specific jar files. -->
            <fileset dir="WEB-INF/lib"/>
            <!-- Inlcude the intact core -->
            <fileset dir="${root.dist.dir}"/>
            <!-- Include required jar files from intact core. -->
            <fileset dir="${root.lib.dir}">
                <include name="jaxrpc.jar"/>
                <include name="commons-lang-2.0.jar"/>
                <include name="commons-pool-1.1.jar"/>
                <include name="db-ojb-1.0.rc6.jar"/>
                <include name="commons-dbcp-1.1.jar"/>
                <include name="log4j-1.2.8.jar"/>
                <include name="xercesImpl.jar"/>
                <include name="xml-apis.jar"/>
                <include name="${db}"/>
            </fileset>
        </copy>
        <!-- Generate server-config.wsdd from Graph2MIFWS.wsdd -->
		<java classname="org.apache.axis.utils.Admin" fork="yes">
		      <arg line="server"/>
			  <arg line="${wsdd.file}"/>
			  <classpath refid="project.class.path"/>
		</java>
		<!-- ...must be moved to WEB-INF  -->
		<move file="server-config.wsdd" todir="${temp.web}/WEB-INF"/>

        <!-- Create the distribution dir if it doesn't exist. -->
        <mkdir dir="${dist.dir}"/>

        <!-- Delete the war file or else it will keep the old one -->
        <delete file="${dist.dir}/${war.file}" quiet="true"/>

        <!-- Generate Graph2MIF topics -->
        <war destfile="${dist.dir}/${war.file}" webxml="WEB-INF/web.xml">
            <fileset dir="${temp.web}">
                <include name="**"/>
            </fileset>
        </war>

    </target>

    <!-- =================================================================== -->

    <!-- Sets the database type using the values given in build.properties. -->

    <target name="set-db-type">
        <condition property="postgres">
            <contains string="${target.env}" substring="-postgres-"/>
        </condition>
        <condition property="oracle">
            <contains string="${target.env}" substring="-oracle-"/>
        </condition>
    </target>

    <!-- =================================================================== -->

    <!--
         Builds a war file with postgres;
         should be called only after calling set-db-type.
      -->

    <target name="war-postgres" if="postgres">
        <!-- Load postgres properties. -->
        <property file="${intact.root}/config/postgres.properties" />

        <echo message="Building a war for postgres ${dbalias} database"/>
        <property name="war.name" value="${ant.project.name}-${dbalias}-${TODAY}.war"/>

        <antcall target="build-war">
            <param name="db" value="postgresql.jar"/>
            <param name="war.file" value="${war.name}"/>
        </antcall>
    </target>

    <!-- =================================================================== -->

    <!--
        Builds a war file for oracle database;
        should be called only after calling set-db-type.
      -->

    <target name="war-oracle" description="Builds a war file for oracle" if="oracle">
        <!-- Load oracle properties. -->
        <property file="${intact.root}/config/oracle.properties" />

        <echo message="Building a war for oracle ${dbalias} database"/>
        <property name="war.name" value="${ant.project.name}-${dbalias}-${TODAY}.war"/>

        <antcall target="build-war">
            <param name="db" value="jdbc_oracle8i_thin_8.1.6.2.0.jar"/>
            <param name="war.file" value="${war.name}"/>
        </antcall>
    </target>

    <!-- =================================================================== -->

    <!-- Deploys the war file on the Tomcat server. -->
    <target name="deploy" description="Deploys the WAR file on the Tomcat server">
        <copy todir="${webapps.dir}/" file="${dist.dir}/${war.name}"/>

        <echo>
            After the war file as been expanded by Tomcat (or yourself),
            please deploy the context file manually.
        </echo>

    </target>

    <!-- =================================================================== -->

    <!-- Undeploys the war file from the Tomcat server. -->
    <target name="undeploy"
        description="Undeploys the WAR file from the Tomcat server">
        <ant dir=".." inheritAll="false" target="undeploy">
            <property name="war" value="${ant.project.name}"/>
        </ant>

        <!-- Delete context files from the Tomcat's webapps directory -->
        <delete file="${webapps.dir}/${graph2MIF.context.file}" quiet="true"/>
    </target>

    <!-- =================================================================== -->

    <!-- Starts the Tomcat server. -->

    <target name="start-tomcat">
        <ant dir=".." inheritAll="false" target="start-tomcat"/>
    </target>

    <!-- =================================================================== -->

    <!-- Stops the Tomcat server. -->

    <target name="stop-tomcat">
        <ant dir=".." inheritAll="false" target="stop-tomcat"/>
    </target>
    <!-- =================================================================== -->

    <!-- Display the parameters of the client. -->
    <target name="displayClientParameter"
	        description="Display the parameters of the client">
         <echo message="Interactor AC         : ${client.AC}" />
         <echo message="Graph depth           : ${client.depth}" />
         <echo message="Strict MIF compliance : ${client.strictMIF}" />
	</target>

    <!-- =================================================================== -->

    <!-- Compile example webservice client application. -->
    <target name="wsclient"
	    description="Builds the example webservice client for Graph2MIF">
        <javac srcdir="${root.src.dir}" destdir="${root.dest.dir}" deprecation="on"
		  debug="on" source="1.4"
		  includes=" **/graph2MIF/client/Graph2MIFWSClient.java">
		  <classpath refid="project.class.path"/>
		</javac>
	</target>

    <!-- =================================================================== -->
    <!-- Run example webservice client application. -->
    <target name="run-wsclient" depends="wsclient"
        description="Copies properties and runs the webservice client for testing.">
        <copy todir="${root.dest.dir}" file="graph2MIF.properties"/>

        <echo message="Web service URL: ${webservice.location}" />
        <ant target="displayClientParameter" />

		<java classname="uk.ac.ebi.intact.application.graph2MIF.client.Graph2MIFWSClient" fork="yes">
		      <arg line="-ac ${client.AC}"/>
			  <arg line="-depth ${client.depth}"/>
			  <arg line="-strict ${client.strictMIF}"/>
			  <classpath refid="intact.class.path"/>
			  <classpath refid="project.class.path"/>
		</java>
	</target>

    <!-- =================================================================== -->
    <!-- Compile example console application. -->
    <target name="console"
	    description="Builds the example console for Graph2MIF">
        <ant target="displayClientParameter" />
		<javac srcdir="${root.src.dir}" destdir="${root.dest.dir}" deprecation="on"
		  debug="on" source="1.4"
		  includes=" **/graph2MIF/client/Graph2MIFConsole.java">
		  <classpath refid="project.class.path"/>
		</javac>
	</target>

    <!-- =================================================================== -->
    <!-- Run example webservice client application. -->
    <target name="run-console" depends="console"
        description="Runs the console for testing.">
		<java classname="uk.ac.ebi.intact.application.graph2MIF.client.Graph2MIFConsole" fork="yes">
		      <arg line="-ac ${client.AC}"/>
			  <arg line="-depth ${client.depth}"/>
			  <arg line="-strict ${client.strictMIF}"/>
			  <classpath refid="intact.class.path"/>
			  <classpath refid="project.class.path"/>
		</java>
	</target>

    <!-- =================================================================== -->

    <!-- Create the context file. -->

    <target name="gen-context-file">
        <echo message="Creating the context file..."/>

        <!-- Copy the template file -->
        <copy todir="${dist.dir}"
              file="${intact.context.dir}/${graph2MIF.context.file}"
              overwrite="true" />

        <!-- Customize the context file -->
        <replace file="${dist.dir}/${graph2MIF.context.file}"
                 token="[WAR.FILE.NAME]"
                 value="${war.file}" />
        <replace file="${dist.dir}/${graph2MIF.context.file}"
                 token="[server.name]"
                 value="${server.name}" />

        <replace file="${dist.dir}/${graph2MIF.context.file}"
                 token=".war"
                 value="" />
    </target>

</project>
