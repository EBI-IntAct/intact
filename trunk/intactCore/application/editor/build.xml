<?xml version="1.0" encoding="UTF-8"?>
<!--
     ANT build configuration file for editor module.
     Author: Sugath Mudali, smudali@ebi.ac.uk.
     Version: $Id$
-->

<project name="editor" basedir="." default="compile">
    <property name="project.version" value="1.0"/>

    <!-- Intact core locations -->
    <property name="intact.root" value="../.."/>
    <property name="root.lib.dir" value="${intact.root}/lib"/>
    <property name="root.src.dir" value="${intact.root}/src"/>
    <property name="root.dest.dir" value="${intact.root}/classes"/>
    <property name="root.config.dir" value="${intact.root}/config"/>
    <property name="root.dist.dir" value="${intact.root}/dist"/>
    <property name="root.jar.file" value="${root.dist.dir}/intact-core.jar"/>

    <!-- Intact application location. -->
    <property name="intact.app.dir" value=".."/>
    <property name="intact.app.lib.dir" value="${intact.app.dir}/lib"/>

    <!-- context path for editor store in the application level -->
    <property name="intact.context.dir" value="${intact.app.dir}/context"/>
    <property name="editor-context-file" value="editor-context.xml"/>

    <property environment="env"/>
    <property name="tomcat.home" value="${env.CATALINA_HOME}"/>
    <property name="webapps.dir" value="${tomcat.home}/webapps"/>

    <!-- The build properties. -->
    <property file="${intact.root}/config/build.properties"/>

    <property name="dist.dir" value="dist"/>
    <property name="pg.war.file" value="${ant.project.name}.war"/>

    <!-- This project specific paths. -->
    <property name="src.dir" value="src"/>
    <property name="lib.dir" value="WEB-INF/lib"/>

    <!-- A snapshot of the war file -->
    <property name="temp.web" value="temp-web"/>

    <property name="dest.dir" value="${temp.web}/WEB-INF/classes"/>
    <property name="docs.dir" value="doc/api"/>

    <!-- editor package root. -->
    <property name="editor.pkg.root" value="uk/ac/ebi/intact/application/editor"/>

    <!-- Editor topic properties location -->
    <property name="editor.topics.file" value="WEB-INF/config/EditorTopics.properties"/>

    <!-- The name of the last modified file -->
    <property name="last.modified.file" value="last-modified.txt"/>

    <property name="ant.dir" value="${root.lib.dir}/ant"/>

    <!-- Where is HttpUnit located? -->
    <property name="httpunit.install.dir" value="${intact.app.lib.dir}/test/httpunit"/>

    <!-- Build working classpath -->
    <path id="project.class.path">
        <!-- Project specific jar files. -->
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>

        <!-- Where the classes are compiled to. -->
        <pathelement path="${dest.dir}"/>

        <!-- Intact core at root. -->
        <pathelement path="${root.jar.file}"/>

        <!-- Common jar files. -->
        <pathelement path="${root.lib.dir}/jakarta-ojb-0.9.7.jar"/>
        <pathelement path="${root.lib.dir}/jakarta-regexp-1.2.jar"/>
        <pathelement path="${root.lib.dir}/log4j-1.2.5.jar"/>
        <pathelement path="${root.lib.dir}/servlet.jar"/>
        <pathelement path="${intact.app.lib.dir}/struts.jar"/>
        <pathelement path="${intact.app.lib.dir}/commons-collections.jar"/>
        <pathelement path="${intact.app.lib.dir}/commons-lang.jar"/>
        <pathelement path="${intact.app.lib.dir}/commons-beanutils.jar"/>
    </path>

    <path id="project.test.class.path">
        <!-- Where the classes are compiled to. -->
        <pathelement path="${dest.dir}"/>

        <!-- Where the jar files are. -->
        <fileset dir="${temp.web}/${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>

        <!-- Inlcude the intact core -->
        <pathelement path="${root.jar.file}"/>

        <!-- Runtime jar files. -->
        <fileset dir="${httpunit.install.dir}/lib">
            <include name="**/*.jar"/>
        </fileset>

        <!-- Support jar files for http unit testing -->
        <fileset dir="${httpunit.install.dir}/jars">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${root.lib.dir}">
            <include name="junit.jar"/>
            <include name="servlet.jar"/>
            <include name="xercesImpl.jar"/>
        </fileset>
    </path>

    <!-- =================================================================== -->

    <!-- Sets the time stamp and various 'present' properties. -->
    <target name="prepare">
        <mkdir dir="${basedir}/${lib.dir}"/>
        <available file="${root.jar.file}" type="file" property="intact.jar.present"/>
    </target>

    <!-- =================================================================== -->

    <!-- Sets the time stamp. -->
    <target name="set-tstamp">
        <tstamp>
            <format property="TODAY" pattern="yyyy-MM-dd" locale="en"/>
        </tstamp>
    </target>

    <!-- =================================================================== -->

    <!-- Creates the 'docs' directory. -->
    <target name="mk-docs">
        <mkdir dir="${docs.dir}"/>
    </target>

    <!-- =================================================================== -->

    <!-- Remove 'dest' and docs directories for clean build -->
    <target name="clean" description="Prepare for clean build">
        <!-- Delete directories first -->
        <delete dir="${dest.dir}"/>
        <delete dir="${docs.dir}"/>
    </target>

    <!-- =================================================================== -->

    <!-- Cleans temp-web and docs directories  -->
    <target name="clean-all" description="Prepare for a new war file">
        <delete dir="${temp.web}"/>
        <delete dir="${docs.dir}"/>
    </target>

    <!-- =================================================================== -->

    <!-- Calls the jar task from core build file if intact core jar file
         is missing.
    -->
    <target name="make-jar" depends="prepare" unless="intact.jar.present">
        <ant dir="${intact.root}" target="jar-core" inheritAll="false"/>
    </target>

    <!-- =================================================================== -->

    <!-- Copy configuration files. -->
    <target name="cp-config-files">
        <!-- Copy repository files -->
        <copy todir="${dest.dir}/config">
            <fileset dir="${root.config.dir}">
                <include name="repository*.xml"/>
                <include name="repository.dtd"/>
            </fileset>
        </copy>

        <!-- Copy proxy properties file. -->
        <copy todir="${dest.dir}/config" file="${root.config.dir}/proxy.properties"/>

        <!-- Copy institution properties file. -->
        <copy todir="${dest.dir}/config" file="${root.config.dir}/Institution.properties"/>

        <!-- Copy editor property files to the editor pkg root -->
        <copy todir="${dest.dir}/${editor.pkg.root}">
            <fileset dir="WEB-INF/config">
                <include name="*.properties"/>
                <!-- Exclude the resources for testing -->
                <exclude name="TestResources.properties"/>
            </fileset>
        </copy>

        <!-- the OJB and log4J properties files should be at the top level in 'dest' -->
        <copy todir="${dest.dir}" file="${root.config.dir}/OJB.properties"/>
        <copy todir="${dest.dir}" file="${root.config.dir}/log4j.properties"/>
    </target>

    <!-- =================================================================== -->

    <!-- Compile the source tree; creates the dest dir if it doesn't exist. -->
    <target name="compile" depends="make-jar"
        description="Compiles non test source files">

        <!-- Create the dest dir if it doesn't exist. -->
        <mkdir dir="${dest.dir}"/>

        <!-- Only compile editor sources only. -->
        <javac srcdir="${root.src.dir}" destdir="${dest.dir}" deprecation="on"
            debug="on" source="1.4"
            includes="**/application/editor/**,
                      **/application/commons/**, **/html/**"
            excludes="**/test/**">
            <classpath refid="project.class.path"/>
        </javac>

        <!-- Copy configuration files -->
        <antcall target="cp-config-files"/>
    </target>

    <!-- =================================================================== -->

    <!-- Compile the source tree; creates the dest dir if it doesn't exist. -->
    <target name="compile-all" depends="make-jar"
        description="Compiles all the source files">

        <!-- Create the dest dir if it doesn't exist. -->
        <mkdir dir="${dest.dir}"/>

        <!-- Only compile editor sources only. -->
        <javac srcdir="${root.src.dir}" destdir="${dest.dir}" deprecation="on"
            debug="on" source="1.4"
            includes="**/application/editor/**,
                      **/application/commons/**, **/html/**">
            <classpath refid="project.test.class.path"/>
        </javac>

        <!-- Copy configuration files -->
        <antcall target="cp-config-files"/>
    </target>

    <!-- =================================================================== -->

    <!-- Builds a war file using the current database setup. -->

    <target name="war" description="Builds a war file"
        depends="set-tstamp, set-db-type, war-postgres, war-oracle"/>

    <!-- =================================================================== -->

    <!-- Builds a war file. The database to include is specified as a parameter. -->

    <target name="build-war" depends="compile, gen-last-modified-file">

        <!-- Copy XML (configuration) files -->
        <copy todir="${temp.web}/WEB-INF">
            <fileset dir="WEB-INF">
                <include name="*.xml"/>
                <exclude name="web.xml"/>
            </fileset>
        </copy>

        <!-- Common/Editor layouts -->
        <copy todir="${temp.web}/layouts">
            <fileset dir="${intact.app.dir}/layouts">
                <!-- Don't need any frame lauyouts for this application -->
                <exclude name="*Frame.jsp"/>
                <!--  No EBI header for this application (yet) -->
                <exclude name="ebiHeaderLayout.jsp"/>
                <!-- Editor header for this application; exclude the general one -->
                <exclude name="headerLayout.jsp"/>
            </fileset>
            <!-- Editor specific layouts -->
            <fileset dir="layouts"/>
        </copy>

        <!-- Common images -->
        <copy todir="${temp.web}/images">
            <fileset dir="${intact.app.dir}/images"/>
        </copy>

        <!-- Common/Editor jsp files -->
        <copy todir="${temp.web}/pages">
            <fileset dir="${intact.app.dir}/pages">
                <!-- Don't need error frame JSP for this application -->
                <exclude name="errorFrame.jsp"/>
            </fileset>
            <!-- Editor specific pages -->
            <fileset dir="pages"/>
        </copy>

        <!-- The welcome file at the root. -->
        <copy file="welcome.jsp" todir="${temp.web}"/>
        <!-- The last modifed file at the root. -->
        <copy file="${last.modified.file}" todir="${temp.web}"/>

        <!-- TLD files -->
        <copy todir="${temp.web}/WEB-INF/tld">
            <!-- Common struts standard tld files -->
            <fileset dir="${intact.app.dir}/tld">
                <include name="*.tld"/>
            </fileset>
            <!-- Editor specific TLD files -->
            <fileset dir="WEB-INF/tld">
                <include name="*.tld"/>
            </fileset>
        </copy>

        <!-- Copy jar files -->
        <copy todir="${temp.web}/WEB-INF/lib">
            <!-- Editor specific jar files. -->
            <fileset dir="WEB-INF/lib"/>
            <!-- Inlcude the intact core -->
            <fileset dir="${root.dist.dir}"/>

            <!-- Inlcude application common jar files exclude test files. -->
            <fileset dir="${intact.app.lib.dir}">
                <exclude name="test/**"/>
            </fileset>

            <!-- Include required jar files from intact core. -->
            <fileset dir="${root.lib.dir}">
                <include name="jakarta-ojb-0.9.7.jar"/>
                <include name="log4j-1.2.5.jar"/>
                <include name="${db}"/>
                <include name="commons-pool.jar"/>
                <!-- All the following files are required for ProteinUpdate to work -->
                <include name="yasp.jar"/>
                <include name="aristotle.jar"/>
                <include name="flatfilewriter.jar"/>
                <include name="sptr-interfaces.jar"/>
                <include name="gnu-regexp-1.1.2.jar"/>
                <include name="antlr.jar"/>
                <!-- Used by GoServerProxy -->
                <include name="xercesImpl.jar"/>
                <include name="xml-apis.jar"/>
            </fileset>
        </copy>

        <!-- The web.xml file. -->
        <copy file="WEB-INF/web.xml" todir="${temp.web}/WEB-INF"/>

        <available file="${basedir}/dev-mode" property="dev.mode"/>

        <antcall target="war-gen">
            <param name="war.file" value="${war.file}"/>
        </antcall>

        <antcall target="gen-context-file" />

    </target>

    <!-- =================================================================== -->

    <!-- Sets the database type using the values given in build.properties. -->

    <target name="set-db-type">
        <condition property="postgres">
            <contains string="${target.env}" substring="-postgres-"/>
        </condition>
        <condition property="oracle">
            <contains string="${target.env}" substring="-oracle-"/>
        </condition>
    </target>

    <!-- =================================================================== -->

    <!--
         Builds a war file with postgres;
         should be called only after calling set-db-type.
      -->

    <target name="war-postgres" if="postgres">
        <!-- Load postgres properties. -->
        <property file="${intact.root}/config/postgres.properties" />

        <echo message="Building a war for postgres ${dbalias} database"/>
        <property name="war.name" value="${ant.project.name}-${dbalias}-${TODAY}.war"/>

        <antcall target="build-war">
            <param name="db" value="postgresql.jar"/>
            <param name="war.file" value="${war.name}"/>
        </antcall>
    </target>

    <!-- =================================================================== -->

    <!--
        Builds a war file for oracle database;
        should be called only after calling set-db-type.
      -->

    <target name="war-oracle" description="Builds a war file for oracle" if="oracle">
        <!-- Load oracle properties. -->
        <property file="${intact.root}/config/oracle.properties" />

        <echo message="Building a war for oracle ${dbalias} database"/>
        <property name="war.name" value="${ant.project.name}-${dbalias}-${TODAY}.war"/>

        <antcall target="build-war">
            <param name="db" value="jdbc_oracle8i_thin_8.1.6.2.0.jar"/>
            <param name="war.file" value="${war.name}"/>
        </antcall>
    </target>

    <!-- =================================================================== -->

    <target name="war-gen" description="Generates the war file" unless="dev.mode">
        <echo message="Generating ${war.file} file"/>

        <!-- Create the distribution dir if it doesn't exist. -->
        <mkdir dir="${dist.dir}"/>

        <!-- Delete the war file or else it will keep the old one -->
        <delete file="${dist.dir}/${war.file}" quiet="true"/>

        <!-- Generate editor topics -->
        <antcall target="gen-editor-topics"/>

        <!-- Copy topics property file to the editor pkg root -->
        <copy file="${editor.topics.file}"
            todir="${dest.dir}/${editor.pkg.root}"/>

        <war destfile="${dist.dir}/${war.file}" webxml="WEB-INF/web.xml">
            <fileset dir="${temp.web}">
                <include name="welcome.jsp"/>
                <include name="${last.modified.file}"/>
                <include name="images/*"/>
                <include name="pages/**"/>
                <include name="layouts/**"/>
                <include name="editor.html"/>
            </fileset>

            <webinf dir="${temp.web}/WEB-INF"/>
        </war>
    </target>

    <!-- =================================================================== -->

    <!-- Deploys the war file on the Tomcat server. -->
    <target name="deploy" description="Deploys the WAR file on the Tomcat server">
        <ant dir=".." inheritAll="false" target="deploy">
            <property name="war" value="${ant.project.name}/${dist.dir}/${war.name}"/>
        </ant>

        <!-- Copy context files in the Tomcat's webapps directory -->
        <copy file="${dist.dir}/${editor-context-file}"
              todir="${webapps.dir}"
              overwrite="yes"/>
    </target>

    <!-- =================================================================== -->

    <!-- Undeploys the war file from the Tomcat server. -->
    <target name="undeploy"
        description="Undeploys the WAR file from the Tomcat server">
        <ant dir=".." inheritAll="false" target="undeploy">
            <property name="war" value="${ant.project.name}"/>
        </ant>

        <!-- Delete context files from the Tomcat's webapps directory -->
        <delete file="${webapps.dir}/${editor-context-file}" quiet="true"/>
    </target>

    <!-- =================================================================== -->

    <!-- Runs the JUnit tester directly. The output is redirected to std out -->
    <target name="gen-editor-topics" depends="compile"
        description="Generates the Editor topic properties">

        <!-- Root dest must have compiled prior to calling this. -->
        <java classname="uk.ac.ebi.intact.application.editor.struts.framework.util.EditorTopicsGenerator"
            fork="true">
            <arg line="${root.dest.dir} ${editor.topics.file}"/>
            <classpath refid="project.class.path"/>
        </java>
    </target>

    <!-- =================================================================== -->

    <!-- These unit tests only run one tests in a single package; we need to add
         a utility class which can run all the unit tests together.
     -->
    <!-- Runs tests using junit. -->
    <target name="junit-test" depends="compile-all" description="Run JUnit tests">
        <junit printsummary="withOutAndErr">
            <test name=
                "uk.ac.ebi.intact.application.editor.struts.framework.util.test.AllJUnitTests"/>
            <classpath refid="project.test.class.path"/>
        </junit>
    </target>

    <!-- =================================================================== -->

    <!-- Runs the web testing in simple mode (without generating reports) -->
    <target name="junit-web-simple"
        description="Runs JUnit directly with output directed to stdout">

        <available file="${temp.web}/WEB-INF/lib" type="dir"
            property="temp.web.present"/>

        <!-- Display a message if the temp web dir is not present -->
        <antcall target="check-war"/>

        <antcall target="run-junit-simple">
            <param name="test.class"
                value="uk.ac.ebi.intact.application.editor.test.pg.AllJUnitTests"/>
        </antcall>
    </target>

    <!-- =================================================================== -->

    <!-- Displays a message to indicate that temp war directory
         is not present. -->
    <target name="check-war" unless="temp.web.present">
        <echo message="Temp web directory not present; please run ant war first"/>
    </target>

    <!-- =================================================================== -->

    <!-- Runs the given junit tester class without generating any reports -->
    <target name="run-junit-simple" if="temp.web.present">

        <!-- Only call this if the temp web dir is present -->
        <antcall target="compile-all"/>

        <!-- Copy resource file required for testing -->
        <copy todir="${dest.dir}/${editor.pkg.root}"
            file="WEB-INF/config/TestResources.properties" />

        <java classname="junit.textui.TestRunner" fork="true">
            <arg value="${test.class}"/>
            <classpath refid="project.test.class.path"/>
        </java>
    </target>

    <!-- =================================================================== -->

    <!-- Runs the JUnit tester directly. The output is redirected to std out -->
    <target name="junit-test-stdout" depends="war, compile-all"
        description="Runs JUnit directly with output directed to stdout">
        <java classname="junit.textui.TestRunner" fork="true">
            <arg value=
                "uk.ac.ebi.intact.application.editor.struts.framework.util.test.AllJUnitTests"/>
            <classpath refid="project.test.class.path"/>
        </java>
    </target>

    <!-- =================================================================== -->

    <!-- Similar to junit-test-stdout but without calling 'war' dependent target.
         Use this target ONLY after calling junit-test-stdout at least once.
         -->
    <target name="junit-test-stdout-quick" depends="compile-all"
        description="Runs JUnit directly with output directed to stdout">
        <java classname="junit.textui.TestRunner" fork="true">
            <arg value=
                "uk.ac.ebi.intact.application.editor.test.pg.AllJUnitTests"/>
            <classpath refid="project.test.class.path"/>
        </java>
    </target>

    <!-- =================================================================== -->

    <!-- Starts the Tomcat server. -->

    <target name="start-tomcat">
        <ant dir=".." inheritAll="false" target="start-tomcat"/>
    </target>

    <!-- =================================================================== -->

    <!-- Stops the Tomcat server. -->

    <target name="stop-tomcat">
        <ant dir=".." inheritAll="false" target="stop-tomcat"/>
    </target>

    <!-- =================================================================== -->

    <!-- Generates the last modified date file. -->

    <target name="gen-last-modified-file">
        <ant dir=".." inheritAll="false" target="gen-last-modified-file">
            <property name="file" value="editor/${last.modified.file}"/>
        </ant>
    </target>

    <!-- =================================================================== -->

    <!-- Create the context file. -->

    <target name="gen-context-file" unless="dev.mode">
        <echo message="Creating the context file..."/>

        <!-- Copy the template file -->
        <copy todir="${dist.dir}"
              file="${intact.context.dir}/${editor-context-file}"
              overwrite="true" />

        <!-- Customize the context file -->
        <replace file="${dist.dir}/${editor-context-file}"
                 token="[WAR.FILE.NAME]"
                 value="${war.file}" />
        <replace file="${dist.dir}/${editor-context-file}"
                 token="[server.name]"
                 value="${server.name}" />
    </target>

</project>
