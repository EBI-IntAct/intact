<?xml version="1.0" encoding="UTF-8"?>
<!--
ANT build configuration file for hierarchView module.
Author: Samuel Kerrien, Sugath Mudali (smudali@ebi.ac.uk)
-->
<project name="hv" basedir="." default="compile">

    <property name="project.title" value="hierarchView"/>

    <property name="intact.root"     value="../.."/>
    <property name="root.lib.dir"    value="${intact.root}/lib"/>
    <property name="root.dist.dir"   value="${intact.root}/dist"/>
    <property name="root.src.dir"    value="${intact.root}/src"/>
    <property name="root.dest.dir"   value="${intact.root}/classes"/>
    <property name="root.config.dir" value="${intact.root}/config"/>
    <property name="root.dist.dir"   value="${intact.root}/dist"/>

    <property name="root.jar.file" value="${root.dist.dir}/intact-core.jar"/>

    <!-- Intact application location. -->
    <property name="intact.app.dir" value=".."/>

    <!-- context path for hierarchView store in the application level -->
    <property name="intact.context.dir" value="${intact.app.dir}/context"/>
    <property name="hv-context-file"    value="hierarchView-context.xml"/>

    <property name="commons.pages.dir"   value="${intact.app.dir}/pages"/>
    <property name="commons.layouts.dir" value="${intact.app.dir}/layouts"/>
    <property name="commons.images.dir"  value="${intact.app.dir}/images"/>

    <property name="pages.dir"          value="pages"/>
    <property name="images.dir"         value="images"/>
    <property name="layouts.dir"        value="layouts"/>
    <property name="layouts.styles.dir" value="${layouts.dir}/styles"/>
    <property name="lib.dir"            value="WEB-INF/lib"/>
    <property name="tld.dir"            value="WEB-INF/tld"/>
    <property name="dest.dir"           value="WEB-INF/classes"/>
    <property name="config.dir"         value="WEB-INF/config"/>
    <property name="jdoc.dir"           value="doc/api"/>
    <property name="dist.dir"           value="dist"/>
    <property name="war.file"           value="hierarchView.war"/>

    <!-- The build properties. -->
    <property file="${intact.root}/config/build.properties"/>

    <!-- Web service related properties. -->
    <property name="ws.dir" value="ws"/>
    <property name="ws.wsdd.dir" value="ws/wsdd"/>
    <property name="ws.wsdl.dir" value="ws/wsdl"/>
    <property name="ws.tulip.wsdl" value="${ws.wsdl.dir}/tulip.wsdl"/>
    <property name="webService.archive.filename" value="tulipWebService.tar.gz"/>
    <property name="webService.archive.path" value="${dist.dir}/${webService.archive.filename}"/>

    <!-- Properties related to Tulip server -->
    <property name="ws.tulip.server.pkg"
              value="uk.ac.ebi.intact.application.hierarchView.business.tulip.webService"/>
    <property name="ws.tulip.server.dir"
              value="uk/ac/ebi/intact/application/hierarchView/business/tulip/webService"/>
    <property name="ws.tulip.jar.name" value="tulipService.jar"/>
    <property name="ws.tulip.jar" value="${ws.dir}/${ws.tulip.jar.name}"/>
    <property name="ws.props.file" value="WebService.properties"/>
    <property name="ws.deploy.file" value="${ws.wsdd.dir}/deploy.wsdd"/>
    <property name="ws.undeploy.file" value="${ws.wsdd.dir}/undeploy.wsdd"/>

    <!-- Properties related to Tulip client -->
    <property name="ws.tulip.client.pkg"
              value="uk.ac.ebi.intact.application.hierarchView.business.tulip.client"/>
    <property name="ws.tulip.client.dir"
              value="uk/ac/ebi/intact/application/hierarchView/business/tulip/client"/>

    <property name="ws.session.type" value="Application"/>

    <!-- We need this flag because deploy targets need to know where to deploy. -->
    <property environment="env"/>
    <property name="tomcat.home" value="${env.CATALINA_HOME}"/>
    <property name="webapps.dir" value="${tomcat.home}/webapps"/>
    <property name="java.opts"   value="${env.JAVA_OPTS}"/>

    <property name="webService.properties.filename"   value="${config.dir}/WebService.properties"/>
    <property name="highlighting.properties.filename" value="${config.dir}/Highlighting.properties"/>
    <property name="search.properties.filename"       value="${config.dir}/Search.properties"/>

    <!-- Properties files on which some tests will be performed -->
    <property file="${webService.properties.filename}"/>
    <property file="${highlighting.properties.filename}"/>
    <property file="${search.properties.filename}"/>

    <!-- Build working classpath -->
    <path id="project.class.path">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>

        <pathelement path="${root.dest.dir}"/>
        <pathelement path="${dest.dir}"/>
        <pathelement path="${root.lib.dir}/jakarta-ojb-0.9.7.jar"/>
        <pathelement path="${root.lib.dir}/log4j-1.2.5.jar"/>
        <pathelement path="${root.lib.dir}/servlet.jar"/>
        <pathelement path="${root.lib.dir}/commons-lang-1.0.jar"/>
        <pathelement path="${intact.app.dir}/lib/struts.jar"/>
        <pathelement path="${intact.app.dir}/lib/commons-logging.jar"/>

    </path>

    <!-- =================================================================== -->

    <!--
        Test some configuration point to warn the user in case of configuration problem.
        The build process is stopped if smething goes wrong.
    -->
    <target name="all-config-test" depends="test-config"
            description="Performs configuration test and describes eventual problem.">
        <antcall target="webService-hostname-result"/>
        <antcall target="console-location-result"/>
        <antcall target="console-location-available-result"/>
        <antcall target="interpro-hostname-result"/>
        <antcall target="search-hostname-result"/>
    </target>


    <target name="test-config">
        <echo message="${webService.properties.filename} :"/>

        <condition property="webService.hostname.notCustomized">
            <contains string="${webService.adress}" substring="[HOSTNAME]"/>
        </condition>
        <echo message="    webService.adress = ${webService.adress}"/>

        <condition property="webService.console.location.notCustomized">
            <contains string="${webService.console.location}" substring="[FULL_PATH_OF_THE_TULIP_COMSOLE]"/>
        </condition>
        <echo message="    webService.console.location = ${webService.console.location}"/>

        <available file="${webService.console.location}" type="file" property="webService.console.isAvailable"/>

        <echo message="${highlighting.properties.filename} :"/>

        <condition property="interpro.hostname.notCustomized">
            <contains string="${highlightment.source.GO.hostname}" substring="[HOSTNAME]"/>
        </condition>
        <echo message="    highlightment.source.GO.hostname = ${highlightment.source.GO.applicationPath}"/>

       <echo message="${search.properties.filename} :"/>

       <condition property="search.hostname.notCustomized">
            <contains string="${search.url}" substring="[SEARCH_HOSTNAME]"/>
        </condition>
        <echo message="    search.url = ${search.url}"/>
    </target>


    <target name="console-location-result" if="webService.console.location.notCustomized">
        <echo>
            WARNING :
            If you plan to run the web service on an other computer, don't take
            the following message in to account.
            -----------------------------------------------------------------------
            You have to edit the following file : ${webService.properties.filename}
            and customized the webService.console.location property.
            -----------------------------------------------------------------------
        </echo>
    </target>


    <target name="console-location-available-result" unless="webService.console.isAvailable">
        <echo>
            WARNING :
            If you plan to run the web service on an other computer, don't take
            the following message in to account.
            -----------------------------------------------------------------------
            You have to edit the following file : ${webService.properties.filename}
            and customized the webService.console.location with the right path.
            Currently the file ${webService.console.location} is not found.
            -----------------------------------------------------------------------
        </echo>
    </target>


    <target name="webService-hostname-result" if="webService.hostname.notCustomized">
        <fail>
            ERROR :
            You have to edit the following file : ${webService.properties.filename}
            and customized the webService.adress property.
        </fail>
    </target>


    <target name="interpro-hostname-result" if="interpro.hostname.notCustomized">
        <fail>
            ERROR :
            You have to edit the following file : ${highlighting.properties.filename}
            and customized the highlightment.source.GO.hostname property.
        </fail>
    </target>


    <target name="search-hostname-result" if="search.hostname.notCustomized">
        <fail>
            ERROR :
            You have to edit the following file : ${search.properties.filename}
            and customized the search.url property.
        </fail>
    </target>

    <!-- =================================================================== -->

    <!-- Sets the time stamp and 'intact.jar.present' property if intact core
    jar file is found.
    -->
    <target name="prepare">
        <tstamp/>
        <available file="${root.jar.file}" type="file" property="intact.jar.present"/>

        <!-- These targets are called to display messages if tomcat or axis are not present. -->
        <ant dir=".." inheritAll="false" target="check-tomcat"/>
        <ant dir=".." inheritAll="false" target="check-axis"/>
    </target>

    <!-- =================================================================== -->

    <!-- Remove some directories/files for clean build. -->
    <target name="clean"
        description="Prepare for clean build; removes api docs and classes dirs">
        <delete dir="${dest.dir}"/>
        <delete dir="${jdoc.dir}"/>
        <delete dir="${dist.dir}"/>

        <!-- Clean up the web service directory -->
        <delete file="${ws.dir}/${ws.tulip.jar.name}"/>
        <delete dir="${ws.wsdd.dir}"/>
        <delete dir="${ws.wsdl.dir}"/>

        <!-- Struts imported tlds-->
        <delete>
            <fileset dir="${tld.dir}">
                <exclude name="hierarchView.tld"/>
                <exclude name="display.tld"/>
                <exclude name="redirect.tld"/>
            </fileset>

        </delete>

        <!-- Tiles commons files -->
        <delete>
             <fileset dir="${layouts.dir}">
                 <!-- Do not remove hv specific files -->
                 <exclude name="index.jsp"/>
                 <exclude name="sidebar.jsp"/>
                 <exclude name="contentFrame.jsp"/>
                 <exclude name="graphFrame.jsp"/>
                 <exclude name="sourceListFrame.jsp"/>
                 <exclude name="selectedSourceFrame.jsp"/>
            </fileset>
        </delete>

        <delete dir="${layouts.styles.dir}"/>

        <delete>
             <fileset dir="${pages.dir}">
                 <!-- Do not remove hv specific files -->
                 <exclude name="index.jsp"/>
                 <exclude name="blank.jsp"/>
                 <exclude name="errorFrame.jsp"/>
                 <exclude name="forwardToSearch.jsp"/>
                 <exclude name="restoreContext.jsp"/>
                 <exclude name="sidebarSearch.jsp"/>
                 <exclude name="sidebarGraph.jsp"/>
                 <exclude name="sidebarClickBehaviour.jsp"/>
                 <exclude name="graphTitle.jsp"/>
                 <exclude name="highlightTitle.jsp"/>
                 <exclude name="graph.jsp"/>
                 <exclude name="highlight.jsp"/>
                 <exclude name="selectedSource.jsp"/>
                 <exclude name="warning.jsp"/>
            </fileset>
        </delete>

         <delete>
             <fileset dir="${images.dir}">
                 <!-- Do not remove hv specific files -->
                 <exclude name="clockT.gif"/>
                 <exclude name="select.gif"/>
                 <exclude name="select-chk.gif"/>
            </fileset>
        </delete>
    </target>

    <!-- =================================================================== -->

    <!-- Calls the jar task from core build file if intact core jar file
    is missing.
    -->
    <target name="make-jar" depends="prepare" unless="intact.jar.present">
        <ant dir="${intact.root}" target="jar-core" inheritAll="false"/>
    </target>

    <!-- =================================================================== -->

    <!-- Copy configuration files. -->
    <target name="cpConfigFiles">
        <!-- Copy repository files -->
        <copy todir="${dest.dir}/config">
            <fileset dir="${root.config.dir}">
                <include name="repository*.xml"/>
                <include name="repository.dtd"/>
            </fileset>
        </copy>

        <!-- Copy property files -->
        <copy todir="${dest.dir}/config">
            <fileset dir="${config.dir}">
                <include name="*.properties"/>
            </fileset>
        </copy>

        <!-- the OJB and log4J properties files should be at the top level in 'dest' -->
        <copy todir="${dest.dir}" file="${root.config.dir}/OJB.properties"/>
    </target>

    <!-- =================================================================== -->

    <!-- Compile the source tree; creates the dest dir if it doesn't exist. -->
    <target name="compile"
        description="Compile the source tree and copy the configuration files"
        depends="prepare">
        <mkdir dir="${dest.dir}" />

        <javac srcdir="${root.src.dir}" destdir="${dest.dir}" deprecation="on"
            includes="**/application/hierarchView/**,
                      **/application/commons/**,
                      **/html/**"
            debug="on">
            <classpath refid="project.class.path"/>
        </javac>

        <copy todir="${dest.dir}/config" filtering="on">
            <fileset dir="WEB-INF/config">
                <include name="*.properties"/>
            </fileset>
        </copy>

        <!-- Copy configuration files -->
        <antcall target="cpConfigFiles"/>
    </target>

    <!-- =================================================================== -->

    <!-- Ensures that tomcat.present property is called only once to avoid
    error from Ant.
    -->
    <target name="run-once" unless="tomcat.present">
        <available file="${tomcat.home}/conf/server.xml" property="tomcat.present"/>
        <available file="${webapps.dir}/axis/WEB-INF/web.xml" property="axis.present"/>
    </target>

    <!-- =================================================================== -->

    <!-- Compile the web service source tree. -->
    <target name="make-ws" description="Create the web service" depends="compile">

        <mkdir dir="${ws.wsdd.dir}"/>
        <mkdir dir="${ws.wsdl.dir}"/>

        <!-- Generate WSDL file. This needs to run in a separate JVM to avoid
        any clashes with linkage problem with Document class. Also, -o
        option is passed via arg line instead of value to avoid creating
        a wsdl with a space in the name!
        The variable ${webService.adress} come from WebService.properties file.
        -->
        <echo message="Generating WSDL file..."/>
        <java classname="org.apache.axis.wsdl.Java2WSDL" fork="yes">
            <arg line="-o ${ws.tulip.wsdl}"/>
            <arg value="-l${webService.adress}"/>
            <arg line="-n urn:tulip"/>
            <arg value="-p ${ws.tulip.server.pkg}"/>
            <arg value="urn:${ws.tulip.server.pkg}"/>
            <arg value="${ws.tulip.server.pkg}.TulipAccess"/>
            <classpath refid="project.class.path"/>
        </java>

        <!-- Generate server side files. -->
        <echo message="Generating Server side files..."/>
        <java classname="org.apache.axis.wsdl.WSDL2Java" fork="yes">
            <arg line="-o ."/>
            <arg line="-d ${ws.session.type}"/>
            <arg value="-s"/>
            <arg line="-p ${ws.tulip.server.pkg}.generated"/>
            <arg value="${ws.tulip.wsdl}"/>
            <classpath refid="project.class.path"/>
        </java>

        <!-- Extract the wsdd files. -->
        <echo message="Extracting deploy/undeploy WSDD files"/>
        <copy todir="${ws.wsdd.dir}">
            <fileset dir="${ws.tulip.server.dir}/generated">
                <include name="*.wsdd"/>
            </fileset>
        </copy>

        <!-- Remove the generated directories. -->
        <echo message="Removing generated server files..."/>
        <delete dir="${ws.tulip.server.dir}"/>

        <!-- Generate client side files. -->
        <echo message="Generating Client side files..."/>
        <java classname="org.apache.axis.wsdl.WSDL2Java" fork="yes">
            <arg line="-o ."/>
            <arg line="-d ${ws.session.type}"/>
            <arg line="-p ${ws.tulip.client.pkg}.generated"/>
            <arg value="${ws.tulip.wsdl}"/>
            <classpath refid="project.class.path"/>
        </java>

        <!-- Copy generated client files. -->
        <echo message="Copying generated client files in the source tree..."/>
        <copy todir="${root.src.dir}/${ws.tulip.client.dir}">
            <fileset dir="${ws.tulip.client.dir}">
                <include name="**/*.java"/>
            </fileset>
        </copy>

        <!-- Compile the client generated files -->
        <echo message="Compiling client generated files"/>
        <javac srcdir="${root.src.dir}" destdir="${dest.dir}" deprecation="on"
            includes="${ws.tulip.client.dir}/generated/**" debug="on">
            <classpath refid="project.class.path"/>
        </javac>

        <!-- Copy the configuration file to the current directory. -->
        <echo message="Copying configuration file to the ${root.dest.dir} dir"/>
        <copy file="${config.dir}/${ws.props.file}" todir="${root.dest.dir}"
            overwrite="true"/>

        <!-- Create the web service jar file (which will be deployed later on Axis). -->
        <!-- First delete the jar file if it exists. -->
        <delete file="${ws.tulip.jar}" quiet="true"/>
        <echo message="Create the service jar file"/>

        <jar destfile="${ws.tulip.jar}">
            <fileset dir="${root.dest.dir}" includes="${ws.props.file}"/>
            <fileset dir="${dest.dir}" includes="${ws.tulip.server.dir}/**"/>
        </jar>

        <!-- Delete the webservice properties file. -->
        <echo message="Deleting the configuration file"/>
        <delete file="${root.dest.dir}/${ws.props.file}"/>

        <echo message="Modify the deployment file"/>
        <antcall target="mod-deployfile" />

        <echo message="Delete generated files"/>
        <delete dir="uk"/>

        <!-- Create an TAR archive which includes everythings needed to install
             and deploy the web service.
          -->
        <mkdir dir="${dist.dir}"/>
        <delete file="${webService.archive.path}" quiet="true"/>
        <echo message="Create the web service archive"/>
        <tar destfile="${webService.archive.path}" compression="gzip">
            <tarfileset dir="${ws.dir}/.." mode="766">
                <include name="${ws.dir}/**"/>
            </tarfileset>
        </tar>

        <echo>
               The web service archive has been built under ${webService.archive.path}
               Now, you have to :
                 (1) copy that archive to your server
                 (2) decompress it (tar zxvf ${webService.archive.filename})
                 (3) enter the ${ws.dir} directory and read the README file to
                     know how to install and manage the web service.
        </echo>

    </target>

    <!-- =================================================================== -->

    <!-- Replace current class in the deployment file by those from the implementation -->
    <target name="mod-deployfile">

        <!-- Replace generated package name by the implementation one -->
        <echo message="Replace generated package name by the implementation one" />
        <replace file="${ws.deploy.file}" token=".generated." value="." />

        <!-- Replace the SoapBinding generated class name by the implementation one -->
        <echo message="Replace the SoapBinding name by the implementation one" />
        <replace file="${ws.deploy.file}" token="TulipSoapBindingImpl"
            value="TulipAccessImpl" />
    </target>

    <!-- =================================================================== -->

    <!-- Tests the web service  -->
    <target name="test-ws"
        description="Test the web service and display results on the screen">

        <echo message="Testing the web service" />
        <java classname="uk.ac.ebi.intact.application.hierarchView.business.tulip.client.TulipClient" fork="yes">
            <classpath refid="project.class.path"/>
        </java>
    </target>

    <!-- =================================================================== -->

    <!-- Builds a war file using the current database setup. -->

    <target name="war" description="Builds a war file"
        depends="all-config-test, set-db-type, war-postgres, war-oracle"/>

    <!-- =================================================================== -->

    <!-- Builds a war file. The database to include is specified as a parameter. -->

    <target name="build-war" depends="compile, make-jar">

        <!-- Create the distribution dir if it doesn't exist. -->
        <mkdir dir="${dist.dir}" />

        <!-- Create local directories to copy common files. -->
        <mkdir dir="${layouts.styles.dir}"/>
        <mkdir dir="${images.dir}"/>

        <!-- Common layouts -->
        <copy todir="${layouts.dir}">
            <fileset dir="${commons.layouts.dir}"/>
        </copy>

        <!-- Common images -->
        <copy todir="${images.dir}">
            <fileset dir="${commons.images.dir}"/>
        </copy>

        <!-- Common jsp files -->
        <copy todir="${pages.dir}">
            <fileset dir="${commons.pages.dir}"/>
        </copy>

        <!-- Delete the war file or else it will keep the old one -->
        <delete file="${dist.dir}/${war.file}" quiet="true"/>

        <!-- Copy struts standard tld files -->
        <copy todir="${tld.dir}">
            <fileset dir="${intact.app.dir}/tld">
                <include name="*.tld"/>
            </fileset>
        </copy>

        <!-- Copy log4j properties file -->
        <copy todir="${dest.dir}/config">
            <fileset dir="${root.config.dir}">
                <include name="log4j.properties"/>
            </fileset>
        </copy>

        <war destfile="${dist.dir}/${war.file}" webxml="WEB-INF/web.xml">
            <fileset dir="${basedir}">
                <include name="*.jsp"/>
                <include name="*.css"/>
                <include name="WEB-INF/struts-config.xml"/>
                <include name="WEB-INF/tiles-defs.xml"/>
                <include name="${tld.dir}/**"/>
                <include name="${images.dir}/*"/>
                <include name="${pages.dir}/**"/>
                <include name="${layouts.dir}/**"/>
            </fileset>

            <!-- Include jar files for hv. -->
            <lib dir="${lib.dir}"/>

            <!-- Include the intact core  -->
            <lib dir="${root.dist.dir}">
                <include name="intact-core.jar"/>
            </lib>

            <!-- Include common jar files -->
            <lib dir="${intact.app.dir}/lib">
               <exclude name="standard.jar"/>
               <exclude name="jstl.jar"/>
            </lib>

            <!-- Include common jar files from intact core. -->
            <lib dir="${root.lib.dir}">
                <include name="jakarta-ojb-0.9.7.jar"/>
                <include name="log4j-1.2.5.jar"/>
                <include name="${db}"/>
                <include name="commons-lang-1.0.jar"/>
            </lib>

            <!-- HierarchView classes and config files. -->
            <classes dir="${dest.dir}"/>
        </war>
    </target>

    <!-- =================================================================== -->

    <!-- Sets the database type using the values given in build.properties. -->

    <target name="set-db-type">
        <condition property="postgres">
            <contains string="${target.env}" substring="-postgres-"/>
        </condition>
        <condition property="oracle">
            <contains string="${target.env}" substring="-oracle-"/>
        </condition>
    </target>

    <!-- =================================================================== -->

    <!--
    Builds a war file with postgres; should be called only after calling
    set-db-type. -->

    <target name="war-postgres" if="postgres">
        <echo message="Building a war for postgres"/>
        <antcall target="build-war">
            <param name="db" value="postgresql.jar"/>
        </antcall>
    </target>

    <!-- =================================================================== -->

    <!--
    Builds a war file with oracle; should be called only after calling
    set-db-type. -->

    <target name="war-oracle" if="oracle">
        <echo message="Building a war for oracle"/>
        <antcall target="build-war">
            <param name="db" value="jdbc_oracle8i_thin_8.1.6.2.0.jar"/>
            <!--param name="db" value="jdbc-9.2.0.1.0-jdk1.2.x.jar"/-->
        </antcall>
    </target>

    <!-- =================================================================== -->

    <!-- Deploys the war file on the Tomcat server. -->
    <target name="deploy" description="Deploys the WAR file on the Tomcat server">
        <ant dir=".." inheritAll="false" target="deploy">
            <property name="war" value="hierarchView/${dist.dir}/${war.file}"/>
        </ant>

        <!-- Copy context files in the Tomcat's webapps directory -->
        <copy file="${intact.context.dir}/${hv-context-file}"
              todir="${webapps.dir}" overwrite="yes"/>
    </target>

    <!-- =================================================================== -->

    <!-- Undeploys the war file from the Tomcat server. Also stops the web service. -->
    <target name="undeploy"
        description="Undeploys the WAR file from the Tomcat server">
        <ant dir=".." inheritAll="false" target="undeploy">
            <property name="war" value="hierarchView"/>
        </ant>

        <!-- Delete context files from the Tomcat's webapps directory -->
        <delete file="${webapps.dir}/${hv-context-file}" quiet="true"/>
    </target>

    <!-- =================================================================== -->

    <!-- Starts the Tomcat server. -->

    <target name="start-tomcat" description="Start the Tomcat server" >
        <ant dir=".." inheritAll="false" target="start-tomcat"/>
    </target>

    <!-- =================================================================== -->

    <!-- Stops the Tomcat server. -->


    <target name="stop-tomcat" description="Stop the Tomcat server" >
        <ant dir=".." inheritAll="false" target="stop-tomcat"/>
    </target>

</project>
