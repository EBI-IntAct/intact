README for Intact Core
**********************************************************************

DIRECTORIES
------------

application/    : IntAct web applications, including JSPs etc
classes/	    : compiled Java classes
config/	    : Configuration files
data/           : data flat files for test purposes
doc/		    : documentation
ide/		    : project files of Java IDEs
lib/		    : third-party libraries needed in addition to the standard JDK
perl/           : auxiliary perl scripts
scripts/	    : auxiliary scripts, ant files, make files.
specifications/ : specifications, mainly screen mockups, for IntAct applications
sql/            : sql scripts for Oracle and Postgres
src/		    : Java sources
template/       : template files for configuration etc.
uml/		    : UML modeling files.

Other directories under intactCore not mentioned above are currently not relevant to installing/running intact.


DETAILED INSTALLATION NOTES
----------------------------

1. Prerequisites
-----------------
To install and run the intact software you must have the following installed in your
environment (or, for the DBs, at least have access to them over the network):

	- java JDK 1.4
	  see http://java.sun.com/j2se/downloads.html
	- ant 1.5 or above (all the intact build process relies on ant)
	  see http://ant.apache.org/bindownload.cgi
	- Tomcat Light Edition, for JDK 1.4 (preferably 4.1.1.8 LE)
        see http://jakarta.apache.org/builds/jakarta-tomcat-4.0/release/v4.1.18/bin/
	- either Postgres 7.2 or Oracle 8.1.6 (or higher)
        for postgres see http://www.postgresql.org/mirrors-ftp.html

For hierarchView:

	- Apache Axis web application (1.0) for web services (for use with the HierarchView application)
	  see http://ws.apache.org/axis/
	- Tulip, the graph rendering library which is needed by HierarchView
	  see http://www.tulip-software.org/
	- gcc++ 2.96 AND NO OTHER RELEASE to build the Console executable to access Tulip
	- the interpro web application, installed on tomcat (to view GO terms)

If you plan to run hierarchView, then Tulip needs the following environment variables to be set:

TLPDIR=<location of the main tulip directory>
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:TLPDIR/lib

There are more detailed notes for hierarchView in a README file in the directory application/hierarchView.

The following environment variables should be set:

$CATALINA_HOME - the home directory of your tomcat installation
$JAVA_HOME - the home directory of your JDK
$CLASSPATH should contains, at least, the current directory (i.e. : .).

All those variable settings could be done by sourcing one of the following scripts :
  - scripts/setEnv.sh  (for bash environment)
    type: . scripts/setEnv.sh
  - scripts/setEnv.csh (for csh environment)
    type: source scripts/setEnv.csh

Intact has been tested on both Linux (7.1 and 8.0) and Windows2000 running inside cygwin, and with both local and
remote postgres databases as well as a remote oracle DB. Thus intact is based around a linux/unix environment, but if you
have Windows then everything can still be used provided you have cygwin installed.


2. Setup
---------
a) Firstly download the intact software from http://sourceforge.net/projects/intact, by following the
instructions for anonymous download on the CVS pages. All of what follows assumes a root directory of 'intactCore'.

b) You must then ensure that the configuration files are set correctly for you environment. A lot of
this is automated for you, via the 'config/build.properties' file. Edit that file and uncomment the target environment
that you have (ie currently for oracle or postgres). Note that for oracle you need to have a file in the config directory called
'oracle.properties' containing your password (eg 'password=abcd'). In the 'template' directory you will find a file called
'oracle.template' - edit this file to define your oracle password, then save it as 'oracle.properties' in the 'config' directory.
For Postgres, the current configuration assumes that you have a local postgres installation with your user name as the
database name, and no password. This will soon be generalised to use the same mechanism as for Oracle.

In the intactCore directory, type

	ant set-target-env

Afterwards you should check the config/repository.xml file to ensure that your correct DB connection details have been
generated. If not you should edit 'repository.xml' manually to set the DB URL, user/password etc by using 
the template in that file as a guide.

c) Having downloaded intact and set the configuration details as above, from the intactCore directory type

	ant compile-core

This will generate the core intact classes - individual applications can then be built (there is also an option to
build everything in one go - 'ant compile-all' - if you so wish).
 
d) the final step for the intact core setup is to load the database. There are sample data files in the data directory,
and to populate your database with this data simply type

	scripts/postgres/testfill.sh 'user/pwd' <dbname> small | medium | large  (postgres - quotes can be omitted if no password)

or
	scripts/oracle/testfill.sh 'user/pwd' <dbname> small | medium | large (oracle)

"small" is for minimal tests, will need < 5 minutes. "large" is full, real data from the Ho and Gavin experiments,
will run > 1 hour.

You should then check your database using an appropriate tool (eg pgaccess for postgres/linux) to make sure you have the
intact tables and that they are populated.

Finally to build the javadoc just type

	ant javadoc

the generated javadoc can then be found in doc/api.


3. Applications
----------------

Intact comes bundled with a number of web applications - currently we have:

	- search:       The search application.
	- editor:       Edit interface for IntAct objects.
	- hierarchView: Graph visualisation.
        - intact:       Contains only static documentation pages,
                        but installation is the same as for normal 
                        web applications.

There is also the 'synchron' application which is use to exchange data between intact sites - this is standalone 
and not web-based. As this application matures further details will be included about it in this file 
(it is currently still under development).

The process for building the web applications is broadly the same. At the intactCore level, type

	ant compile-search compile-editor compile-hv

to build the main classes for the web applications. This step is not necessary for "intact". For search there is one further file to edit. In the file

        application/search/WEB-INF/config/HierarchView.properties

the hostname of the machine running hierarchView must be set correctly. The default is set to 'localhost', but
if you wish to view graphs using the search application from remote machines then the hostname in this file
should be set to a correct DNS value (ie your machine name where hierarchView resides). If you do not do this then
browsers on remote machines will try to find the hierarchView application on their own machine!

The next step is to put the web applications into your tomcat server and start it, as follows:

a) cd applications/<webapp-name>, then type

	ant war deploy (for editor, search, intact)

This will build a war file and copy it to your tomcat webapps directory 
(assuming you have $CATALINA_HOME set as an environment variable).
Just to check things worked OK, you should see a collection of <appname>.war files in your 
$CATALINIA_HOME/webapps directory.

HierarchView requires a little more effort. The web service for hierarchView needs to first be deployed.
Please read the README file in the application/hierarchView directory for more details about how to install
the web service and the hierarchView application.

b) For search and editor, type ant start-tomcat (once)- if this fails, simply go to your tomcat bin directory and start it manually from there.

c) to start a web application, open a web browser and type

	http://<hostname>:8080/<webapp-name>

Note that from the search application it is also possible to generate a graph of selected items - but to use this facility 
you should have installed the components for hierarchView (ie Tulip and axis). Note that Tulip is a C++ application and 
has only been tested on Redhat Linux 7.1 and 8.0.


4. Hints and Tips
------------------
a) If you find that you get OutOfMemoryErrors with large queries through tomcat, increasing the heap 
size that tomcat uses can help. You can do this simply by setting the envirnoment variable JAVA_OPTS as follows:

setenv JAVA_OPTS '-Xms200M -Xmx250M' (or use export if you use another shell)

before you start tomcat.

b) If you experience problems relating to database connections which are generated from the OJB layer
then you can try the following:

    - first edit the OJB.properties file and increase the  "maxConnectionsInPool" property (the default is 21).
    - if that does not help, edit the repository.xml file and set 'eager-release="true"' in the jdbc-connection-descriptor
    tag. This is supposed to be for use with application servers to encourage early release of database connections,
    but it may improve things in general.

c) If you wish to see (a lot of!) debug logging output, then edit the log4j.properties file and replace the
line "log4j.rootCategory=ERROR, A1, A2" with "log4j.rootCategory=, A1, A2". This will generate a lot of
logging output to a file called "intact-ojb.log". For example, a MetatDataException thrown from OJB usually
indicates that there is an error in the repository_user.xml file when specifying the object to table
mapping. Note however that this file can become large very quickly, especially if you are doing lots of
large queries. Another source of logging information is the logfile generated by tomact, which you can
find in the $CATALINA_HOME/logs directory (this is usually timestamped).

d) hierarchView can be very memory intensive, and will probably be refactored over time - so be aware that
you may experience some of the above when submitting many requests to hierarchView.


ACKNOWLEDGEMENTS
This product includes software developed by
the Apache Software Foundation (http://www.apache.org),
Ed Hill (ed-hill@uiowa.edu), and
the ExoLab project (http://www.exolab.org).


