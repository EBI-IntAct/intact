<?xml version="1.0" encoding="UTF-8"?>
    <!--
        ANT build configuration file for intactCore module.
        Authors: Henning Hermjakob (hhe@ebi.ac.uk), Sugath Mudali (smudali@ebi.ac.uk).
    -->

    <project name="intact-core" basedir="." default="project">
    <property name="project.title" value="Intact Core"/>
    <property name="project.version" value="0.1.0"/>

    <property name="src.dir"  value="src"/>
    <property name="dest.dir" value="classes"/>
    <property name="jdoc.dir" value="doc/api"/>
    <property name="config.dir" value="config"/>
    <property name="template.dir" value="template"/>

    <!-- Repository/OJB file properties -->
    <property name="rep.template.file" value="${template.dir}/repository.template"/>
    <property name="rep.dest.file" value="${config.dir}/repository.xml"/>
    <property name="ojb.template.file" value="${template.dir}/OJB.template"/>
    <property name="ojb.dest.file" value="${config.dir}/OJB.properties"/>

    <!-- The non core files. -->
    <property name="non.core.files" value="**/intact/application/**"/>

    <!-- Where the distribution files are going to be (jar) -->
    <property name="dist.dir" value="dist"/>

    <!-- To access the environment properties. -->
    <property environment="env"/>

    <!-- The build properties. -->
    <property resource="build.properties"/>

    <!-- Project classpath. -->
    <path id="project.class.path">
        <fileset dir="lib">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement path ="${dest.dir}"/>
    </path>

    <!-- javadoc classpath. -->
    <path id="javadoc.class.path">
        <path refid="project.class.path"/>

        <!-- Common jar files for applications -->
        <fileset dir="application/lib">
            <include name="*.jar"/>
        </fileset>

        <!-- cvedit specific jar files. -->
        <pathelement location="application/cvedit/WEB-INF/classes"/>
        <fileset dir="application/cvedit/WEB-INF/lib">
            <include name="*.jar"/>
        </fileset>

        <!-- search specific jar files. -->
        <pathelement location="application/search/WEB-INF/classes"/>
        <fileset dir="application/search/WEB-INF/lib">
            <include name="*.jar"/>
        </fileset>

        <!-- hv specific jar files. -->
        <pathelement location="application/hierarchView/WEB-INF/classes"/>
        <fileset dir="application/hierarchView/WEB-INF/lib">
            <include name="*.jar"/>
        </fileset>
    </path>

    <!-- ************ End of Project level data *************** -->

    <!-- =================================================================== -->

    <!-- Sets the target environment. -->
    <target name="set-target-env" description="Sets the target environment">
        <!-- Delete existing environment files. -->
        <delete file="${rep.dest.file}" quiet="true"/>
        <delete file="${ojb.dest.file}" quiet="true"/>
        <antcall target="${target.env}"/>
    </target>

    <!-- =================================================================== -->

    <!-- Remove 'dest' and 'jdoc' directories for clean build. -->
    <target name="clean"
        description="Prepare for clean build; removes api docs and classes dirs">
        <delete dir="${dest.dir}"/>
        <delete dir="${jdoc.dir}"/>
    </target>

    <!-- =================================================================== -->

    <!-- Remove 'dest' and docs directories of cvedit module for clean build -->
    <target name="clean-cvedit"
        description="Prepare cvedit module for a clean build">
        <ant dir="application/cvedit" inheritAll="false" target="clean"/>
    </target>

    <!-- =================================================================== -->

    <!-- Remove 'dest' and docs directories of hierarchView module for clean
         build
    -->
    <target name="clean-hv"
        description="Prepare hierarchView module for a clean build">
        <ant dir="application/hierarchView" inheritAll="false" target="clean"/>
    </target>

    <!-- =================================================================== -->

    <!-- Copy mapping files for castor and ojb in synchron class directory. -->
    <target name="copySynchronMappings">
        <echo message="This target to be moved to synchron package - avoid using it"/>

        <copy todir="${dest.dir}/uk/ac/ebi/intact/application/synchron" >
            <fileset dir="${config.dir}" >
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>

    <!-- =================================================================== -->

    <!-- Convert OJB.template to postgres format. -->
    <target name="setup-pg-ojb">
        <!-- Copy the template to config directory -->
        <copy file="${ojb.template.file}" tofile="${ojb.dest.file}"/>

        <replace file="${ojb.dest.file}">
            <replacefilter token="@SEQ_MANAGER@" value="uk.ac.ebi.intact.persistence.PostgresSequenceManager" />
        </replace>
    </target>

    <!-- =================================================================== -->

    <!-- Convert repository.template to postgres local format. -->
    <target name="set-pg-local-env"
        description="Sets postgres environment for running on the local host">
        <!-- Copy the template to config directory first -->
        <copy file="${rep.template.file}" tofile="${rep.dest.file}"/>

        <replace file="${rep.dest.file}">
            <replacefilter token="@DBMS_NAME@" value="PostgreSQL" />
            <replacefilter token="@DRIVER_NAME@" value="org.postgresql.Driver"/>
            <replacefilter token="@URL_SUBPROTOCOL@" value="postgresql"/>
            <replacefilter token="@URL_DBALIAS@" value="${env.USER}"/>
            <replacefilter token="@USER_NAME@" value="${env.USER}"/>
            <replacefilter token="@USER_PASSWD@" value=""/>
        </replace>
        <antcall target="setup-pg-ojb"/>
    </target>

    <!-- =================================================================== -->

    <!-- Convert repository.template to postgres remote format. -->
    <target name="set-pg-remote-env"
        description="Sets postgres environment to allow access from a remote host">

        <!-- Copy the template to config directory first -->
        <copy file="${rep.template.file}" tofile="${rep.dest.file}"/>

        <replace file="${rep.dest.file}">
            <replacefilter token="@DBMS_NAME@" value="PostgreSQL" />
            <replacefilter token="@DRIVER_NAME@" value="org.postgresql.Driver"/>
            <replacefilter token="@URL_SUBPROTOCOL@" value="postgresql://${env.HOSTNAME}:5432/${env.USER}"/>
            <replacefilter token="@URL_DBALIAS@" value=""/>
            <replacefilter token="@USER_NAME@" value="${env.USER}"/>
            <replacefilter token="@USER_PASSWD@" value=""/>
        </replace>
        <antcall target="setup-pg-ojb"/>
    </target>

    <!-- =================================================================== -->

    <!-- Convert repository.template to oracle format. -->
    <target name="set-oracle-env" description="Sets oracle environment">
        <!-- Copy the template to config directory first -->
        <copy file="${rep.template.file}" tofile="${rep.dest.file}"/>

        <replace file="${rep.dest.file}" propertyfile="config/oracle.properties">
            <replacefilter token="@DBMS_NAME@" value="Oracle" />
            <replacefilter token="@DRIVER_NAME@" value="oracle.jdbc.pool.OracleConnectionCacheImpl"/>
            <replacefilter token="@URL_SUBPROTOCOL@" value="oracle:thin:@vodka.ebi.ac.uk:1521"/>
            <replacefilter token="@URL_DBALIAS@" value="IDEV"/>
            <replacefilter token="@USER_NAME@" value="ops$$${env.USER}"/>
            <replacefilter token="@USER_PASSWD@" property="password"/>
        </replace>
        <!-- Copy the template to config directory -->
        <copy file="${ojb.template.file}" tofile="${ojb.dest.file}"/>

        <replace file="${ojb.dest.file}">
            <replacefilter token="@SEQ_MANAGER@" value="uk.ac.ebi.intact.persistence.DbSequenceManager"/>
        </replace>
    </target>

    <!-- =================================================================== -->

    <!-- Copy configuration files. -->
    <target name="copyConfigFiles">
        <!-- Experimental purposes only; just copy only necessary files -->
        <copy todir="${dest.dir}/${config.dir}" filtering="on">
            <fileset dir="${config.dir}">
                <include name="repository*.xml"/>
                <include name="repository.dtd"/>
            </fileset>
        </copy>

        <!-- the OJB and log4J properties files should be at the top level in 'dest' -->
        <copy todir="${dest.dir}" file="${config.dir}/OJB.properties"/>
        <copy todir="${dest.dir}" file="${config.dir}/log4j.properties"/>
    </target>

    <!-- =================================================================== -->

    <!-- Builds a jar file for intact core including only the core packages.
         Test packages, property and repository files required for persistence
         are not included.
    -->
    <target name="jar-core"
        description="Creates the Intact core jar file in the distribution directory">

        <!-- Delete the class directory. -->
        <delete dir="${dest.dir}"/>

        <!-- Just compile without copying config files to the class dir; exclude tests. -->
        <mkdir dir="${dest.dir}" />
        <javac srcdir="${src.dir}" destdir="${dest.dir}" debug="on" deprecation="on"
            excludes="${non.core.files}, **/test/**">
            <classpath refid="project.class.path"/>
        </javac>

        <mkdir dir="${dist.dir}" />

        <!-- Delete the existing jar file. -->
        <delete file="${dist.dir}/intact-core.jar" quiet="true"/>

        <jar destfile="${dist.dir}/intact-core.jar" basedir="${basedir}/${dest.dir}" />
    </target>

    <!-- =================================================================== -->

    <!-- Compiles the source tree; creates the dest dir if it doesn't exist. -->
    <target name="compile" description="Compiles the entire Intact source tree"
        depends="copySynchronMappings">

        <echo message=
            "DEPRECATED; PLEASE USE compile-all or compile-core INSTEAD"/>
        <mkdir dir="${dest.dir}" />

        <javac srcdir="${src.dir}" destdir="${dest.dir}" debug="on" deprecation="on"
            excludes="${non.core.files}">
            <classpath refid="project.class.path"/>
        </javac>

        <!-- Copy any configuration files -->
        <antcall target="copyConfigFiles"/>
    </target>

    <!-- =================================================================== -->

    <!-- Compiles only the Intact core files. -->
    <target name="compile-core" description="Compiles the Intact core source files">
        <mkdir dir="${dest.dir}" />

        <javac srcdir="${src.dir}" destdir="${dest.dir}" debug="on" deprecation="on"
            excludes="${non.core.files}">
            <classpath refid="project.class.path"/>
        </javac>

        <!-- Copy any configuration files -->
        <antcall target="copyConfigFiles"/>
    </target>

    <!-- =================================================================== -->

    <!-- Compiles the hierarchView module. -->
    <target name="compile-hv"  depends="compile-core"
        description="Compiles the hierarchView module">
        <ant dir="application/hierarchView" inheritAll="false" target="compile"/>
    </target>

    <!-- =================================================================== -->

    <!-- Compiles the cvedit module. -->
    <target name="compile-cvedit" depends="compile-core"
        description="Compiles the cvedit module">

        <ant dir="application/cvedit" inheritAll="false" target="compile"/>
    </target>

    <!-- =================================================================== -->

	<!-- Compiles the search module. -->
    <target name="compile-search" depends="compile-core"
        description="Compiles the search module">

        <ant dir="application/search" inheritAll="false" target="compile"/>
    </target>

    <!-- =================================================================== -->

    <!-- Compiles all the sources. -->
    <target name="compile-all" description="Compiles all the sources for Intact"
        depends="compile-core, compile-hv, compile-cvedit, compile-search">
    </target>

    <!-- =================================================================== -->

    <target name="show-java-version"
        description="Displays the version of JRE">
        <echo message="You are using JRE ${ant.java.version}"/>
    </target>

    <!-- =================================================================== -->

    <!-- Build javadocs -->
    <target name="javadoc" depends="compile-all"
        description="Creates Intact core API Documentation">

        <!-- Start with a fresh directory. -->
        <delete dir="${jdoc.dir}" quiet="true"/>
        <mkdir dir="${jdoc.dir}" />

        <javadoc destdir="${jdoc.dir}" author="true" version="true" use="true"
            windowtitle="Intact core API Documentation"
            doctitle="&lt;h1&gt;${project.title} Documentation (Version ${project.version})&lt;/h1&gt;"
            bottom="&lt;i&gt;Chris Lewington EMBL-EBI 2002 - clewing@ebi.ac.uk&lt;/i&gt;" source="1.4">

            <!-- Exclude javadoc for test packages. -->
            <packageset dir="${src.dir}">
                <exclude name="**/test/**" />
            </packageset>
            <classpath refid="javadoc.class.path"/>
            <tag name="intact.todo" description="To do:"/>
            <tag name="intact.example" description="Example:"/>
        </javadoc>
    </target>

    <target name="demo" depends="compile">
        <pathconvert targetos="unix"
                 property="class.path.name"
                 refid="project.class.path"
        />
        <echo message="${class.path.name}"/>
        <java classname="uk.ac.ebi.intact.model.IntactCoreApp"
            dir="." failonerror="true" >
            <classpath refid="project.class.path"/>
        </java>
    </target>

    <!-- Build entire project -->
    <target name="project" depends="javadoc,demo"/>

    <!-- =================================================================== -->

    <!-- Runs tests using junit task. -->
    <target name="junit-test" depends="compile-core" description="Runs JUnit tests">
        <junit printsummary="withOutAndErr">
            <test name="uk.ac.ebi.intact.util.test.AllJUnitTests"/>
            <classpath refid="project.class.path"/>
        </junit>
    </target>

    <!-- =================================================================== -->

    <!-- Runs the JUnit tester directly. The output is redirected to std out -->
    <target name="junit-test-stdout" depends="compile-core"
            description="Runs JUnit directly with output directed to stdout">
        <java classname="junit.textui.TestRunner" fork="true">
            <arg value="uk.ac.ebi.intact.util.test.AllJUnitTests"/>
            <classpath refid="project.class.path"/>
        </java>
    </target>

    <!-- =================================================================== -->

    <!-- An alias for for junit-test -->
    <target name="test">
        <antcall target="junit-test-stdout"/>
    </target>

    <!-- =================================================================== -->

</project>
