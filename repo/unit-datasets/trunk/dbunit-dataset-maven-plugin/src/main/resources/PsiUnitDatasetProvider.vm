/** AUTO-GENERATED **/
package $mojo.generatedPackage;

import java.net.URL;
import java.util.Map;
import java.util.HashMap;

public final class $classSimpleName implements $providerInterfaceName {

#foreach( $dataset in $mojo.datasets )
    public static final String ${dataset} = "${dataset}";
#end

    Map<String,GeneratedTestDataset> datasets;

    public $classSimpleName() {
        datasets = new HashMap<String,GeneratedTestDataset>();

        #foreach( $dataset in $mojo.datasets )
        datasets.put(${dataset}, new GeneratedTestDataset("$dataset", ${dataset.containsAllCVs}));
        #end
    }

    public $datasetInterfaceName getTestDataset(String id) {
        if (!datasets.containsKey(id)) {
            throw new IllegalArgumentException("No Test Dataset found with this id: "+id);
        }
        return datasets.get(id);
    }

    private class GeneratedTestDataset implements $datasetInterfaceName {

        private String id;
        private boolean containsAllCVs;

        public GeneratedTestDataset(String id, boolean containsAllCVs) {
            this.id = id;
            this.containsAllCVs = containsAllCVs;
        }

        public String getId() {
            return id;
        }

        public URL getDbUnitDataset() {
            return ${classSimpleName}.class.getResource(id+".xml");
        }

        public boolean containsAllCVs() {
            return containsAllCVs;
        }

        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            GeneratedTestDataset that = (GeneratedTestDataset) o;

            if (id != null ? !id.equals(that.id) : that.id != null) return false;

            return true;
        }

        public int hashCode() {
            return (id != null ? id.hashCode() : 0);
        }

    }
}