package uk.ac.ebi.intact.sanity.check.range;

import uk.ac.ebi.intact.model.Polymer;
import uk.ac.ebi.intact.model.Range;

/**
 * Stores information to be reported in case of error generated by the rage checker.
 *
 * @author Samuel Kerrien (skerrien@ebi.ac.uk)
 * @version $Id$
 * @since 2.0
 */
public class RangeReport {

    private RangeReportType reportType;

    private String polymerAc;
    private String interactorType;
    private String polymerSeq;
    private String rangeAc;
    private String rangeSeqStored;
    private String rangeSeqUpdated;
    private String rangeFromFuzzyType;
    private String rangeToFuzzyType;
    private String rangeSeqExpected;

    private String message;
    private boolean remappingSucceeded = false;

    //////////////////
    // Constructors

    private RangeReport() {
    }

    public RangeReport( RangeReportType reportType, Polymer polymer, Range range, String rangeSeqExpected ) {
        this.reportType = reportType;
        this.polymerAc = polymer.getAc();
        this.interactorType = polymer.getClass().getSimpleName();
        this.polymerSeq = polymer.getSequence();

        this.rangeAc = range.getAc();
        this.rangeSeqStored = range.getSequence();
        if ( range.getFromCvFuzzyType() != null ) {
            rangeFromFuzzyType = range.getFromCvFuzzyType().getShortLabel();
        }
        if ( range.getToCvFuzzyType() != null ) {
            rangeToFuzzyType = range.getToCvFuzzyType().getShortLabel();
        }

        this.rangeSeqExpected = rangeSeqExpected;
    }

    ///////////////////////////
    // Getters and Setters

    public RangeReportType getReportType() {
        return reportType;
    }

    public String getPolymerAc() {
        return polymerAc;
    }

    public void setPolymerAc( String polymerAc ) {
        this.polymerAc = polymerAc;
    }

    public String getInteractorType() {
        return interactorType;
    }

    public void setInteractorType( String interactorType ) {
        this.interactorType = interactorType;
    }

    public String getPolymerSeq() {
        return polymerSeq;
    }

    public void setPolymerSeq( String polymerSeq ) {
        this.polymerSeq = polymerSeq;
    }

    public String getRangeAc() {
        return rangeAc;
    }

    public void setRangeAc( String rangeAc ) {
        this.rangeAc = rangeAc;
    }

    public String getRangeSeqStored() {
        return rangeSeqStored;
    }

    public void setRangeSeqStored( String rangeSeqStored ) {
        this.rangeSeqStored = rangeSeqStored;
    }

    public String getRangeSeqUpdated() {
        return rangeSeqUpdated;
    }

    public void setRangeSeqUpdated( String rangeSeqUpdated ) {
        this.rangeSeqUpdated = rangeSeqUpdated;
    }

    public String getRangeSeqExpected() {
        return rangeSeqExpected;
    }

    public void setRangeSeqExpected( String rangeSeqExpected ) {
        this.rangeSeqExpected = rangeSeqExpected;
    }

    public String getRangeFromFuzzyType() {
        return rangeFromFuzzyType;
    }

    public void setRangeFromFuzzyType( String rangeFromFuzzyType ) {
        this.rangeFromFuzzyType = rangeFromFuzzyType;
    }

    public String getRangeToFuzzyType() {
        return rangeToFuzzyType;
    }

    public void setRangeToFuzzyType( String rangeToFuzzyType ) {
        this.rangeToFuzzyType = rangeToFuzzyType;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage( String message ) {
        this.message = message;
    }

    public boolean hasRemappingSucceeded() {
        return remappingSucceeded;
    }

    public void setRemappingSucceeded( boolean remappingSucceeded ) {
        this.remappingSucceeded = remappingSucceeded;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder( 512 );
        sb.append( "Type: "+ reportType ).append("\n");
        sb.append( "Remapping success: "+ remappingSucceeded ).append("\n");
        sb.append( interactorType + " AC='" ).append( polymerAc ).append( '\'' ).append("\n");
        sb.append( interactorType + " sequence='" ).append( polymerSeq ).append( '\'' ).append("\n");
        sb.append( "range AC='" ).append( rangeAc ).append( '\'' ).append("\n");
        sb.append( "range sequence stored='" ).append( rangeSeqStored ).append( '\'' ).append("\n");

        if ( rangeSeqUpdated != null ) {
            sb.append( "range sequence updated='" ).append( rangeSeqUpdated ).append( '\'' ).append("\n");
        }

        if ( rangeFromFuzzyType != null ) {
            sb.append( "range FromFuzzyType='" ).append( rangeFromFuzzyType ).append( '\'' ).append("\n");
        }

        if ( rangeToFuzzyType != null ) {
            sb.append( "range ToFuzzyType='" ).append( rangeToFuzzyType ).append( '\'' ).append("\n");
        }

        if ( rangeSeqExpected != null ) {
            sb.append( "range sequence expected='" ).append( rangeSeqExpected ).append( '\'' ).append("\n");
        }

        sb.append( "message='" ).append( message ).append( '\'' );
        return sb.toString();
    }
}