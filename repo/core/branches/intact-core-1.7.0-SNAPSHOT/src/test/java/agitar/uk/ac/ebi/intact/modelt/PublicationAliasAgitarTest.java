/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:30:45
 * Time to generate: 00:53.995 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;


public class PublicationAliasAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = PublicationAlias.class;

    public void testConstructor() throws Throwable {
        CvAliasType cvAliasType = new CvAliasType( new Institution( "testPublicationAliasShortLabel" ), "testPublicationAliasShortLabel" );
        Institution anOwner = new Institution( "testPublicationAliasShortLabel2" );
        PublicationAlias publicationAlias = new PublicationAlias( anOwner, new Publication( new Institution( "testPublicationAliasShortLabel1" ), "-100000" ), cvAliasType, "31CharactersXXXXXXXXXXXXXXXXXXX" );
        assertEquals( "publicationAlias.getEvidences().size()", 0, publicationAlias.getEvidences().size() );
        assertSame( "publicationAlias.getCvAliasType()", cvAliasType, publicationAlias.getCvAliasType() );
        assertEquals( "publicationAlias.getName()", "31CharactersXXXXXXXXXXXXXXXXXX", publicationAlias.getName() );
        assertSame( "publicationAlias.getOwner()", anOwner, publicationAlias.getOwner() );
        assertNull( "publicationAlias.parentAc", getPrivateField( publicationAlias, "parentAc" ) );
    }

    public void testConstructor1() throws Throwable {
        PublicationAlias publicationAlias = new PublicationAlias( null, new Publication( new Institution( "testPublicationAliasShortLabel" ), "-100000" ), null, " XXX XX XXXXXXXXXX \rX     \t  X " );
        assertEquals( "publicationAlias.getEvidences().size()", 0, publicationAlias.getEvidences().size() );
        assertNull( "publicationAlias.getCvAliasType()", publicationAlias.getCvAliasType() );
        assertEquals( "publicationAlias.getName()", "XXX XX XXXXXXXXXX \rX     \t  X", publicationAlias.getName() );
        assertNull( "publicationAlias.getOwner()", publicationAlias.getOwner() );
        assertNull( "publicationAlias.parentAc", getPrivateField( publicationAlias, "parentAc" ) );
    }

    public void testConstructor2() throws Throwable {
        Institution owner = new Institution( "testPublicationAliasShortLabel1" );
        CvAliasType cvAliasType = new CvAliasType( owner, "testPublicationAliasShortLabel" );
        PublicationAlias publicationAlias = new PublicationAlias( owner, new Publication( new Institution( "testPublicationAliasShortLabel" ), "-100000" ), cvAliasType, "30CharactersXXXXXXXXXXXXXXXXXX" );
        assertEquals( "publicationAlias.getEvidences().size()", 0, publicationAlias.getEvidences().size() );
        assertSame( "publicationAlias.getCvAliasType()", cvAliasType, publicationAlias.getCvAliasType() );
        assertEquals( "publicationAlias.getName()", "30CharactersXXXXXXXXXXXXXXXXXX", publicationAlias.getName() );
        assertSame( "publicationAlias.getOwner()", owner, publicationAlias.getOwner() );
        assertNull( "publicationAlias.parentAc", getPrivateField( publicationAlias, "parentAc" ) );
    }

    public void testGetParent() throws Throwable {
        Publication publication = new Publication( null, "-100000" );
        PublicationAlias alias = new PublicationAlias( new Institution( "testPublicationAliasShortLabel" ), publication, new CvAliasType( new Institution( "testPublicationAliasShortLabel1" ), "testPublicationAliasShortLabel" ), "testPublicationAliasName" );
        publication.addAlias( alias );
        Publication result = ( Publication ) alias.getParent();
        assertSame( "result", publication, result );
    }

    public void testGetParent1() throws Throwable {
        AnnotatedObject result = new PublicationAlias( new Institution( "testPublicationAliasShortLabel1" ), new Publication( null, "-100000" ), new CvAliasType( new Institution( "testPublicationAliasShortLabel" ), "testPublicationAliasShortLabel" ), "testPublicationAliasName" ).getParent();
        assertNull( "result", result );
    }

    public void testGetParentAc() throws Throwable {
        PublicationAlias publicationAlias = new PublicationAlias( new Institution( "testPublicationAliasShortLabel1" ), new Publication( new Institution( "testPublicationAliasShortLabel" ), "-100000" ), new CvAliasType( new Institution( "testPublicationAliasShortLabel2" ), "testPublicationAliasShortLabel" ), "testPublicationAliasName" );
        String result = publicationAlias.getParentAc();
        assertNull( "result", result );
        assertNull( "publicationAlias.getParent()", publicationAlias.getParent() );
        assertNull( "publicationAlias.parentAc", getPrivateField( publicationAlias, "parentAc" ) );
    }

    public void testGetParentAc1() throws Throwable {
        Publication publication = new Publication( null, "-100000" );
        publication.setAc( "testPublicationAliasAc" );
        PublicationAlias publicationAlias = new PublicationAlias( new Institution( "testPublicationAliasShortLabel1" ), publication, new CvAliasType( new Institution( "testPublicationAliasShortLabel" ), "testPublicationAliasShortLabel" ), "testPublicationAliasName" );
        String result = publicationAlias.getParentAc();
        assertEquals( "result", "testPublicationAliasAc", result );
        assertNull( "publicationAlias.getParent()", publicationAlias.getParent() );
        assertEquals( "publicationAlias.parentAc", "testPublicationAliasAc", getPrivateField( publicationAlias, "parentAc" ) );
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new PublicationAlias( new Institution( "testPublicationAliasShortLabel1" ), null, new CvAliasType( new Institution( "testPublicationAliasShortLabel" ), "testPublicationAliasShortLabel" ), "testPublicationAliasName" );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertNull( "ex.getMessage()", ex.getMessage() );
            assertThrownBy( Alias.class, ex );
        }
    }
}

