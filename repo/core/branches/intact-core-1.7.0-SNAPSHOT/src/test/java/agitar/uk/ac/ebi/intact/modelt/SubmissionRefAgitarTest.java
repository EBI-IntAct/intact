/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:28:44
 * Time to generate: 00:14.333 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;


import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;

import java.util.Date;

public class SubmissionRefAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = SubmissionRef.class;

    public void testConstructor() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef();
        assertEquals( "submissionRef.getEvidences().size()", 0, submissionRef.getEvidences().size() );
        assertEquals( "submissionRef.getAnnotatedObjects().size()", 0, submissionRef.getAnnotatedObjects().size() );
    }

    public void testConstructor1() throws Throwable {
        Reference reference = new SubmissionRef();
        Institution owner = new Institution( "testSubmissionRefShortLabel" );
        Date holdDate = new Date( 100L );
        SubmissionRef submissionRef = new SubmissionRef( owner, "testSubmissionRefTitle", "testSubmissionRefAuthors", reference, holdDate );
        assertSame( "submissionRef.getReference()", reference, submissionRef.getReference() );
        assertEquals( "submissionRef.getEvidences().size()", 0, submissionRef.getEvidences().size() );
        assertSame( "submissionRef.getHoldDate()", holdDate, submissionRef.getHoldDate() );
        assertEquals( "submissionRef.getAuthors()", "testSubmissionRefAuthors", submissionRef.getAuthors() );
        assertEquals( "submissionRef.getTitle()", "testSubmissionRefTitle", submissionRef.getTitle() );
        assertSame( "submissionRef.getOwner()", owner, submissionRef.getOwner() );
        assertEquals( "submissionRef.getAnnotatedObjects().size()", 0, submissionRef.getAnnotatedObjects().size() );
    }

    public void testGetReferenceAc() throws Throwable {
        String result = new SubmissionRef().getReferenceAc();
        assertNull( "result", result );
    }

    public void testGetReferenceAc1() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef();
        submissionRef.setReferenceAc( "testSubmissionRefAc" );
        String result = submissionRef.getReferenceAc();
        assertEquals( "result", "testSubmissionRefAc", result );
    }

    public void testSetHoldDate() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef();
        Date holdDate = new Date( 100L );
        submissionRef.setHoldDate( holdDate );
        assertSame( "submissionRef.getHoldDate()", holdDate, submissionRef.getHoldDate() );
    }

    public void testSetReference() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef( ( Institution ) Mockingbird.getProxyObject( Institution.class ), "testSubmissionRefTitle", "testSubmissionRefAuthors", ( Reference ) Mockingbird.getProxyObject( Reference.class ), ( Date ) Mockingbird.getProxyObject( Date.class ) );
        Mockingbird.enterTestMode();
        submissionRef.setReference( null );
        assertNull( "submissionRef.getReference()", submissionRef.getReference() );
    }

    public void testSetReference1() throws Throwable {
        Reference reference = new Reference();
        SubmissionRef submissionRef = new SubmissionRef( new Institution( "testSubmissionRefShortLabel" ), "testSubmissionRefTitle", "testSubmissionRefAuthors", reference, new Date( 100L ) );
        submissionRef.setReference( reference );
        assertSame( "submissionRef.getReference()", reference, submissionRef.getReference() );
        assertNull( "reference.getAuthors()", reference.getAuthors() );
    }

    public void testSetReference2() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef();
        Reference reference = new Reference();
        submissionRef.setReference( reference );
        assertSame( "submissionRef.getReference()", reference, submissionRef.getReference() );
    }

    public void testSetReferenceAc() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef();
        submissionRef.setReferenceAc( "testSubmissionRefAc" );
        assertEquals( "submissionRef.referenceAc", "testSubmissionRefAc", submissionRef.getReferenceAc() );
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new SubmissionRef( new Institution( "testSubmissionRefShortLabel" ), null, "testSubmissionRefAuthors", new SubmissionRef(), new Date( 100L ) );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Reference must have a non-null title!", ex.getMessage() );
            assertThrownBy( Reference.class, ex );
        }
    }
}

