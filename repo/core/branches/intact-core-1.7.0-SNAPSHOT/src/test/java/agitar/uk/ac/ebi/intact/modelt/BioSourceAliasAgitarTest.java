/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:22:19
 * Time to generate: 00:45.468 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt;

import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;

public class BioSourceAliasAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = BioSourceAlias.class;

    public void testConstructor() throws Throwable {
        Institution anOwner = new Institution( "testBioSourceAliasShortLabel1" );
        CvAliasType cvAliasType = new CvAliasType( new Institution( "testBioSourceAliasShortLabel2" ), "testBioSourceAliasShortLabel" );
        BioSourceAlias bioSourceAlias = new BioSourceAlias( anOwner, new BioSource( new Institution( "testBioSourceAliasShortLabel" ), "testBioSourceAliasShortLabel", "-66834" ), cvAliasType, "31CharactersXXXXXXXXXXXXXXXXXXX" );
        assertEquals( "bioSourceAlias.getEvidences().size()", 0, bioSourceAlias.getEvidences().size() );
        assertSame( "bioSourceAlias.getCvAliasType()", cvAliasType, bioSourceAlias.getCvAliasType() );
        assertEquals( "bioSourceAlias.getName()", "31CharactersXXXXXXXXXXXXXXXXXX", bioSourceAlias.getName() );
        assertSame( "bioSourceAlias.getOwner()", anOwner, bioSourceAlias.getOwner() );
        assertNull( "bioSourceAlias.parentAc", getPrivateField( bioSourceAlias, "parentAc" ) );
    }

    public void testConstructor1() throws Throwable {
        Institution anOwner = new Institution( "testBioSourceAliasShortLabel2" );
        CvAliasType cvAliasType = new CvAliasType( new Institution( "testBioSourceAliasShortLabel" ), "testBioSourceAliasShortLabel" );
        BioSourceAlias bioSourceAlias = new BioSourceAlias( anOwner, new BioSource( new Institution( "testBioSourceAliasShortLabel1" ), "testBioSourceAliasShortLabel", "-66834" ), cvAliasType, "   XXX XXXXXXXXXXXXXXXXXXXXXXXXXX   \r" );
        assertEquals( "bioSourceAlias.getEvidences().size()", 0, bioSourceAlias.getEvidences().size() );
        assertSame( "bioSourceAlias.getCvAliasType()", cvAliasType, bioSourceAlias.getCvAliasType() );
        assertEquals( "bioSourceAlias.getName()", "XXX XXXXXXXXXXXXXXXXXXXXXXXXXX", bioSourceAlias.getName() );
        assertSame( "bioSourceAlias.getOwner()", anOwner, bioSourceAlias.getOwner() );
        assertNull( "bioSourceAlias.parentAc", getPrivateField( bioSourceAlias, "parentAc" ) );
    }

//    public void testConstructor2() throws Throwable {
//        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
//        BioSource bioSource = ( BioSource ) Mockingbird.getProxyObject( BioSource.class );
//        CvAliasType cvAliasType = ( CvAliasType ) Mockingbird.getProxyObject( CvAliasType.class );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( bioSource.getAc(), "hdoQq-BW?" );
//        Mockingbird.enterTestMode();
//        BioSourceAlias bioSourceAlias = new BioSourceAlias( anOwner, bioSource, cvAliasType, "29CharactersXXXXXXXXXXXXXXXXX" );
//        assertEquals( "bioSourceAlias.getEvidences().size()", 0, bioSourceAlias.getEvidences().size() );
//        assertSame( "bioSourceAlias.getCvAliasType()", cvAliasType, bioSourceAlias.getCvAliasType() );
//        assertEquals( "bioSourceAlias.getName()", "29CharactersXXXXXXXXXXXXXXXXX", bioSourceAlias.getName() );
//        assertSame( "bioSourceAlias.getOwner()", anOwner, bioSourceAlias.getOwner() );
//        assertEquals( "bioSourceAlias.parentAc", "hdoQq-BW?", getPrivateField( bioSourceAlias, "parentAc" ) );
//        assertInvoked( bioSource, "getAc" );
//    }

    public void testGetParent() throws Throwable {
        BioSourceAlias alias = new BioSourceAlias( new Institution( "testBioSourceAliasShortLabel1" ), new BioSource( new Institution( "testBioSourceAliasShortLabel2" ), "testBioSourceAliasShortLabel", "-66834" ), new CvAliasType( new Institution( "testBioSourceAliasShortLabel" ), "testBioSourceAliasShortLabel" ), "testBioSourceAliasName" );
        AnnotatedObjectImpl bioSource = new BioSource( null, "testBioSourceAliasShortLabel1", "-96655" );
        bioSource.addAlias( alias );
        AnnotatedObjectImpl result = ( AnnotatedObjectImpl ) alias.getParent();
        assertSame( "result", bioSource, result );
    }

    public void testGetParent1() throws Throwable {
        AnnotatedObject result = new BioSourceAlias( new Institution( "testBioSourceAliasShortLabel" ), new BioSource( null, "testBioSourceAliasShortLabel", "-66834" ), new CvAliasType( new Institution( "testBioSourceAliasShortLabel1" ), "testBioSourceAliasShortLabel" ), "testBioSourceAliasName" ).getParent();
        assertNull( "result", result );
    }

    public void testGetParentAc() throws Throwable {
        BioSourceAlias bioSourceAlias = new BioSourceAlias( new Institution( "testBioSourceAliasShortLabel1" ), new BioSource( new Institution( "testBioSourceAliasShortLabel2" ), "testBioSourceAliasShortLabel", "-66834" ), new CvAliasType( new Institution( "testBioSourceAliasShortLabel" ), "testBioSourceAliasShortLabel" ), "testBioSourceAliasName" );
        String result = bioSourceAlias.getParentAc();
        assertNull( "result", result );
        assertNull( "bioSourceAlias.getParent()", bioSourceAlias.getParent() );
        assertNull( "bioSourceAlias.parentAc", getPrivateField( bioSourceAlias, "parentAc" ) );
    }

//    public void testGetParentAc1() throws Throwable {
//        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
//        BioSource bioSource = ( BioSource ) Mockingbird.getProxyObject( BioSource.class );
//        CvAliasType cvAliasType = ( CvAliasType ) Mockingbird.getProxyObject( CvAliasType.class );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( bioSource.getAc(), "testString" );
//        Mockingbird.enterTestMode();
//        BioSourceAlias bioSourceAlias = new BioSourceAlias( anOwner, bioSource, cvAliasType, "testBioSourceAliasName" );
//        Mockingbird.enterTestMode();
//        String result = bioSourceAlias.getParentAc();
//        assertEquals( "result", "testString", result );
//        assertNull( "bioSourceAlias.getParent()", bioSourceAlias.getParent() );
//        assertEquals( "bioSourceAlias.parentAc", "testString", getPrivateField( bioSourceAlias, "parentAc" ) );
//        assertInvoked( bioSource, "getAc" );
//    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new BioSourceAlias( new Institution( "testBioSourceAliasShortLabel1" ), null, new CvAliasType( new Institution( "testBioSourceAliasShortLabel" ), "testBioSourceAliasShortLabel" ), "testBioSourceAliasName" );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertNull( "ex.getMessage()", ex.getMessage() );
            assertThrownBy( Alias.class, ex );
        }
    }
}

