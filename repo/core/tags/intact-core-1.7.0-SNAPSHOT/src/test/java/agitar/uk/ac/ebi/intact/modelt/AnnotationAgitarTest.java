/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:28:14
 * Time to generate: 01:07.024 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt;

import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;
import uk.ac.ebi.intact.model.util.CvObjectUtils;

public class AnnotationAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = Annotation.class;

//    public void testConstructor() throws Throwable {
//        Institution owner = new Institution( "testAnnotationShortLabel" );
//        CvTopic topic = new CvTopic( new Institution( "testAnnotationShortLabel1" ), "testAnnotationShortLabel" );
//        Annotation annotation = new Annotation( owner, topic, null );
//        assertEquals( "annotation.getEvidences().size()", 0, annotation.getEvidences().size() );
//        assertSame( "annotation.getCvTopic()", topic, annotation.getCvTopic() );
//        assertSame( "annotation.getOwner()", owner, annotation.getOwner() );
//        assertFalse( "annotationAnnotation.log.isDebugEnabled()", ( ( Log ) getPrivateField( Annotation.class, "log" ) ).isDebugEnabled() );
//    }

    public void testConstructor1() throws Throwable {
        CvTopic topic = new CvTopic( new Institution( "testAnnotationShortLabel" ), "testAnnotationShortLabel" );
        Institution owner = new Institution( "testAnnotationShortLabel1" );
        Annotation annotation = new Annotation( owner, topic, "testAnnotationAnnotationText" );
        assertEquals( "annotation.getEvidences().size()", 0, annotation.getEvidences().size() );
        assertSame( "annotation.getCvTopic()", topic, annotation.getCvTopic() );
        assertEquals( "annotation.getAnnotationText()", "testAnnotationAnnotationText", annotation.getAnnotationText() );
        assertSame( "annotation.getOwner()", owner, annotation.getOwner() );
    }

    public void testConstructor2() throws Throwable {
        CvTopic topic = new CvTopic( new Institution( "testAnnotationShortLabel" ), "testAnnotationShortLabel" );
        Institution owner = new Institution( "testAnnotationShortLabel1" );
        Annotation annotation = new Annotation( owner, topic );
        assertEquals( "annotation.getEvidences().size()", 0, annotation.getEvidences().size() );
        assertSame( "annotation.getCvTopic()", topic, annotation.getCvTopic() );
        assertSame( "annotation.getOwner()", owner, annotation.getOwner() );
    }

    public void testEquals() throws Throwable {
        Annotation annotation = new Annotation( new Institution( "testAnnotationShortLabel" ), new CvTopic( null, "testString" ), "testAnnotationAnnotationText" );
        annotation.setAnnotationText( "testAnnotationAnnotationText" );
        Annotation o = new Annotation( new Institution( "testAnnotationShortLabel1" ), new CvTopic( null, "testString" ), "testAnnotationAnnotationText1" );
        o.setAnnotationText( "testAnnotationAnnotationText1" );
        boolean result = annotation.equals( o );
        assertFalse( "result", result );
    }

    public void testEquals1() throws Throwable {
        Annotation annotation = new Annotation((Institution) Mockingbird.getProxyObject(Institution.class), (CvTopic) Mockingbird.getProxyObject(CvTopic.class), "testAnnotationAnnotationText");
        Mockingbird.enterTestMode();
        boolean result = annotation.equals("");
        assertFalse("result", result);
    }

    public void testEquals2() throws Throwable {
        Annotation o = new Annotation( null, new CvTopic( new Institution( "testAnnotationShortLabel" ), "testAnnotationShortLabel" ) );
        boolean result = o.equals( o );
        assertTrue( "result", result );
    }

    public void testHashCode() throws Throwable {
        CvTopic topic = new CvTopic( new Institution( "testAnnotationShortLabel" ), "testAnnotationShortLabel" );
        Annotation annotation = new Annotation( null, topic );
        annotation.setAnnotationText( "testAnnotationAnnotationText" );
        annotation.setAc( "testAnnotationAc" );
        int result = annotation.hashCode();
        assertEquals( "result", 418430560, result );
        assertSame( "annotation.getCvTopic()", topic, annotation.getCvTopic() );
        assertEquals( "annotation.getAnnotationText()", "testAnnotationAnnotationText", annotation.getAnnotationText() );
        assertEquals( "annotation.ac", "testAnnotationAc", annotation.getAc() );
    }

    public void testHashCode1() throws Throwable {
        CvTopic topic = new CvTopic( null, "testAnnotationShortLabel" );
        Annotation annotation = new Annotation( new Institution( "testAnnotationShortLabel" ), topic, "testAnnotationAnnotationText" );
        annotation.setAnnotationText( null );
        int result = annotation.hashCode();
        assertEquals( "result", -482470772, result );
        assertSame( "annotation.getCvTopic()", topic, annotation.getCvTopic() );
    }

    public void testHashCode2() throws Throwable {
        CvTopic topic = new CvTopic( new Institution( "testAnnotationShortLabel" ), "testAnnotationShortLabel" );
        Annotation annotation = new Annotation( new Institution( "testAnnotationShortLabel1" ), topic );
        annotation.setAc( "testAnnotationAc" );
        int result = annotation.hashCode();
        assertEquals( "result", -1933637441, result );
        assertSame( "annotation.getCvTopic()", topic, annotation.getCvTopic() );
        assertEquals( "annotation.ac", "testAnnotationAc", annotation.getAc() );
    }

    public void testHashCode3() throws Throwable {
        Institution owner = (Institution) Mockingbird.getProxyObject(Institution.class);
        Mockingbird.enterTestMode();
        CvTopic cvTopic = new CvTopic(owner, "testAnnotationShortLabel");
        Institution owner2 = (Institution) Mockingbird.getProxyObject(Institution.class);
        CvTopic topic = (CvTopic) Mockingbird.getProxyObject(CvTopic.class);
        Mockingbird.enterTestMode();
        Annotation annotation = new Annotation(owner2, topic);
        annotation.setAnnotationText("testAnnotationAnnotationText");
        annotation.setAc(null);
        annotation.setCvTopic(cvTopic);
        annotation.hashCode();
        assertSame("annotation.getCvTopic()", cvTopic, annotation.getCvTopic());
        assertEquals("annotation.getAnnotationText()", "testAnnotationAnnotationText", annotation.getAnnotationText());
    }

    public void testSetAnnotationText() throws Throwable {
        Annotation annotation = new Annotation( new Institution( "testAnnotationShortLabel1" ), new CvTopic( new Institution( "testAnnotationShortLabel" ), "testAnnotationShortLabel" ) );
        annotation.setAnnotationText( "testAnnotationAnnotationText" );
        assertEquals( "annotation.getAnnotationText()", "testAnnotationAnnotationText", annotation.getAnnotationText() );
    }

    public void testSetCvTopic() throws Throwable {
        CvTopic topic = new CvTopic( new Institution( "testAnnotationShortLabel" ), "testAnnotationShortLabel" );
        Annotation annotation = new Annotation( new Institution( "testAnnotationShortLabel1" ), topic );
        annotation.setCvTopic( topic );
        assertSame( "annotation.getCvTopic()", topic, annotation.getCvTopic() );
    }

    public void testToString() throws Throwable {
        String result = new Annotation( new Institution( "testAnnotationShortLabel1" ), new CvTopic( new Institution( "testAnnotationShortLabel" ), "testAnnotationShortLabel" ) ).toString();
        assertEquals( "result", "Annotation[type: testAnnotationShortL, text: null]", result );
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new Annotation( new Institution( "testAnnotationShortLabel" ), null, "testAnnotationAnnotationText" );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Annotation must have an associated topic!", ex.getMessage() );
            assertThrownBy( Annotation.class, ex );
            assertNotNull( "Annotation.log", getPrivateField( Annotation.class, "log" ) );
        }
    }

    public void testConstructorThrowsNullPointerException1() throws Throwable {
        try {
            new Annotation( new Institution( "testAnnotationShortLabel" ), null );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Annotation must have an associated topic!", ex.getMessage() );
            assertThrownBy( Annotation.class, ex );
        }
    }

    public void testHashCodeThrowsNullPointerException() throws Throwable {
        CvTopic cvTopic = new CvTopic( new Institution( "testAnnotationShortLabel1" ), "testAnnotationShortLabel" );
        cvTopic.addXref( new CvObjectXref( new Institution( "testAnnotation\nShortLabel" ), null, "testAnnotationAPrimaryId", "testAnnotationASecondaryId", "testAnnotationADatabaseRelease", new CvXrefQualifier( new Institution( "testAnnotation\rShortLabel" ), "testAnnotationShortLabel" ) ) );
        Annotation annotation = new Annotation( new Institution( "testAnnotationShortLabel2" ), new CvTopic( new Institution( "testAnnotationShortLabel" ), "testAnnotationShortLabel1" ) );
        annotation.setAc( "testAnnotationAc" );
        annotation.setCvTopic( cvTopic );
        try {
            annotation.hashCode();
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "cvObject should not be null", ex.getMessage() );
            assertThrownBy( CvObjectUtils.class, ex );
            assertSame( "annotation.getCvTopic()", cvTopic, annotation.getCvTopic() );
            assertEquals( "annotation.ac", "testAnnotationAc", annotation.getAc() );
            assertNull( "annotation.getAnnotationText()", annotation.getAnnotationText() );
        }
    }

    public void testSetCvTopicThrowsNullPointerException() throws Throwable {
        CvTopic topic = new CvTopic( new Institution( "testAnnotationShortLabel" ), "testAnnotationShortLabel" );
        Annotation annotation = new Annotation( new Institution( "testAnnotationShortLabel1" ), topic );
        try {
            annotation.setCvTopic( null );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Annotation must have an associated topic!", ex.getMessage() );
            assertThrownBy( Annotation.class, ex );
            assertSame( "annotation.getCvTopic()", topic, annotation.getCvTopic() );
        }
    }
}

