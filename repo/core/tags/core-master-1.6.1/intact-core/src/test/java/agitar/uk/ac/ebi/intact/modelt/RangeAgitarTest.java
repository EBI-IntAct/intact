/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:27:39
 * Time to generate: 01:51.053 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;

public class RangeAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = Range.class;

    public void testConstructor() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, 0, 100, "testRangeSeq" );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
        assertEquals( "range.getFromIntervalEnd()", 0, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", 0, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 100, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertEquals( "range.getSequence()", "testRangeSeq", range.getSequence() );
    }

    public void testConstructor1() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, -13, 100, " " );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
        assertEquals( "range.getFromIntervalEnd()", -13, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", -13, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 100, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertEquals( "range.getSequence()", " ", range.getSequence() );
    }

    public void testConstructor2() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, -1, 0, 1, 100, "testRangeSeq" );
        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertEquals( "range.getFromIntervalEnd()", 0, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", -1, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 1, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertEquals( "range.getSequence()", "testRangeSeq", range.getSequence() );
    }

    public void testConstructor3() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, 1, 2, 2, 100, " " );
        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertEquals( "range.getFromIntervalEnd()", 2, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", 1, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 2, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertEquals( "range.getSequence()", " ", range.getSequence() );
    }

    public void testConstructor4() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, 0, 0, 1, 100, "" );
        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertEquals( "range.getFromIntervalEnd()", 0, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", 0, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 1, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertNull( "range.getSequence()", range.getSequence() );
    }

    public void testConstructor5() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, 100, 100, 101, 1000, null );
        assertEquals( "range.getToIntervalEnd()", 1000, range.getToIntervalEnd() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertEquals( "range.getFromIntervalEnd()", 100, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", 100, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 101, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertNull( "range.getSequence()", range.getSequence() );
    }

//    public void testConstructor6() throws Throwable {
//        Institution owner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
//        Mockingbird.enterRecordingMode();
//        Object sequenceStartingFrom = callPrivateMethod( "uk.ac.ebi.intact.model.Range", "getSequenceStartingFrom", new Class[]{String.class, int.class}, null, new Object[]{"Y<", new Integer( 1 )} );
//        Mockingbird.setReturnValue( sequenceStartingFrom, "" );
//        Mockingbird.setReturnValue( Range.getMaxSequenceSize(), 0 );
//        Mockingbird.enterTestMode();
//        Range range = new Range( owner, 1, 1, 1, 100, "Y<" );
//        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
//        assertTrue( "range.isLinked()", range.isLinked() );
//        assertFalse( "range.isUndetermined()", range.isUndetermined() );
//        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
//        assertEquals( "range.getFromIntervalEnd()", 1, range.getFromIntervalEnd() );
//        assertEquals( "range.getFromIntervalStart()", 1, range.getFromIntervalStart() );
//        assertEquals( "range.getToIntervalStart()", 1, range.getToIntervalStart() );
//        assertSame( "range.getOwner()", owner, range.getOwner() );
//        assertEquals( "range.getSequence()", "", range.getSequence() );
//    }

    public void testConstructor7() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, 10, 100, " " );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
        assertEquals( "range.getFromIntervalEnd()", 10, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", 10, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 100, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertNull( "range.getSequence()", range.getSequence() );
    }

    public void testConstructor8() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, -1, 100, "testRangeSeq" );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
        assertEquals( "range.getFromIntervalEnd()", -1, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", -1, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 100, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertEquals( "range.getSequence()", "testRangeSeq", range.getSequence() );
    }

    public void testConstructor9() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, 100, 1000, "" );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertEquals( "range.getToIntervalEnd()", 1000, range.getToIntervalEnd() );
        assertEquals( "range.getFromIntervalEnd()", 100, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", 100, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 1000, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertNull( "range.getSequence()", range.getSequence() );
    }

    public void testConstructor10() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, 1, 100, " " );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
        assertEquals( "range.getFromIntervalEnd()", 1, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", 1, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 100, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertEquals( "range.getSequence()", " ", range.getSequence() );
    }

    // Mockingbird.setReturnValue( sequenceStartingFrom, "1" ); fails !
    // getSequenceStartingFrom() is simply building a string based on the given params ... it doesn't relate to a property.

//    public void testConstructor11() throws Throwable {
//        Institution owner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
//        Mockingbird.enterRecordingMode();
//        Object sequenceStartingFrom = callPrivateMethod( "uk.ac.ebi.intact.model.Range", "getSequenceStartingFrom", new Class[]{String.class, int.class}, null, new Object[]{"1", new Integer( -100 )} );
//        Mockingbird.setReturnValue( sequenceStartingFrom, "1" );
//        Mockingbird.setReturnValue( Range.getMaxSequenceSize(), 8 );
//        Mockingbird.enterTestMode();
//        Range range = new Range( owner, -100, 100, "1" );
//        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
//        assertFalse( "range.isUndetermined()", range.isUndetermined() );
//        assertTrue( "range.isLinked()", range.isLinked() );
//        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
//        assertEquals( "range.getFromIntervalEnd()", -100, range.getFromIntervalEnd() );
//        assertEquals( "range.getFromIntervalStart()", -100, range.getFromIntervalStart() );
//        assertEquals( "range.getToIntervalStart()", 100, range.getToIntervalStart() );
//        assertSame( "range.getOwner()", owner, range.getOwner() );
//        assertEquals( "range.getSequence()", "1", range.getSequence() );
//    }

    public void testConstructor12() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, -10, -9, -9, 100, " " );
        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertEquals( "range.getFromIntervalEnd()", -9, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", -10, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", -9, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertEquals( "range.getSequence()", " ", range.getSequence() );
    }

    public void testConstructor13() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, 3, 10, 100, 1000, " " );
        assertEquals( "range.getToIntervalEnd()", 1000, range.getToIntervalEnd() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertEquals( "range.getFromIntervalEnd()", 10, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", 3, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 100, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertNull( "range.getSequence()", range.getSequence() );
    }

    public void testConstructor14() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, 0, 0, 1, 100, "testRangeSeq" );
        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
        assertTrue( "range.isLinked()", range.isLinked() );
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
        assertEquals( "range.getEvidences().size()", 0, range.getEvidences().size() );
        assertEquals( "range.getFromIntervalEnd()", 0, range.getFromIntervalEnd() );
        assertEquals( "range.getFromIntervalStart()", 0, range.getFromIntervalStart() );
        assertEquals( "range.getToIntervalStart()", 1, range.getToIntervalStart() );
        assertSame( "range.getOwner()", owner, range.getOwner() );
        assertEquals( "range.getSequence()", "testRangeSeq", range.getSequence() );
    }

    public void testClone() throws Throwable {
        Range result = ( Range ) new Range( new Institution( "testRangeShortLabel" ), 0, 100, "testRangeSeq" ).clone();
        assertEquals( "result.getSequence()", "testRangeSeq", result.getSequence() );
    }

    public void testEquals() throws Throwable {
        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), -1, 100, "testRangeSeq" );
        range.setFromIntervalStart( 0 );
        Range o = ( Range ) Mockingbird.getProxyObject( Range.class );
        Mockingbird.enterTestMode();
        boolean result = range.equals( o );
        assertFalse( "result", result );
    }

    public void testEquals1() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), -100, -100, -100, 100, "" );
        boolean result = range.equals( new Range( null, -100, -100, -100, 100, "" ) );
        assertTrue( "result", result );
    }

    public void testEquals2() throws Throwable {
        Range range = new Range( null, -100, -99, "testRangeSeq" );
        boolean result = range.equals( new Range( null, -100, -100, -99, 100, "testRangeSeq" ) );
        assertFalse( "result", result );
    }

    public void testEquals3() throws Throwable {
        Range o = new Range( new Institution( "testRangeShortLabel" ), 0, 100, "testRangeSeq" );
        boolean result = o.equals( o );
        assertTrue( "result", result );
    }

    public void testEquals4() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), -100, -100, -100, 100, "testRangeSeq" );
        Range o = new Range( new Institution( "testRangeShortLabel1" ), -100, -100, -100, 100, "testRangeSeq1" );
        o.setUndetermined( true );
        boolean result = range.equals( o );
        assertFalse( "result", result );
    }

    public void testEquals5() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), -100, -100, -100, 100, "testRangeSeq" );
        Range o = new Range( new Institution( "testRangeShortLabel1" ), -100, -100, -100, 100, "testRangeSeq1" );
        o.setLinked( false );
        boolean result = range.equals( o );
        assertFalse( "result", result );
    }

    public void testEquals6() throws Throwable {
        boolean result = new Range( null, 100, 101, 101, 1000, "testRangeSeq" ).equals( new CvGoNode() );
        assertFalse( "result", result );
    }

    public void testEquals7() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel1" ), 1, 100, "testRangeSeq" );
        boolean result = range.equals( new Range( new Institution( "testRangeShortLabel" ), 1, 1000, "testRangeSeq1" ) );
        assertFalse( "result", result );
    }

    public void testEquals8() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), -100, -100, -100, 100, "" );
        boolean result = range.equals( new Range( new Institution( "testRangeShortLabel1" ), -100, -100, -100, 100, "testRange\rSeq" ) );
        assertFalse( "result", result );
    }

    public void testEquals9() throws Throwable {
        Range range = new Range( null, -100, -99, "testRangeSeq" );
        range.prepareSequence( "1" );
        boolean result = range.equals( new Range( null, -100, -100, -99, -99, "1" ) );
        assertTrue( "result", result );
    }

    public void testEquals10() throws Throwable {
        boolean result = new Range( new Institution( "testRangeShortLabel" ), -100, 1000, "testRangeSeq1" ).equals( new Range( new Institution( "testRangeShortLabel1" ), 0, 100, "testRangeSeq" ) );
        assertFalse( "result", result );
    }

    public void testEquals11() throws Throwable {
        Range range = new Range( null, -100, -99, "testRangeSeq" );
        boolean result = range.equals( new Range( new Institution( "testRangeShortLabel" ), -100, -100, -99, -99, "testRangeSeq1" ) );
        assertFalse( "result", result );
    }

    public void testGetMaxSequenceSize() throws Throwable {
        Range.getMaxSequenceSize();
        assertTrue( "Test completed without Exception", true );
        // dependencies on static and environment state led to removal of 1 assertion
    }

    public void testGetRange() throws Throwable {
        String result = Range.getRange( "", 100, 1000 );
        assertEquals( "result", "100", result );
    }

    public void testGetRange1() throws Throwable {
        String result = Range.getRange( " ", 100, 1000 );
        assertEquals( "result", "100", result );
    }

    public void testGetRange2() throws Throwable {
        String result = Range.getRange( "range", 100, 1000 );
        assertEquals( "result", "100..1000", result );
    }

    public void testGetRange3() throws Throwable {
        String result = Range.getRange( "undetermined", 100, 1000 );
        assertEquals( "result", "?", result );
    }

    public void testHashCode() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 100, "testRangeSeq" );
        range.setSequence( "testRangeSequence" );
        int result = range.hashCode();
        assertEquals( "result", -1459993468, result );
        assertEquals( "range.getSequence()", "testRangeSequence", range.getSequence() );
    }

    public void testHashCode1() throws Throwable {
        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), 10, 100, "" );
        Mockingbird.enterTestMode();
        int result = range.hashCode();
        assertEquals( "result", 255300, result );
    }

    public void testPrepareSequence() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel1" ), 0, 100, "testRangeSeq" );
        range.setFromCvFuzzyType( new CvFuzzyType( new Institution( "testRangeShortLabel" ), "testRangeShortLabel" ) );
        String result = range.prepareSequence( "" );
        assertNull( "range.getSequence()", range.getSequence() );
        assertNull( "result", result );
    }

    public void testPrepareSequence1() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel1" ), -13, 100, "testRangeSeq" );
        range.setFromCvFuzzyType( new CvFuzzyType( new Institution( "testRangeShortLabel" ), "testRangeShortLabel" ) );
        String result = range.prepareSequence( " " );
        assertEquals( "range.getSequence()", " ", range.getSequence() );
        assertEquals( "result", " ", result );
    }

    public void testPrepareSequence2() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 1, 10, 100, "testRangeSeq" );
        String result = range.prepareSequence( null );
        assertNull( "range.getSequence()", range.getSequence() );
        assertNull( "result", result );
    }

    public void testPrepareSequence3() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 1, 1, 100, "testRangeSeq" );
        String result = range.prepareSequence( "testRangeSequence" );
        assertEquals( "range.getSequence()", "testRangeSequence", range.getSequence() );
        assertEquals( "result", "testRangeSequence", result );
    }

    public void testPrepareSequence4() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel1" ), 0, 100, "testRangeSeq" );
        range.setFromCvFuzzyType( new CvFuzzyType( new Institution( "testRangeShortLabel" ), "testRangeShortLabel" ) );
        String result = range.prepareSequence( " " );
        assertEquals( "range.getSequence()", " ", range.getSequence() );
        assertEquals( "result", " ", result );
    }

    public void testPrepareSequence5() throws Throwable {
        Range range = new Range( null, 1, 1, 2, 100, "testRangeSeq" );
        range.setFromCvFuzzyType( new CvFuzzyType( new Institution( "testRangeShortLabel" ), "testRangeShortLabel" ) );
        String result = range.prepareSequence( "testRangeSequence" );
        assertEquals( "range.getSequence()", "testRangeSequence", range.getSequence() );
        assertEquals( "result", "testRangeSequence", result );
    }

    public void testPrepareSequence6() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 100, "testRangeSeq" );
        String result = range.prepareSequence( "" );
        assertNull( "range.getSequence()", range.getSequence() );
        assertNull( "result", result );
    }

    public void testPrepareSequence7() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 10, 100, "testRangeSeq" );
        String result = range.prepareSequence( " " );
        assertNull( "range.getSequence()", range.getSequence() );
        assertNull( "result", result );
    }

//    public void testPrepareSequence8() throws Throwable {
//        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), 0, 100, "testRangeSeq" );
//        range.setFromIntervalStart( -1 );
//        CvFuzzyType type = ( CvFuzzyType ) Mockingbird.getProxyObject( CvFuzzyType.class );
//        range.setFromCvFuzzyType( type );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( type.isCTerminal(), false );
//        Mockingbird.setReturnValue( type.isNTerminal(), false );
//        Mockingbird.setReturnValue( type.isUndetermined(), false );
//        Object sequenceStartingFrom = callPrivateMethod( "uk.ac.ebi.intact.model.Range", "getSequenceStartingFrom", new Class[]{String.class, int.class}, null, new Object[]{"c-termina", new Integer( -1 )} );
//        Mockingbird.setReturnValue( sequenceStartingFrom, "c-termina" );
//        Mockingbird.setReturnValue( Range.getMaxSequenceSize(), 35 );
//        Mockingbird.enterTestMode();
//        String result = range.prepareSequence( "c-termina" );
//        assertEquals( "range.getSequence()", "c-termina", range.getSequence() );
//        assertEquals( "result", "c-termina", result );
//        assertInvoked( type, "isCTerminal" );
//        assertInvoked( type, "isNTerminal" );
//        assertInvoked( type, "isUndetermined" );
//    }

//    public void testPrepareSequence9() throws Throwable {
//        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), 0, 100, "testRangeSeq" );
//        Mockingbird.enterRecordingMode();
//        Object sequenceStartingFrom = callPrivateMethod( "uk.ac.ebi.intact.model.Range", "getSequenceStartingFrom", new Class[]{String.class, int.class}, null, new Object[]{"1", new Integer( 0 )} );
//        Mockingbird.setReturnValue( sequenceStartingFrom, "1" );
//        Mockingbird.setReturnValue( Range.getMaxSequenceSize(), 35 );
//        Mockingbird.enterTestMode();
//        String result = range.prepareSequence( "1" );
//        assertEquals( "range.getSequence()", "1", range.getSequence() );
//        assertEquals( "result", "1", result );
//    }

//    public void testPrepareSequence10() throws Throwable {
//        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), 29, 100, "testRangeSeq" );
//        CvFuzzyType type = ( CvFuzzyType ) Mockingbird.getProxyObject( CvFuzzyType.class );
//        range.setFromCvFuzzyType( type );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( type.isCTerminal(), false );
//        Mockingbird.setReturnValue( type.isNTerminal(), false );
//        Mockingbird.setReturnValue( type.isUndetermined(), false );
//        Object sequenceStartingFrom = callPrivateMethod( "uk.ac.ebi.intact.model.Range", "getSequenceStartingFrom", new Class[]{String.class, int.class}, null, new Object[]{"Y", new Integer( 29 )} );
//        Mockingbird.setReturnValue( sequenceStartingFrom, null );
//        Mockingbird.enterTestMode();
//        String result = range.prepareSequence( "Y" );
//        assertNull( "result", result );
//        assertNull( "range.getSequence()", range.getSequence() );
//        assertInvoked( type, "isCTerminal" );
//        assertInvoked( type, "isNTerminal" );
//        assertInvoked( type, "isUndetermined" );
//    }

    public void testSetFeature() throws Throwable {
        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), 0, 100, "testRangeSeq" );
        Feature feature = ( Feature ) Mockingbird.getProxyObject( Feature.class );
        Mockingbird.enterTestMode();
        range.setFeature( feature );
        assertSame( "range.getFeature()", feature, range.getFeature() );
    }

    public void testSetFromCvFuzzyType() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 100, "testRangeSeq" );
        CvFuzzyType type = new CvFuzzyType( new Institution( "testRangeShortLabel1" ), "testRangeShortLabel" );
        range.setFromCvFuzzyType( type );
        assertSame( "range.getFromCvFuzzyType()", type, range.getFromCvFuzzyType() );
    }

    public void testSetFromIntervalEnd() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 100, "testRangeSeq" );
        range.setFromIntervalEnd( 100 );
        assertEquals( "range.getFromIntervalEnd()", 100, range.getFromIntervalEnd() );
    }

    public void testSetFromIntervalStart() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 100, "testRangeSeq" );
        range.setFromIntervalStart( 100 );
        assertEquals( "range.getFromIntervalStart()", 100, range.getFromIntervalStart() );
    }

    public void testSetLinked() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 100, "testRangeSeq" );
        range.setLinked( true );
        assertTrue( "range.isLinked()", range.isLinked() );
    }

    public void testSetMaxSequenceSize() throws Throwable {
        Range.setMaxSequenceSize( 100 );
        assertEquals( "Range.getMaxSequenceSize()", 100, Range.getMaxSequenceSize() );
    }

    public void testSetSequence() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 100, "testRangeSeq" );
        range.setSequence( "testRangeSequence" );
        assertEquals( "range.getSequence()", "testRangeSequence", range.getSequence() );
    }

    public void testSetToCvFuzzyType() throws Throwable {
        Institution owner = new Institution( "testRangeShortLabel" );
        Range range = new Range( owner, 0, 100, "testRangeSeq" );
        CvFuzzyType type = new CvFuzzyType( owner, "testRangeShortLabel" );
        range.setToCvFuzzyType( type );
        assertSame( "range.getToCvFuzzyType()", type, range.getToCvFuzzyType() );
    }

    public void testSetToIntervalEnd() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 1000, "testRangeSeq" );
        range.setToIntervalEnd( 100 );
        assertEquals( "range.getToIntervalEnd()", 100, range.getToIntervalEnd() );
    }

    public void testSetToIntervalStart() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 1, 10, 100, "testRangeSeq" );
        range.setToIntervalStart( 100 );
        assertEquals( "range.getToIntervalStart()", 100, range.getToIntervalStart() );
    }

    public void testSetUndetermined() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 100, "testRangeSeq" );
        range.setUndetermined( true );
        assertTrue( "range.isUndetermined()", range.isUndetermined() );
    }

    public void testSetUndetermined1() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 1, 10, 100, "testRangeSeq" );
        range.setUndetermined();
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
    }

    public void testSetUndetermined2() throws Throwable {
        CvFuzzyType type = new CvFuzzyType( new Institution( "testRangeShortLabel" ), "testRangeShortLabel" );
        Range range = new Range( new Institution( "testRangeShortLabel1" ), 0, 1, 1, 100, "testRangeSeq" );
        range.setFromCvFuzzyType( type );
        range.setToCvFuzzyType( type );
        range.setUndetermined();
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
    }

    public void testSetUndetermined3() throws Throwable {
        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), 100, 1000, "testRangeSeq" );
        range.setFromCvFuzzyType( ( CvFuzzyType ) Mockingbird.getProxyObject( CvFuzzyType.class ) );
        Mockingbird.enterTestMode();
        range.setUndetermined();
        assertFalse( "range.isUndetermined()", range.isUndetermined() );
    }

    public void testToString() throws Throwable {
        String result = new Range( new Institution( "testRangeShortLabel" ), 100, 100, 101, 1000, "testRangeSeq" ).toString();
        assertEquals( "result", "100-101", result );
    }

    public void testToString1() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel1" ), 0, 100, 100, 1000, "testRangeSeq" );
        range.setToCvFuzzyType( new CvFuzzyType( new Institution( "testRangeShortLabel" ), "testRangeShortLabel" ) );
        String result = range.toString();
        assertEquals( "result", "0-100", result );
    }

    public void testToString2() throws Throwable {
        Range range = new Range( new Institution( "testRangeShortLabel" ), 0, 1, 10, 100, "testRangeSeq" );
        range.setFromCvFuzzyType( new CvFuzzyType( null, "testRangeShortLabel" ) );
        String result = range.toString();
        assertEquals( "result", "0-10", result );
    }

    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        try {
            new Range( new Institution( "testRangeShortLabel" ), 100, 0, "testRangeSeq" );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "The 'from' and 'to' intervals cannot overlap!", ex.getMessage() );
            assertThrownBy( Range.class, ex );
        }
    }

    public void testConstructorThrowsIllegalArgumentException1() throws Throwable {
        try {
            new Range( new Institution( "testRangeShortLabel" ), 100, 1000, 1, 0, "testRangeSeq" );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "End of 'to' interval must be bigger than the start!", ex.getMessage() );
            assertThrownBy( Range.class, ex );
        }
    }

    public void testConstructorThrowsIllegalArgumentException2() throws Throwable {
        try {
            new Range( new Institution( "testRangeShortLabel" ), 0, 100, -1, 1000, "testRangeSeq" );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "The 'from' and 'to' intervals cannot overlap!", ex.getMessage() );
            assertThrownBy( Range.class, ex );
        }
    }

    public void testConstructorThrowsIllegalArgumentException3() throws Throwable {
        try {
            new Range( new Institution( "testRangeShortLabel" ), 100, 0, 1000, -1, "testRangeSeq" );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "End of 'from' interval must be bigger than the start!", ex.getMessage() );
            assertThrownBy( Range.class, ex );
        }
    }

//    public void testConstructorThrowsStringIndexOutOfBoundsException() throws Throwable {
//        Institution owner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
//        Mockingbird.enterRecordingMode();
//        Object sequenceStartingFrom = callPrivateMethod( "uk.ac.ebi.intact.model.Range",
//                                                         "getSequenceStartingFrom",
//                                                         new Class[]{String.class, int.class}, null, new Object[]{"1", new Integer( -1 )} );
//        Mockingbird.setException( sequenceStartingFrom,
//                                  ( Throwable ) Mockingbird.getProxyObject( StringIndexOutOfBoundsException.class ) );
//        Mockingbird.enterTestMode();
//        try {
//            new Range( owner, -1, 100, "1" );
//            fail( "Expected StringIndexOutOfBoundsException to be thrown" );
//        } catch ( StringIndexOutOfBoundsException ex ) {
//            assertTrue( "Test completed without Exception", true );
//        }
//    }

//    public void testConstructorThrowsStringIndexOutOfBoundsException1() throws Throwable {
//        Institution owner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
//        Mockingbird.enterRecordingMode();
//        Object sequenceStartingFrom = callPrivateMethod( "uk.ac.ebi.intact.model.Range", "getSequenceStartingFrom", new Class[]{String.class, int.class}, null, new Object[]{"1", new Integer( 1 )} );
//        Mockingbird.setException( sequenceStartingFrom, ( Throwable ) Mockingbird.getProxyObject( StringIndexOutOfBoundsException.class ) );
//        Mockingbird.enterTestMode();
//        try {
//            new Range( owner, 1, 2, 10, 100, "1" );
//            fail( "Expected StringIndexOutOfBoundsException to be thrown" );
//        } catch ( StringIndexOutOfBoundsException ex ) {
//            assertTrue( "Test completed without Exception", true );
//        }
//    }

    public void testGetRangeThrowsNullPointerException() throws Throwable {
        try {
            Range.getRange( null, 100, 1000 );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertNull( "ex.getMessage()", ex.getMessage() );
            assertThrownBy( CvFuzzyType.class, ex );
        }
    }

//    public void testPrepareSequenceThrowsStringIndexOutOfBoundsException() throws Throwable {
//        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), -100, 100, 171, 1000, "testRangeSeq" );
//        CvFuzzyType type = ( CvFuzzyType ) Mockingbird.getProxyObject( CvFuzzyType.class );
//        range.setFromCvFuzzyType( type );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( type.isCTerminal(), false );
//        Mockingbird.setReturnValue( type.isNTerminal(), false );
//        Mockingbird.setReturnValue( type.isUndetermined(), false );
//        Object sequenceStartingFrom = callPrivateMethod( "uk.ac.ebi.intact.model.Range", "getSequenceStartingFrom", new Class[]{String.class, int.class}, null, new Object[]{"undetermined", new Integer( -100 )} );
//        Mockingbird.setException( sequenceStartingFrom, ( Throwable ) Mockingbird.getProxyObject( StringIndexOutOfBoundsException.class ) );
//        Mockingbird.enterTestMode();
//        try {
//            range.prepareSequence( "undetermined" );
//            fail( "Expected StringIndexOutOfBoundsException to be thrown" );
//        } catch ( StringIndexOutOfBoundsException ex ) {
//            assertEquals( "range.getSequence()", "testRangeSeq", range.getSequence() );
//            assertInvoked( type, "isCTerminal" );
//            assertInvoked( type, "isNTerminal" );
//            assertInvoked( type, "isUndetermined" );
//        }
//    }

//    public void testPrepareSequenceThrowsStringIndexOutOfBoundsException1() throws Throwable {
//        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), 30, 100, "testRangeSeq" );
//        Mockingbird.enterRecordingMode();
//        Object sequenceStartingFrom = callPrivateMethod( "uk.ac.ebi.intact.model.Range", "getSequenceStartingFrom", new Class[]{String.class, int.class}, null, new Object[]{"Vq;bf\rxX|{*8$G\f7H8QqsFJ:S^N?\">\fqHWQ\\A(tQg8$B,&^Q^.ew6\\?*PdH^um9}S$7Q8I", new Integer( 30 )} );
//        Mockingbird.setException( sequenceStartingFrom, ( Throwable ) Mockingbird.getProxyObject( StringIndexOutOfBoundsException.class ) );
//        Mockingbird.enterTestMode();
//        try {
//            range.prepareSequence( "Vq;bf\rxX|{*8$G\f7H8QqsFJ:S^N?\">\fqHWQ\\A(tQg8$B,&^Q^.ew6\\?*PdH^um9}S$7Q8I" );
//            fail( "Expected StringIndexOutOfBoundsException to be thrown" );
//        } catch ( StringIndexOutOfBoundsException ex ) {
//            assertNull( "range.getSequence()", range.getSequence() );
//        }
//    }

//    public void testSetUndeterminedThrowsNullPointerException() throws Throwable {
//        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), 0, 100, "testRangeSeq" );
//        CvFuzzyType type = ( CvFuzzyType ) Mockingbird.getProxyObject( CvFuzzyType.class );
//        range.setFromCvFuzzyType( type );
//        range.setToCvFuzzyType( ( CvFuzzyType ) Mockingbird.getProxyObject( CvFuzzyType.class ) );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( type.getShortLabel(), null );
//        Mockingbird.enterTestMode();
//        try {
//            range.setUndetermined();
//            fail( "Expected NullPointerException to be thrown" );
//        } catch ( NullPointerException ex ) {
//            assertNull( "ex.getMessage()", ex.getMessage() );
//            assertThrownBy( Range.class, ex );
//            assertFalse( "range.isUndetermined()", range.isUndetermined() );
//            assertInvoked( type, "getShortLabel" );
//        }
//    }

//    public void testToStringThrowsNullPointerException() throws Throwable {
//        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), 0, 100, "testRangeSeq" );
//        CvFuzzyType type = ( CvFuzzyType ) Mockingbird.getProxyObject( CvFuzzyType.class );
//        range.setFromCvFuzzyType( type );
//        CvFuzzyType type2 = ( CvFuzzyType ) Mockingbird.getProxyObject( CvFuzzyType.class );
//        range.setToCvFuzzyType( type2 );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( type.getShortLabel(), "20CharactersXXXXXXXX" );
//        Mockingbird.setReturnValue( type2.getShortLabel(), null );
//        Mockingbird.enterTestMode();
//        try {
//            range.toString();
//            fail( "Expected NullPointerException to be thrown" );
//        } catch ( NullPointerException ex ) {
//            ex.printStackTrace( );
//            assertNull( "ex.getMessage()", ex.getMessage() );
//            assertThrownBy( CvFuzzyType.class, ex );
//            assertInvoked( type, "getShortLabel" );
//            assertInvoked( type2, "getShortLabel" );
//        }
//    }

//    public void testToStringThrowsNullPointerException1() throws Throwable {
//        Range range = new Range( ( Institution ) Mockingbird.getProxyObject( Institution.class ), 0, 100, "testRangeSeq" );
//        CvFuzzyType type = ( CvFuzzyType ) Mockingbird.getProxyObject( CvFuzzyType.class );
//        range.setFromCvFuzzyType( type );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( type.getShortLabel(), null );
//        Mockingbird.enterTestMode();
//        try {
//            range.toString();
//            fail( "Expected NullPointerException to be thrown" );
//        } catch ( NullPointerException ex ) {
//            assertNull( "ex.getMessage()", ex.getMessage() );
//            assertThrownBy( CvFuzzyType.class, ex );
//            assertInvoked( type, "getShortLabel" );
//        }
//    }
}

