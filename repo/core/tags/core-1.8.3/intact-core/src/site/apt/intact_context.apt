 -----
 Intact Context
 -----
 Bruno Aranda
 -----
 13 Sep 2006
 -----

IntactContext

  The {{{apidocs/uk/ac/ebi/intact/context/IntactContext.html}IntactContext}} is a central piece of the IntAct API. It is always initialized
  when an application that uses intact-core starts. It contains all the configuration information and the
  methods to access data.

  When an application starts, the <IntactContext> is initialized and all the values provided in the <<<web.xml>>>
  or <<<intact.properties>>> file are injected, so they are available in the application runtime.

  The <IntactContext> follows a <ThreadLocal> pattern, so there is only one instance per thred. To get the current
  instance you need this code:

+----------+
IntactContext ctx = IntactContext().getCurrentInstance();
+----------+

 The behaviour of the <IntactContext> is different if we are developing a web application or a standalone application:

 * <In a standalone application>, the <IntactContext> is initialized once, at the beginning.

 * <In a web application>, the <IntactContext> is initialized every request. To be able to do that, it is <mandatory>
 that the <<<web.xml>>> contains this filter:

 []

+----------+
<!-- Filter to init the IntactContext at the beginning of the request and close the
    transaction at the end -->
<filter>
    <filter-name>intactFilter</filter-name>
    <filter-class>uk.ac.ebi.intact.webapp.IntactSessionRequestFilter</filter-class>
</filter>

<filter-mapping>
    <filter-name>intactFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
+----------+

* IntactSession

 The <IntactContext> uses an {{{apidocs/uk/ac/ebi/intact/config/IntactSession.html}IntactSession}}, which
 contains all the attributes stored by the user in the application, as well as the initialization attributes
 (those provided in the <<<web.xml>>> as init-params or in the <<<intact.properties>>> file).

 In a web application, it is possible to save attributes using three different scopes:

 * Application: the attributes are available for all the application in the same server.

 * Session: the attributes are stored until the HTTP session expires.

 * Request: the attributes are stored only during the current request.

 []

 Although this separation exists for a standalone application, behind the scenes the attributes are maintained
 independently of the scope, until the application exits.

* RuntimeConfig

 The {{{apidocs/uk/ac/ebi/intact/context/RuntimeConfig.html}RuntimeConfig}} is available using:

+---------+
RuntimeConfig config = IntactContext.getCurrentInstance().getConfig();
+---------+

 It contains all the static application configuration, such the Institution being used or the prefix for the
 IntAct accession numbers in the database. Theoretically, it is a read-only access to all the application
 configuration.

* DataContext

 The {{{apidocs/uk/ac/ebi/intact/context/DataContext.html}DataContext}} contains the methods to access to
 the different DAO Factories. It also have the methods to control transactions, so it is possible to close the
 current transaction just calling to the specific method in this class. The DataContext is available through:

+----------+
DataContext dataContext = IntactContext.getCurrentInstance().getDataContext();
+----------+