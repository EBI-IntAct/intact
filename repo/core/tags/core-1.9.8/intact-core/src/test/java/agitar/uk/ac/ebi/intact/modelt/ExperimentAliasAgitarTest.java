/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:29:04
 * Time to generate: 00:56.386 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;


public class ExperimentAliasAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = ExperimentAlias.class;

//    public void testConstructor() throws Throwable {
//        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
//        Experiment experiment = ( Experiment ) Mockingbird.getProxyObject( Experiment.class );
//        CvAliasType cvAliasType = ( CvAliasType ) Mockingbird.getProxyObject( CvAliasType.class );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( experiment.getAc(), "testString" );
//        Mockingbird.enterTestMode();
//        ExperimentAlias experimentAlias = new ExperimentAlias( anOwner, experiment, cvAliasType, " X XXXX  XXX XXXXX XX$XXXXX$XXXX " );
//        assertEquals( "experimentAlias.getEvidences().size()", 0, experimentAlias.getEvidences().size() );
//        assertSame( "experimentAlias.getCvAliasType()", cvAliasType, experimentAlias.getCvAliasType() );
//        assertEquals( "experimentAlias.getName()", "X XXXX  XXX XXXXX XX$XXXXX$XXX", experimentAlias.getName() );
//        assertSame( "experimentAlias.getOwner()", anOwner, experimentAlias.getOwner() );
//        assertEquals( "experimentAlias.parentAc", "testString", getPrivateField( experimentAlias, "parentAc" ) );
//        assertInvoked( experiment, "getAc" );
//    }

//    public void testConstructor1() throws Throwable {
//        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
//        Experiment experiment = ( Experiment ) Mockingbird.getProxyObject( Experiment.class );
//        CvAliasType cvAliasType = ( CvAliasType ) Mockingbird.getProxyObject( CvAliasType.class );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( experiment.getAc(), null );
//        Mockingbird.enterTestMode();
//        ExperimentAlias experimentAlias = new ExperimentAlias( anOwner, experiment, cvAliasType, "29CharactersXXXXXXXXXXXXXXXXX" );
//        assertEquals( "experimentAlias.getEvidences().size()", 0, experimentAlias.getEvidences().size() );
//        assertSame( "experimentAlias.getCvAliasType()", cvAliasType, experimentAlias.getCvAliasType() );
//        assertEquals( "experimentAlias.getName()", "29CharactersXXXXXXXXXXXXXXXXX", experimentAlias.getName() );
//        assertSame( "experimentAlias.getOwner()", anOwner, experimentAlias.getOwner() );
//        assertNull( "experimentAlias.parentAc", getPrivateField( experimentAlias, "parentAc" ) );
//        assertInvoked( experiment, "getAc" );
//    }

//    public void testGetParent() throws Throwable {
//        Institution anOwner = new Institution( "testExpLabel" );
//        CvAliasType cvAliasType = new CvAliasType( new Institution( "testExpLabel1" ), "testExpLabel" );
//        Experiment experiment = ( Experiment ) Mockingbird.getProxyObject( Experiment.class );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( experiment.getAc(), null );
//        Mockingbird.enterTestMode();
//        ExperimentAlias experimentAlias = new ExperimentAlias( anOwner, experiment, cvAliasType, "testExperimentAliasName" );
//        AnnotatedObject parent = new CvComponentRole( new Institution( "testExpLabel2" ), "testExpLabel" );
//        experimentAlias.setParent( parent );
//        Mockingbird.enterTestMode();
//        AnnotatedObject result = experimentAlias.getParent();
//        assertSame( "result", parent, result );
//        assertInvoked( experiment, "getAc" );
//    }

//    public void testGetParent1() throws Throwable {
//        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
//        Experiment experiment = ( Experiment ) Mockingbird.getProxyObject( Experiment.class );
//        CvAliasType cvAliasType = ( CvAliasType ) Mockingbird.getProxyObject( CvAliasType.class );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( experiment.getAc(), "testString" );
//        Mockingbird.enterTestMode();
//        ExperimentAlias experimentAlias = new ExperimentAlias( anOwner, experiment, cvAliasType, "testExperimentAliasName" );
//        Mockingbird.enterTestMode();
//        AnnotatedObject result = experimentAlias.getParent();
//        assertNull( "result", result );
//        assertInvoked( experiment, "getAc" );
//    }

    public void testGetParentAc() throws Throwable {
        ExperimentAlias experimentAlias = new ExperimentAlias( new Institution( "testExpLabel2" ), Experiment.getShallowCopy( new Experiment( new Institution( "testExpLabel1" ), "testExpLabel", new BioSource( new Institution( "testExpLabel" ), "testExpLabel", "-92975" ) ) ), new CvAliasType( null, "testExpLabel" ), "testExperimentAliasName" );
        String result = experimentAlias.getParentAc();
        assertNull( "result", result );
        assertNull( "experimentAlias.getParent()", experimentAlias.getParent() );
        assertNull( "experimentAlias.parentAc", getPrivateField( experimentAlias, "parentAc" ) );
    }

//    public void testGetParentAc1() throws Throwable {
//        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
//        Experiment experiment = ( Experiment ) Mockingbird.getProxyObject( Experiment.class );
//        CvAliasType cvAliasType = ( CvAliasType ) Mockingbird.getProxyObject( CvAliasType.class );
//        Mockingbird.enterRecordingMode();
//        Mockingbird.setReturnValue( experiment.getAc(), "testString" );
//        Mockingbird.enterTestMode();
//        ExperimentAlias experimentAlias = new ExperimentAlias( anOwner, experiment, cvAliasType, "testExperimentAliasName" );
//        Mockingbird.enterTestMode();
//        String result = experimentAlias.getParentAc();
//        assertEquals( "result", "testString", result );
//        assertNull( "experimentAlias.getParent()", experimentAlias.getParent() );
//        assertEquals( "experimentAlias.parentAc", "testString", getPrivateField( experimentAlias, "parentAc" ) );
//        assertInvoked( experiment, "getAc" );
//    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        Institution owner = new Institution( "testExpLabel" );
        try {
            new ExperimentAlias( owner, null, new CvAliasType( owner, "testExpLabel" ), "testExperimentAliasName" );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertNull( "ex.getMessage()", ex.getMessage() );
            assertThrownBy( Alias.class, ex );
        }
    }
}

