/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:29:12
 * Time to generate: 00:14.871 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;

public class SearchItemPkAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = SearchItemPk.class;

    public void testConstructor() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testSearchItemPkAc", "testSearchItemPkValue", "testSearchItemPkObjClass", "testSearchItemPkType" );
        assertEquals( "searchItemPk.getValue()", "testSearchItemPkValue", searchItemPk.getValue() );
        assertEquals( "searchItemPk.getObjClass()", "testSearchItemPkObjClass", searchItemPk.getObjClass() );
        assertEquals( "searchItemPk.getType()", "testSearchItemPkType", searchItemPk.getType() );
        assertEquals( "searchItemPk.getAc()", "testSearchItemPkAc", searchItemPk.getAc() );
    }

    public void testConstructor1() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk();
        assertNull( "searchItemPk.getAc()", searchItemPk.getAc() );
    }

    public void testEquals() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testString", "testString", "testString", null );
        boolean result = searchItemPk.equals( new SearchItemPk( "testString", "testString", "testString", null ) );
        assertTrue( "result", result );
    }

    public void testEquals1() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testString", "testString", "testString", "testString" );
        boolean result = searchItemPk.equals( new SearchItemPk( "testString", "testString", "testString", "testString" ) );
        assertTrue( "result", result );
    }

    public void testEquals2() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( null, "testSearchItemPkValue", null, "testSearchItemPkType" );
        boolean result = searchItemPk.equals( new SearchItemPk( null, "testSearchItemPkValue1", "testString", "testSearchItemPkType1" ) );
        assertFalse( "result", result );
    }

    public void testEquals3() throws Throwable {
        SearchItemPk o = new SearchItemPk( "testString", "testSearchItemPkValue", null, "testString" );
        boolean result = new SearchItemPk( "testString", null, null, "testString" ).equals( o );
        assertFalse( "result", result );
    }

    public void testEquals4() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testString", "testSearchItemPkValue", "testString", null );
        boolean result = searchItemPk.equals( new SearchItemPk( "testString", "testSearchItemPkValue1", "testString", null ) );
        assertFalse( "result", result );
    }

    public void testEquals5() throws Throwable {
        SearchItemPk o = new SearchItemPk( "testSearchItemPkAc", "testSearchItemPkValue", "testSearchItemPkObjClass", "testSearchItemPkType" );
        boolean result = o.equals( o );
        assertTrue( "result", result );
    }

    public void testEquals6() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testString", null, "testString", null );
        boolean result = searchItemPk.equals( new SearchItemPk( "testString", "testString", "testString", null ) );
        assertFalse( "result", result );
    }

    public void testEquals7() throws Throwable {
        boolean result = new SearchItemPk( "testSearchItemPkAc", "testSearchItemPkValue", "testSearchItemPkObjClass", "testSearchItemPkType" ).equals( null );
        assertFalse( "result", result );
    }

    public void testEquals8() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testString", "testSearchItemPkValue", "testSearchItemPkObjClass", "testSearchItemPkType" );
        boolean result = searchItemPk.equals( new SearchItemPk( "testString", "testSearchItemPkValue1", "testSearchItemPkObjClass1", "testSearchItemPkType1" ) );
        assertFalse( "result", result );
    }

    public void testEquals9() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testString", "testSearchItemPkValue", "testString", "testString" );
        boolean result = searchItemPk.equals( new SearchItemPk( "testString", "testSearchItemPkValue1", "testString", "testString" ) );
        assertFalse( "result", result );
    }

    public void testEquals10() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( null, "testSearchItemPkValue", "testString", "testString" );
        boolean result = searchItemPk.equals( new SearchItemPk( null, "testSearchItemPkValue1", "testString", "testString" ) );
        assertFalse( "result", result );
    }

    public void testEquals11() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "tRZnZ\n'(", null, "testString", "testString" );
        boolean result = searchItemPk.equals( new SearchItemPk( "tRZnZ\n'(", "testString", "testString", "testString" ) );
        assertFalse( "result", result );
    }

    public void testEquals12() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "5NWEnXhg:qrzF1PDNs}`Ph?9Ax ", "testSearchItemPkValue", null, "testSearchItemPkType" );
        boolean result = searchItemPk.equals( new SearchItemPk( "5NWEnXhg:qrzF1PDNs}`Ph?9Ax ", "testSearchItemPkValue1", null, "testSearchItemPkType1" ) );
        assertFalse( "result", result );
    }

    public void testEquals13() throws Throwable {
        boolean result = new SearchItemPk( null, "testSearchItemPkValue", "testSearchItemPkObjClass", "testSearchItemPkType" ).equals( new SearchItemPk( "testString", "testSearchItemPkValue1", "testSearchItemPkObjClass1", "testSearchItemPkType1" ) );
        assertFalse( "result", result );
    }

    public void testEquals14() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testString", "testSearchItemPkValue", "testString", "testSearchItemPkType" );
        boolean result = searchItemPk.equals( new SearchItemPk( "testString", "testSearchItemPkValue1", "testString", "testSearchItemPkType1" ) );
        assertFalse( "result", result );
    }

    public void testEquals15() throws Throwable {
        boolean result = new SearchItemPk( null, "testSearchItemPkValue", "testSearchItemPkObjClass", "testSearchItemPkType" ).equals( new SearchItemPk() );
        assertFalse( "result", result );
    }

    public void testEquals16() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testString", "testString", null, "hj^h=;:DMN+Y~V-#n?qi`})%s!K)\t2D" );
        boolean result = searchItemPk.equals( new SearchItemPk( "testString", "testString", null, "hj^h=;:DMN+Y~V-#n?qi`})%s!K)\t2D" ) );
        assertTrue( "result", result );
    }

    public void testEquals17() throws Throwable {
        boolean result = new SearchItemPk( "testSearchItemPkAc", "testSearchItemPkValue", "testSearchItemPkObjClass", "testSearchItemPkType" ).equals( new SearchItemPk() );
        assertFalse( "result", result );
    }

    public void testEquals18() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testString", "testSearchItemPkValue", null, "testSearchItemPkType" );
        boolean result = searchItemPk.equals( new SearchItemPk( "testString", "testSearchItemPkValue1", "testString", "testSearchItemPkType1" ) );
        assertFalse( "result", result );
    }

    public void testEquals19() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "*k#Wk\\zo$\"%AUC|L^\r/]=^R:\t;yZ^B\r", "testSearchItemPkValue", null, "testString" );
        boolean result = searchItemPk.equals( new SearchItemPk( "*k#Wk\\zo$\"%AUC|L^\r/]=^R:\t;yZ^B\r", "testSearchItemPkValue1", null, "testString" ) );
        assertFalse( "result", result );
    }

    public void testEquals20() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "jW{\fH~ao@z", null, "testString", null );
        boolean result = searchItemPk.equals( new SearchItemPk( "jW{\fH~ao@z", null, "testString", null ) );
        assertTrue( "result", result );
    }

    public void testEquals21() throws Throwable {
        boolean result = new SearchItemPk( null, "testSearchItemPkValue", null, "testSearchItemPkType" ).equals( new SearchItemPk() );
        assertFalse( "result", result );
    }

    public void testEquals22() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testString", "testSearchItemPkValue", "testString", null );
        boolean result = searchItemPk.equals( new SearchItemPk( "testString", "testSearchItemPkValue1", "testString", "testString" ) );
        assertFalse( "result", result );
    }

    public void testEquals23() throws Throwable {
        boolean result = new SearchItemPk( "testSearchItemPkAc", "testSearchItemPkValue", "testSearchItemPkObjClass", "testSearchItemPkType" ).equals( "testString" );
        assertFalse( "result", result );
    }

    public void testHashCode() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testSearchItemPkAc", "testSearchItemPkValue", "testSearchItemPkObjClass", "testSearchItemPkType" );
        int result = searchItemPk.hashCode();
        assertEquals( "result", 1246545752, result );
        assertEquals( "searchItemPk.getValue()", "testSearchItemPkValue", searchItemPk.getValue() );
        assertEquals( "searchItemPk.getObjClass()", "testSearchItemPkObjClass", searchItemPk.getObjClass() );
        assertEquals( "searchItemPk.getType()", "testSearchItemPkType", searchItemPk.getType() );
        assertEquals( "searchItemPk.getAc()", "testSearchItemPkAc", searchItemPk.getAc() );
    }

    public void testHashCode1() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk();
        searchItemPk.setValue( "testSearchItemPkValue" );
        searchItemPk.setObjClass( "testSearchItemPkObjClass" );
        int result = searchItemPk.hashCode();
        assertEquals( "result", -1037005184, result );
        assertEquals( "searchItemPk.getValue()", "testSearchItemPkValue", searchItemPk.getValue() );
        assertEquals( "searchItemPk.getObjClass()", "testSearchItemPkObjClass", searchItemPk.getObjClass() );
        assertNull( "searchItemPk.getType()", searchItemPk.getType() );
        assertNull( "searchItemPk.getAc()", searchItemPk.getAc() );
    }

    public void testHashCode2() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testSearchItemPkAc", null, "testSearchItemPkObjClass", null );
        int result = searchItemPk.hashCode();
        assertEquals( "result", 315055085, result );
        assertNull( "searchItemPk.getValue()", searchItemPk.getValue() );
        assertEquals( "searchItemPk.getObjClass()", "testSearchItemPkObjClass", searchItemPk.getObjClass() );
        assertNull( "searchItemPk.getType()", searchItemPk.getType() );
        assertEquals( "searchItemPk.getAc()", "testSearchItemPkAc", searchItemPk.getAc() );
    }

    public void testHashCode3() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testSearchItemPkAc", "testSearchItemPkValue", null, "testSearchItemPkType" );
        int result = searchItemPk.hashCode();
        assertEquals( "result", 190318337, result );
        assertEquals( "searchItemPk.getValue()", "testSearchItemPkValue", searchItemPk.getValue() );
        assertNull( "searchItemPk.getObjClass()", searchItemPk.getObjClass() );
        assertEquals( "searchItemPk.getType()", "testSearchItemPkType", searchItemPk.getType() );
        assertEquals( "searchItemPk.getAc()", "testSearchItemPkAc", searchItemPk.getAc() );
    }

    public void testHashCode4() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( null, "testSearchItemPkValue", "testSearchItemPkObjClass", "testSearchItemPkType" );
        int result = searchItemPk.hashCode();
        assertEquals( "result", 1987718082, result );
        assertEquals( "searchItemPk.getValue()", "testSearchItemPkValue", searchItemPk.getValue() );
        assertEquals( "searchItemPk.getObjClass()", "testSearchItemPkObjClass", searchItemPk.getObjClass() );
        assertEquals( "searchItemPk.getType()", "testSearchItemPkType", searchItemPk.getType() );
        assertNull( "searchItemPk.getAc()", searchItemPk.getAc() );
    }

    public void testHashCode5() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( null, "testSearchItemPkValue", null, "testSearchItemPkType" );
        int result = searchItemPk.hashCode();
        assertEquals( "result", 931490667, result );
        assertEquals( "searchItemPk.getValue()", "testSearchItemPkValue", searchItemPk.getValue() );
        assertNull( "searchItemPk.getObjClass()", searchItemPk.getObjClass() );
        assertEquals( "searchItemPk.getType()", "testSearchItemPkType", searchItemPk.getType() );
        assertNull( "searchItemPk.getAc()", searchItemPk.getAc() );
    }

    public void testHashCode6() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testSearchItemPkAc", "testSearchItemPkValue", null, null );
        int result = searchItemPk.hashCode();
        assertEquals( "result", 1460562367, result );
        assertEquals( "searchItemPk.getValue()", "testSearchItemPkValue", searchItemPk.getValue() );
        assertNull( "searchItemPk.getObjClass()", searchItemPk.getObjClass() );
        assertNull( "searchItemPk.getType()", searchItemPk.getType() );
        assertEquals( "searchItemPk.getAc()", "testSearchItemPkAc", searchItemPk.getAc() );
    }

    public void testHashCode7() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testSearchItemPkAc", null, null, "testSearchItemPkType" );
        int result = searchItemPk.hashCode();
        assertEquals( "result", -2011416360, result );
        assertNull( "searchItemPk.getValue()", searchItemPk.getValue() );
        assertNull( "searchItemPk.getObjClass()", searchItemPk.getObjClass() );
        assertEquals( "searchItemPk.getType()", "testSearchItemPkType", searchItemPk.getType() );
        assertEquals( "searchItemPk.getAc()", "testSearchItemPkAc", searchItemPk.getAc() );
    }

    public void testHashCode8() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( null, null, "testSearchItemPkObjClass", "testSearchItemPkType" );
        int result = searchItemPk.hashCode();
        assertEquals( "result", -214016615, result );
        assertNull( "searchItemPk.getValue()", searchItemPk.getValue() );
        assertEquals( "searchItemPk.getObjClass()", "testSearchItemPkObjClass", searchItemPk.getObjClass() );
        assertEquals( "searchItemPk.getType()", "testSearchItemPkType", searchItemPk.getType() );
        assertNull( "searchItemPk.getAc()", searchItemPk.getAc() );
    }

    public void testHashCode9() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testSearchItemPkAc", null, "testSearchItemPkObjClass", "testSearchItemPkType" );
        int result = searchItemPk.hashCode();
        assertEquals( "result", -955188945, result );
        assertNull( "searchItemPk.getValue()", searchItemPk.getValue() );
        assertEquals( "searchItemPk.getObjClass()", "testSearchItemPkObjClass", searchItemPk.getObjClass() );
        assertEquals( "searchItemPk.getType()", "testSearchItemPkType", searchItemPk.getType() );
        assertEquals( "searchItemPk.getAc()", "testSearchItemPkAc", searchItemPk.getAc() );
    }

    public void testHashCode10() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk( "testSearchItemPkAc", "testSearchItemPkValue", "testSearchItemPkObjClass", null );
        int result = searchItemPk.hashCode();
        assertEquals( "result", -1778177514, result );
        assertEquals( "searchItemPk.getValue()", "testSearchItemPkValue", searchItemPk.getValue() );
        assertEquals( "searchItemPk.getObjClass()", "testSearchItemPkObjClass", searchItemPk.getObjClass() );
        assertNull( "searchItemPk.getType()", searchItemPk.getType() );
        assertEquals( "searchItemPk.getAc()", "testSearchItemPkAc", searchItemPk.getAc() );
    }

    public void testSetAc() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk();
        searchItemPk.setAc( "testSearchItemPkAc" );
        assertEquals( "searchItemPk.getAc()", "testSearchItemPkAc", searchItemPk.getAc() );
    }

    public void testSetObjClass() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk();
        searchItemPk.setObjClass( "testSearchItemPkObjClass" );
        assertEquals( "searchItemPk.getObjClass()", "testSearchItemPkObjClass", searchItemPk.getObjClass() );
    }

    public void testSetType() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk();
        searchItemPk.setType( "testSearchItemPkType" );
        assertEquals( "searchItemPk.getType()", "testSearchItemPkType", searchItemPk.getType() );
    }

    public void testSetValue() throws Throwable {
        SearchItemPk searchItemPk = new SearchItemPk();
        searchItemPk.setValue( "testSearchItemPkValue" );
        assertEquals( "searchItemPk.getValue()", "testSearchItemPkValue", searchItemPk.getValue() );
    }

    public void testToString() throws Throwable {
        String result = new SearchItemPk( "testSearchItemPkAc", "testSearchItemPkValue", "testSearchItemPkObjClass", "testSearchItemPkType" ).toString();
        assertEquals( "result", "SearchItemPk{ac='testSearchItemPkAc', value='testSearchItemPkValue', objClass='testSearchItemPkObjClass', type='testSearchItemPkType'}", result );
    }
}

