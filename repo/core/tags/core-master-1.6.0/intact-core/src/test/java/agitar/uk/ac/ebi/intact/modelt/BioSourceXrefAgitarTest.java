/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:26:24
 * Time to generate: 00:52.668 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt;

import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;


public class BioSourceXrefAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = BioSourceXref.class;

    public void testConstructor() throws Throwable {
        Institution anOwner = new Institution( "testBioSourceXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testBioSourceXrefShortLabel" ), "testBioSourceXrefShortLabel" );
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel2" ), "testBioSourceXrefShortLabel" );
        BioSourceXref bioSourceXref = new BioSourceXref( anOwner, aDatabase, " XXXXXX\t\n  XXXXXXXXXXXXXXX X\rX  ", aCvXrefQualifier );
        assertEquals( "bioSourceXref.getPrimaryId()", "XXXXXX\t\n  XXXXXXXXXXXXXXX X\rX", bioSourceXref.getPrimaryId() );
        assertEquals( "bioSourceXref.getEvidences().size()", 0, bioSourceXref.getEvidences().size() );
        assertSame( "bioSourceXref.getCvDatabase()", aDatabase, bioSourceXref.getCvDatabase() );
        assertSame( "bioSourceXref.getCvXrefQualifier()", aCvXrefQualifier, bioSourceXref.getCvXrefQualifier() );
        assertSame( "bioSourceXref.getOwner()", anOwner, bioSourceXref.getOwner() );
    }

    public void testConstructor1() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel" ), "testBioSourceXrefShortLabel" );
        Institution anOwner = new Institution( "testBioSourceXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testBioSourceXrefShortLabel2" ), "testBioSourceXrefShortLabel" );
        BioSourceXref bioSourceXref = new BioSourceXref( anOwner, aDatabase, "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\t\r", aCvXrefQualifier );
        assertEquals( "bioSourceXref.getPrimaryId()", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", bioSourceXref.getPrimaryId() );
        assertEquals( "bioSourceXref.getEvidences().size()", 0, bioSourceXref.getEvidences().size() );
        assertSame( "bioSourceXref.getCvDatabase()", aDatabase, bioSourceXref.getCvDatabase() );
        assertSame( "bioSourceXref.getCvXrefQualifier()", aCvXrefQualifier, bioSourceXref.getCvXrefQualifier() );
        assertSame( "bioSourceXref.getOwner()", anOwner, bioSourceXref.getOwner() );
    }

    public void testConstructor2() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel" ), "testBioSourceXrefShortLabel" );
        Institution anOwner = new Institution( "testBioSourceXrefShortLabel2" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testBioSourceXrefShortLabel1" ), "testBioSourceXrefShortLabel" );
        BioSourceXref bioSourceXref = new BioSourceXref( anOwner, aDatabase, "\rXXXXXXXXXXXXXX##XXXXXX XXXX XX", aCvXrefQualifier );
        assertEquals( "bioSourceXref.getPrimaryId()", "XXXXXXXXXXXXXX##XXXXXX XXXX XX", bioSourceXref.getPrimaryId() );
        assertEquals( "bioSourceXref.getEvidences().size()", 0, bioSourceXref.getEvidences().size() );
        assertSame( "bioSourceXref.getCvDatabase()", aDatabase, bioSourceXref.getCvDatabase() );
        assertSame( "bioSourceXref.getCvXrefQualifier()", aCvXrefQualifier, bioSourceXref.getCvXrefQualifier() );
        assertSame( "bioSourceXref.getOwner()", anOwner, bioSourceXref.getOwner() );
    }

    public void testConstructor3() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel1" ), "testBioSourceXrefShortLabel" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testBioSourceXrefShortLabel" ), "testBioSourceXrefShortLabel" );
        Institution anOwner = new Institution( "testBioSourceXrefShortLabel2" );
        BioSourceXref bioSourceXref = new BioSourceXref( anOwner, aDatabase, " X", aCvXrefQualifier );
        assertEquals( "bioSourceXref.getPrimaryId()", "X", bioSourceXref.getPrimaryId() );
        assertEquals( "bioSourceXref.getEvidences().size()", 0, bioSourceXref.getEvidences().size() );
        assertSame( "bioSourceXref.getCvDatabase()", aDatabase, bioSourceXref.getCvDatabase() );
        assertSame( "bioSourceXref.getCvXrefQualifier()", aCvXrefQualifier, bioSourceXref.getCvXrefQualifier() );
        assertSame( "bioSourceXref.getOwner()", anOwner, bioSourceXref.getOwner() );
    }

    public void testConstructor4() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel" ), "testBioSourceXrefShortLabel" );
        Institution anOwner = new Institution( "testBioSourceXrefShortLabel2" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testBioSourceXrefShortLabel1" ), "testBioSourceXrefShortLabel" );
        BioSourceXref bioSourceXref = new BioSourceXref( anOwner, aDatabase, "1", "testBioSourceXrefASecondaryId", "testBioSourceXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "bioSourceXref.getPrimaryId()", "1", bioSourceXref.getPrimaryId() );
        assertEquals( "bioSourceXref.getEvidences().size()", 0, bioSourceXref.getEvidences().size() );
        assertEquals( "bioSourceXref.getDbRelease()", "testBioSourceXrefADatabaseRelease", bioSourceXref.getDbRelease() );
        assertSame( "bioSourceXref.getCvXrefQualifier()", aCvXrefQualifier, bioSourceXref.getCvXrefQualifier() );
        assertSame( "bioSourceXref.getCvDatabase()", aDatabase, bioSourceXref.getCvDatabase() );
        assertSame( "bioSourceXref.getOwner()", anOwner, bioSourceXref.getOwner() );
        assertEquals( "bioSourceXref.getSecondaryId()", "testBioSourceXrefASecondaryId", bioSourceXref.getSecondaryId() );
    }

    public void testConstructor5() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel" ), "testBioSourceXrefShortLabel" );
        Institution anOwner = new Institution( "testBioSourceXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testBioSourceXrefShortLabel2" ), "testBioSourceXrefShortLabel" );
        BioSourceXref bioSourceXref = new BioSourceXref( anOwner, aDatabase, "\tXXXX XXXXXXXXXXXXXX\tXXXXXXXXXXX", "testBioSourceXrefASecondaryId1", "testBioSourceXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "bioSourceXref.getPrimaryId()", "XXXX XXXXXXXXXXXXXX\tXXXXXXXXXX", bioSourceXref.getPrimaryId() );
        assertEquals( "bioSourceXref.getEvidences().size()", 0, bioSourceXref.getEvidences().size() );
        assertEquals( "bioSourceXref.getDbRelease()", "testBioSourceXrefADatabaseRelease", bioSourceXref.getDbRelease() );
        assertSame( "bioSourceXref.getCvXrefQualifier()", aCvXrefQualifier, bioSourceXref.getCvXrefQualifier() );
        assertSame( "bioSourceXref.getCvDatabase()", aDatabase, bioSourceXref.getCvDatabase() );
        assertSame( "bioSourceXref.getOwner()", anOwner, bioSourceXref.getOwner() );
        assertEquals( "bioSourceXref.getSecondaryId()", "testBioSourceXrefASecondaryId1", bioSourceXref.getSecondaryId() );
    }

    public void testGetParent() throws Throwable {
        Institution owner = new Institution( "testBioSourceXrefShortLabel" );
        AnnotatedObject result = new BioSourceXref( owner, new CvDatabase( owner, "testBioSourceXrefShortLabel" ), "testBioSourceXrefAPrimaryId", "testBioSourceXrefASecondaryId", "testBioSourceXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel1" ), "testBioSourceXrefShortLabel" ) ).getParent();
        assertNull( "result", result );
    }

    public void testGetParent1() throws Throwable {
        BioSourceXref bioSourceXref = new BioSourceXref( new Institution( "testBioSourceXrefShortLabel2" ), new CvDatabase( new Institution( "testBioSourceXrefShortLabel1" ), "testBioSourceXrefShortLabel" ), "testBioSourceXrefAPrimaryId", "testBioSourceXrefASecondaryId", "testBioSourceXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel" ), "testBioSourceXrefShortLabel" ) );
        AnnotatedObject parent = new CvGoNode();
        bioSourceXref.setParent( parent );
        AnnotatedObject result = bioSourceXref.getParent();
        assertSame( "result", parent, result );
    }

    public void testGetParentAc() throws Throwable {
        Institution owner = new Institution( "testBioSourceXrefShortLabel" );
        BioSourceXref bioSourceXref = new BioSourceXref( owner, new CvDatabase( owner, "testBioSourceXrefShortLabel" ), "testBioSourceXrefAPrimaryId", new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel1" ), "testBioSourceXrefShortLabel" ) );
        String result = bioSourceXref.getParentAc();
        assertNull( "result", result );
        assertNull( "bioSourceXref.parentAc", getPrivateField( bioSourceXref, "parentAc" ) );
        assertNull( "bioSourceXref.getParent()", bioSourceXref.getParent() );
    }

    public void testGetParentAc1() throws Throwable {
        BioSourceXref bioSourceXref = new BioSourceXref( new Institution( "testBioSourceXrefShortLabel2" ), new CvDatabase( new Institution( "testBioSourceXrefShortLabel1" ), "testBioSourceXrefShortLabel" ), "testBioSourceXrefAPrimaryId", new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel" ), "testBioSourceXrefShortLabel" ) );
        bioSourceXref.setParentAc( "testBioSourceXrefParentAc" );
        String result = bioSourceXref.getParentAc();
        assertEquals( "result", "testBioSourceXrefParentAc", result );
        assertEquals( "bioSourceXref.parentAc", "testBioSourceXrefParentAc", getPrivateField( bioSourceXref, "parentAc" ) );
        assertNull( "bioSourceXref.getParent()", bioSourceXref.getParent() );
    }

    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        Institution owner = new Institution( "testBioSourceXrefShortLabel" );
        CvDatabase aDatabase = new CvDatabase( owner, "testBioSourceXrefShortLabel" );
        try {
            new BioSourceXref( owner, aDatabase, "", new CvXrefQualifier( owner, "testBioSourceXrefShortLabel" ) );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty primaryId for an Xref.", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsIllegalArgumentException1() throws Throwable {
        try {
            new BioSourceXref( new Institution( "testBioSourceXrefShortLabel2" ), new CvDatabase( new Institution( "testBioSourceXrefShortLabel1" ), "testBioSourceXrefShortLabel" ), "", "testBioSourceXrefASecondaryId", "testBioSourceXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel" ), "testBioSourceXrefShortLabel" ) );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty primaryId for an Xref.", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        Institution owner = new Institution( "testBioSourceXrefShortLabel" );
        try {
            new BioSourceXref( owner, new CvDatabase( null, "testBioSourceXrefShortLabel" ), null, new CvXrefQualifier( owner, "testBioSourceXrefShortLabel" ) );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Xref must have a primary ID!", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException1() throws Throwable {
        try {
            new BioSourceXref( new Institution( "testBioSourceXrefShortLabel2" ), new CvDatabase( new Institution( "testBioSourceXrefShortLabel" ), "testBioSourceXrefShortLabel" ), null, "testBioSourceXrefASecondaryId", "testBioSourceXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testBioSourceXrefShortLabel1" ), "testBioSourceXrefShortLabel" ) );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Xref must have a primary ID!", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }
}

