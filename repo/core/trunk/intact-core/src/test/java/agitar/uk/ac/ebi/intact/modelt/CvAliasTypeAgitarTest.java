/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:25:40
 * Time to generate: 00:08.631 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt;

import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;
import uk.ac.ebi.intact.model.util.AnnotatedObjectUtils;

public class CvAliasTypeAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = CvAliasType.class;

    public void testConstructor() throws Throwable {
        Institution owner = new Institution( "testCvAliasTypeShortLabel" );
        CvAliasType cvAliasType = new CvAliasType( owner, "testCvAliasTypeShortLabel" );
        assertEquals( "cvAliasType.xrefs.size()", 0, cvAliasType.xrefs.size() );
        assertEquals( "cvAliasType.getAliases().size()", 0, cvAliasType.getAliases().size() );
        assertEquals( "cvAliasType.getEvidences().size()", 0, cvAliasType.getEvidences().size() );
        assertEquals( "cvAliasType.shortLabel", "testCvAliasTypeShort", cvAliasType.getShortLabel() );
        assertEquals( "cvAliasType.annotations.size()", 0, cvAliasType.annotations.size() );
        assertSame( "cvAliasType.getOwner()", owner, cvAliasType.getOwner() );
        assertEquals( "cvAliasType.references.size()", 0, cvAliasType.references.size() );
    }

    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        try {
            new CvAliasType( new Institution( "testCvAliasTypeShortLabel" ), "" );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty short label", ex.getMessage() );
            assertThrownBy( AnnotatedObjectUtils.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new CvAliasType( new Institution( "testCvAliasTypeShortLabel" ), null );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non null short label", ex.getMessage() );
            assertThrownBy( AnnotatedObjectUtils.class, ex );
        }
    }
}

