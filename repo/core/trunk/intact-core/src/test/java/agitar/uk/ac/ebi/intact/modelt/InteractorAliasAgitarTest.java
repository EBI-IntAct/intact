/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:31:19
 * Time to generate: 00:27.067 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;


import com.agitar.lib.junit.AgitarTestCase;

import java.util.ArrayList;

public class InteractorAliasAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = InteractorAlias.class;

    public void testConstructor() throws Throwable {
        Institution owner = new Institution( "testInteractorAliasShortLabel1" );
        Interactor interactor = new NucleicAcidImpl( owner, new BioSource( new Institution( "testInteractorAliasShortLabel" ), "testInteractorAliasShortLabel", "-100000" ), "testInteractorAliasShortLabel", new CvInteractorType( new Institution( "testInteractorAliasShortLabel2" ), "testInteractorAliasShortLabel" ) );
        CvAliasType cvAliasType = new CvAliasType( owner, "testInteractorAliasShortLabel" );
        Institution anOwner = new Institution( "testInteractorAlias\rShortLabel" );
        InteractorAlias interactorAlias = new InteractorAlias( anOwner, interactor, cvAliasType, "\r\t\nXXXX XXXXXXXX\nXXXXXXXXX XXXXX$X" );
        assertEquals( "interactorAlias.getEvidences().size()", 0, interactorAlias.getEvidences().size() );
        assertSame( "interactorAlias.getCvAliasType()", cvAliasType, interactorAlias.getCvAliasType() );
        assertEquals( "interactorAlias.getName()", "XXXX XXXXXXXX\nXXXXXXXXX XXXXX$", interactorAlias.getName() );
        assertSame( "interactorAlias.getOwner()", anOwner, interactorAlias.getOwner() );
        assertNull( "interactorAlias.parentAc", getPrivateField( interactorAlias, "parentAc" ) );
    }

    public void testConstructor1() throws Throwable {
        Institution anOwner = new Institution( "testInteractorAliasShortLabel" );
        CvAliasType cvAliasType = new CvAliasType( new Institution( "testInteractorAliasShortLabel1" ), "testInteractorAliasShortLabel" );
        InteractorAlias interactorAlias = new InteractorAlias( anOwner, new Complex(), cvAliasType, "\t\n  XX XXX  XXXX XXXX X XXXXX X X   " );
        assertEquals( "interactorAlias.getEvidences().size()", 0, interactorAlias.getEvidences().size() );
        assertSame( "interactorAlias.getCvAliasType()", cvAliasType, interactorAlias.getCvAliasType() );
        assertEquals( "interactorAlias.getName()", "XX XXX  XXXX XXXX X XXXXX X X", interactorAlias.getName() );
        assertSame( "interactorAlias.getOwner()", anOwner, interactorAlias.getOwner() );
        assertNull( "interactorAlias.parentAc", getPrivateField( interactorAlias, "parentAc" ) );
    }

    public void testConstructor2() throws Throwable {
        Institution owner = new Institution( "testInteractorAliasShortLabel" );
        Institution anOwner = new Institution( "testInteractorAliasShortLabel1" );
        CvAliasType cvAliasType = new CvAliasType( new Institution( "testInteractorAliasShortLabel2" ), "testInteractorAliasShortLabel" );
        InteractorAlias interactorAlias = new InteractorAlias( anOwner, new SmallMoleculeImpl( "testInteractorAliasShortLabel", owner, new CvInteractorType( owner, "testInteractorAliasShortLabel" ) ), cvAliasType, " $XXXXXXXXXXX\nXXXXXXXXXXXXXXXXX\n " );
        assertEquals( "interactorAlias.getEvidences().size()", 0, interactorAlias.getEvidences().size() );
        assertSame( "interactorAlias.getCvAliasType()", cvAliasType, interactorAlias.getCvAliasType() );
        assertEquals( "interactorAlias.getName()", "$XXXXXXXXXXX\nXXXXXXXXXXXXXXXXX", interactorAlias.getName() );
        assertSame( "interactorAlias.getOwner()", anOwner, interactorAlias.getOwner() );
        assertNull( "interactorAlias.parentAc", getPrivateField( interactorAlias, "parentAc" ) );
    }

    public void testGetParent() throws Throwable {
        AnnotatedObject result = new InteractorAlias( new Institution( "testInteractorAliasShortLabel1" ), new Complex(), new CvAliasType( new Institution( "testInteractorAliasShortLabel" ), "testInteractorAliasShortLabel" ), "testInteractorAliasName" ).getParent();
        assertNull( "result", result );
    }

    public void testGetParent1() throws Throwable {
        InteractorAlias interactorAlias = new InteractorAlias( new Institution( "testInteractorAlias\rShortLabel" ), new InteractionImpl( new ArrayList(), ( CvInteractionType ) null, new CvInteractorType( new Institution( "testInteractorAliasShortLabel1" ), "testInteractorAliasShortLabel" ), "testInteractorAliasShortLabel", new Institution( "testInteractorAliasShortLabel2" ) ), new CvAliasType( new Institution( "testInteractorAliasShortLabel" ), "testInteractorAliasShortLabel" ), "testInteractorAliasName" );
        AnnotatedObject parent = new CvGoNode();
        interactorAlias.setParent( parent );
        AnnotatedObject result = interactorAlias.getParent();
        assertSame( "result", parent, result );
    }

    public void testGetParentAc() throws Throwable {
        Institution owner = new Institution( "testInteractorAliasShortLabel" );
        InteractorAlias interactorAlias = new InteractorAlias( new Institution( "testInteractorAliasShortLabel2" ), new SmallMoleculeImpl( "testInteractorAliasShortLabel", owner, new CvInteractorType( owner, "testInteractorAliasShortLabel" ) ), new CvAliasType( new Institution( "testInteractorAliasShortLabel1" ), "testInteractorAliasShortLabel" ), "testInteractorAliasName" );
        String result = interactorAlias.getParentAc();
        assertNull( "result", result );
        assertNull( "interactorAlias.getParent()", interactorAlias.getParent() );
        assertNull( "interactorAlias.parentAc", getPrivateField( interactorAlias, "parentAc" ) );
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new InteractorAlias( new Institution( "testInteractorAliasShortLabel" ), null, new CvAliasType( new Institution( "testInteractorAliasShortLabel1" ), "testInteractorAliasShortLabel" ), "testInteractorAliasName" );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertNull( "ex.getMessage()", ex.getMessage() );
            assertThrownBy( Alias.class, ex );
        }
    }
}

