/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:30:29
 * Time to generate: 00:51.657 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;


public class PublicationXrefAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = PublicationXref.class;

    public void testConstructor() throws Throwable {
        Institution anOwner = new Institution( "testPublicationXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testPublicationXrefShortLabel" ), "testPublicationXrefShortLabel" );
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testPublicationXrefShortLabel2" ), "testPublicationXrefShortLabel" );
        PublicationXref publicationXref = new PublicationXref( anOwner, aDatabase, "testPublicationXrefAPrimaryId1", "testPublicationXrefASecondaryId1", "testPublicationXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "publicationXref.getPrimaryId()", "testPublicationXrefAPrimaryId1", publicationXref.getPrimaryId() );
        assertEquals( "publicationXref.getEvidences().size()", 0, publicationXref.getEvidences().size() );
        assertEquals( "publicationXref.getDbRelease()", "testPublicationXrefADatabaseRelease", publicationXref.getDbRelease() );
        assertSame( "publicationXref.getCvXrefQualifier()", aCvXrefQualifier, publicationXref.getCvXrefQualifier() );
        assertSame( "publicationXref.getCvDatabase()", aDatabase, publicationXref.getCvDatabase() );
        assertSame( "publicationXref.getOwner()", anOwner, publicationXref.getOwner() );
        assertEquals( "publicationXref.getSecondaryId()", "testPublicationXrefASecondaryI", publicationXref.getSecondaryId() );
    }

    public void testConstructor1() throws Throwable {
        Institution anOwner = new Institution( "testPublicationXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testPublicationXrefShortLabel" ), "testPublicationXrefShortLabel" );
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testPublicationXrefShortLabel2" ), "testPublicationXrefShortLabel" );
        PublicationXref publicationXref = new PublicationXref( anOwner, aDatabase, "testPublicationXrefAPrimaryId", "  \r\t\nXXXXXXXX\nXXXXXXXX\rXXXXXXXXXXXX", "testPublicationXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "publicationXref.getPrimaryId()", "testPublicationXrefAPrimaryId", publicationXref.getPrimaryId() );
        assertEquals( "publicationXref.getEvidences().size()", 0, publicationXref.getEvidences().size() );
        assertEquals( "publicationXref.getDbRelease()", "testPublicationXrefADatabaseRelease", publicationXref.getDbRelease() );
        assertSame( "publicationXref.getCvXrefQualifier()", aCvXrefQualifier, publicationXref.getCvXrefQualifier() );
        assertSame( "publicationXref.getCvDatabase()", aDatabase, publicationXref.getCvDatabase() );
        assertSame( "publicationXref.getOwner()", anOwner, publicationXref.getOwner() );
        assertEquals( "publicationXref.getSecondaryId()", "XXXXXXXX\nXXXXXXXX\rXXXXXXXXXXXX", publicationXref.getSecondaryId() );
    }

    public void testConstructor2() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testPublicationXrefShortLabel" ), "testPublicationXrefShortLabel" );
        Institution anOwner = new Institution( "testPublicationXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testPublicationXrefShortLabel2" ), "testPublicationXrefShortLabel" );
        PublicationXref publicationXref = new PublicationXref( anOwner, aDatabase, "\tXXXX XXXXXXXXXXXXXX\tXXXXXXXXXXX", "testPublicationXrefASecondaryId", "testPublicationXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "publicationXref.getPrimaryId()", "XXXX XXXXXXXXXXXXXX\tXXXXXXXXXX", publicationXref.getPrimaryId() );
        assertEquals( "publicationXref.getEvidences().size()", 0, publicationXref.getEvidences().size() );
        assertEquals( "publicationXref.getDbRelease()", "testPublicationXrefADatabaseRelease", publicationXref.getDbRelease() );
        assertSame( "publicationXref.getCvXrefQualifier()", aCvXrefQualifier, publicationXref.getCvXrefQualifier() );
        assertSame( "publicationXref.getCvDatabase()", aDatabase, publicationXref.getCvDatabase() );
        assertSame( "publicationXref.getOwner()", anOwner, publicationXref.getOwner() );
        assertEquals( "publicationXref.getSecondaryId()", "testPublicationXrefASecondaryI", publicationXref.getSecondaryId() );
    }

    public void testConstructor3() throws Throwable {
        Institution anOwner = new Institution( "testPublicationXrefShortLabel2" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testPublicationXrefShortLabel1" ), "testPublicationXrefShortLabel" );
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testPublicationXrefShortLabel" ), "testPublicationXrefShortLabel" );
        PublicationXref publicationXref = new PublicationXref( anOwner, aDatabase, "testPublicationXrefAPrimaryId", aCvXrefQualifier );
        assertEquals( "publicationXref.getPrimaryId()", "testPublicationXrefAPrimaryId", publicationXref.getPrimaryId() );
        assertEquals( "publicationXref.getEvidences().size()", 0, publicationXref.getEvidences().size() );
        assertSame( "publicationXref.getCvDatabase()", aDatabase, publicationXref.getCvDatabase() );
        assertSame( "publicationXref.getCvXrefQualifier()", aCvXrefQualifier, publicationXref.getCvXrefQualifier() );
        assertSame( "publicationXref.getOwner()", anOwner, publicationXref.getOwner() );
    }

    public void testConstructor4() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testPublicationXrefShortLabel" ), "testPublicationXrefShortLabel" );
        Institution anOwner = new Institution( "testPublicationXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testPublicationXrefShortLabel2" ), "testPublicationXrefShortLabel" );
        PublicationXref publicationXref = new PublicationXref( anOwner, aDatabase, "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\t\r", aCvXrefQualifier );
        assertEquals( "publicationXref.getPrimaryId()", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", publicationXref.getPrimaryId() );
        assertEquals( "publicationXref.getEvidences().size()", 0, publicationXref.getEvidences().size() );
        assertSame( "publicationXref.getCvDatabase()", aDatabase, publicationXref.getCvDatabase() );
        assertSame( "publicationXref.getCvXrefQualifier()", aCvXrefQualifier, publicationXref.getCvXrefQualifier() );
        assertSame( "publicationXref.getOwner()", anOwner, publicationXref.getOwner() );
    }

    public void testConstructor5() throws Throwable {
        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
        CvDatabase aDatabase = ( CvDatabase ) Mockingbird.getProxyObject( CvDatabase.class );
        CvXrefQualifier aCvXrefQualifier = ( CvXrefQualifier ) Mockingbird.getProxyObject( CvXrefQualifier.class );
        Mockingbird.enterTestMode();
        PublicationXref publicationXref = new PublicationXref( anOwner, aDatabase, "testPublicationXrefAPrimaryId1", aCvXrefQualifier );
        assertEquals( "publicationXref.getPrimaryId()", "testPublicationXrefAPrimaryId1", publicationXref.getPrimaryId() );
        assertEquals( "publicationXref.getEvidences().size()", 0, publicationXref.getEvidences().size() );
        assertSame( "publicationXref.getCvDatabase()", aDatabase, publicationXref.getCvDatabase() );
        assertSame( "publicationXref.getCvXrefQualifier()", aCvXrefQualifier, publicationXref.getCvXrefQualifier() );
        assertSame( "publicationXref.getOwner()", anOwner, publicationXref.getOwner() );
    }

    public void testConstructor6() throws Throwable {
        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
        CvDatabase aDatabase = ( CvDatabase ) Mockingbird.getProxyObject( CvDatabase.class );
        CvXrefQualifier aCvXrefQualifier = ( CvXrefQualifier ) Mockingbird.getProxyObject( CvXrefQualifier.class );
        Mockingbird.enterTestMode();
        PublicationXref publicationXref = new PublicationXref( anOwner, aDatabase, "1", aCvXrefQualifier );
        assertEquals( "publicationXref.getPrimaryId()", "1", publicationXref.getPrimaryId() );
        assertEquals( "publicationXref.getEvidences().size()", 0, publicationXref.getEvidences().size() );
        assertSame( "publicationXref.getCvDatabase()", aDatabase, publicationXref.getCvDatabase() );
        assertSame( "publicationXref.getCvXrefQualifier()", aCvXrefQualifier, publicationXref.getCvXrefQualifier() );
        assertSame( "publicationXref.getOwner()", anOwner, publicationXref.getOwner() );
    }

    public void testGetParent() throws Throwable {
        Institution owner = new Institution( "testPublicationXrefShortLabel" );
        AnnotatedObject result = new PublicationXref( owner, new CvDatabase( owner, "testPublicationXrefShortLabel" ), "testPublicationXrefAPrimaryId", "testPublicationXrefASecondaryId", "testPublicationXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testPublicationXrefShortLabel1" ), "testPublicationXrefShortLabel" ) ).getParent();
        assertNull( "result", result );
    }

    public void testGetParent1() throws Throwable {
        PublicationXref publicationXref = new PublicationXref( new Institution( "testPublicationXrefShortLabel2" ), new CvDatabase( new Institution( "testPublicationXrefShortLabel1" ), "testPublicationXrefShortLabel" ), "testPublicationXrefAPrimaryId", "testPublicationXrefASecondaryId", "testPublicationXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testPublicationXrefShortLabel" ), "testPublicationXrefShortLabel" ) );
        AnnotatedObject parent = new CvGoNode();
        publicationXref.setParent( parent );
        AnnotatedObject result = publicationXref.getParent();
        assertSame( "result", parent, result );
    }

    public void testGetParentAc() throws Throwable {
        Institution owner = new Institution( "testPublicationXrefShortLabel" );
        PublicationXref publicationXref = new PublicationXref( owner, new CvDatabase( owner, "testPublicationXrefShortLabel" ), "testPublicationXrefAPrimaryId", new CvXrefQualifier( new Institution( "testPublicationXrefShortLabel1" ), "testPublicationXrefShortLabel" ) );
        String result = publicationXref.getParentAc();
        assertNull( "result", result );
        assertNull( "publicationXref.parentAc", getPrivateField( publicationXref, "parentAc" ) );
        assertNull( "publicationXref.getParent()", publicationXref.getParent() );
    }

    public void testGetParentAc1() throws Throwable {
        PublicationXref publicationXref = new PublicationXref( new Institution( "testPublicationXrefShortLabel" ), new CvDatabase( new Institution( "testPublicationXrefShortLabel1" ), "testPublicationXrefShortLabel" ), "testPublicationXrefAPrimaryId", new CvXrefQualifier( new Institution( "testPublicationXrefShortLabel2" ), "testPublicationXrefShortLabel" ) );
        publicationXref.setParentAc( "testPublicationXrefParentAc" );
        String result = publicationXref.getParentAc();
        assertEquals( "result", "testPublicationXrefParentAc", result );
        assertEquals( "publicationXref.parentAc", "testPublicationXrefParentAc", getPrivateField( publicationXref, "parentAc" ) );
        assertNull( "publicationXref.getParent()", publicationXref.getParent() );
    }

    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        try {
            new PublicationXref( new Institution( "testPublicationXrefShortLabel2" ), new CvDatabase( new Institution( "testPublicationXrefShortLabel1" ), "testPublicationXrefShortLabel" ), "", "testPublicationXrefASecondaryId", "testPublicationXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testPublicationXrefShortLabel" ), "testPublicationXrefShortLabel" ) );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty primaryId for an Xref.", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsIllegalArgumentException1() throws Throwable {
        Institution owner = new Institution( "testPublicationXrefShortLabel" );
        CvDatabase aDatabase = new CvDatabase( owner, "testPublicationXrefShortLabel" );
        try {
            new PublicationXref( owner, aDatabase, "", new CvXrefQualifier( owner, "testPublicationXrefShortLabel" ) );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty primaryId for an Xref.", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new PublicationXref( new Institution( "testPublicationXrefShortLabel2" ), new CvDatabase( new Institution( "testPublicationXrefShortLabel" ), "testPublicationXrefShortLabel" ), null, "testPublicationXrefASecondaryId", "testPublicationXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testPublicationXrefShortLabel1" ), "testPublicationXrefShortLabel" ) );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Xref must have a primary ID!", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException1() throws Throwable {
        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
        CvDatabase aDatabase = ( CvDatabase ) Mockingbird.getProxyObject( CvDatabase.class );
        CvXrefQualifier aCvXrefQualifier = ( CvXrefQualifier ) Mockingbird.getProxyObject( CvXrefQualifier.class );
        Mockingbird.enterTestMode();
        try {
            new PublicationXref( anOwner, aDatabase, null, aCvXrefQualifier );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Xref must have a primary ID!", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }
}

