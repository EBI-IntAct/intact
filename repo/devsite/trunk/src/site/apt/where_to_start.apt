 -----
 Webapp Installation
 -----
 Bruno Aranda
 -----
 8 Sep 2006
 -----

Developing new modules based on IntAct

 To develop with IntAct you have to know how to access the underlying data, access to configuration parameters, etc.
 This is provided by the most important library in IntAct, called {{{intact-core/index.html}intact-core}}. The best place
 to start then, is by reading the intact-core documentation.

 Should you be willing to write your own IntAct module, you will have to insert it in the existing hierarchy of dependencies.
 You will have to choose between three possible parent module:

*--------------------*-------------------------------------------------------------------------------*
| intact-master       | if you application doesn't require a database access.                        |
*--------------------*-------------------------------------------------------------------------------*
| intact-hibernate    | if your application requires access to a database but IS NOT a web application. |
*--------------------*-------------------------------------------------------------------------------*
| intact-webapp-master| if your application requires access to a database and IS a web application. |
*--------------------*-------------------------------------------------------------------------------*

 If using a database outside the EBI, you will have to setup the database first, following the {{{general_install.html}instructions}} provided.

Using existing modules in your project

* Maven-based project

** IntAct Maven Archetypes

 Using maven is the easiest way to start working with the intact libraries in your own project.

 The best way to setup a new project fast is to use the IntAct Maven Archetypes:

*-----------------------*----------------------------*-------------*------------------------------------------------------*
| <<artifactId>>        | <<groupId>>                | <<version>> | <<description>>                                      |
*-----------------------*----------------------------*-------------*------------------------------------------------------*
| intact-archetype-jar  | uk.ac.ebi.intact.archetype | 1.1.0       | Creates a maven module to create jars using IntAct   |
*-----------------------*----------------------------*-------------*------------------------------------------------------*
| intact-archetype-mojo | uk.ac.ebi.intact.archetype | 1.1.1       | Creates a maven module to create plugins for IntAct  |
*-----------------------*----------------------------*-------------*------------------------------------------------------*

 An example of using the archetype to create and setup the maven project, for the intact-archetype-jar

+--------------------+
mvn archetype:create -DarchetypeArtifactId=intact-archetype-jar -DarchetypeGroupId=uk.ac.ebi.intact.archetype -DarchetypeVersion=1.1.0 \
                     -Dversion=1.0-SNAPSHOT -DgroupId=uk.ac.ebi.intact.mygroup -DartifactId=myTest \
                     -DremoteRepositories=http://www.ebi.ac.uk/~maven/m2repo
+--------------------+

** Further setup

 To be able to use any of the libraries (e.g. intact-core) as a dependency for your maven-based project, you need
 to add the EBI repository in the repositories section of your pom.xml file. Note that the archetype automatically
 generates a pom.xml including this section.

+---------------+
<!-- EBI repositories -->
<repositories>
    <repository>
        <id>ebi-repo</id>
        <name>The EBI internal repository</name>
        <url>http://www.ebi.ac.uk/~maven/m2repo</url>
    </repository>
</repositories>
+--------------------+

 See the documentation of the module you want to use in the module page to know the exact <groupId>, <artifactId> and latest
 <version>. For instance, for the search-wsclient (the client  for the Search Web Service),
 you have to include this dependency in your pom.xml

+---------------+
<dependencies>
    ...
    <dependency>
        <groupId>uk.ac.ebi.intact.app.search</groupId>
        <artifactId>search-wsclient</artifactId>
        <version>1.0.1</version>
    </dependency>
    ...
</dependencies>
+--------------------+

* Non-maven project

 We are not creating bundles with the binary files for the projects, so you will have to build the binaries from the SVN repository
 and include them as its dependencies in your project.
