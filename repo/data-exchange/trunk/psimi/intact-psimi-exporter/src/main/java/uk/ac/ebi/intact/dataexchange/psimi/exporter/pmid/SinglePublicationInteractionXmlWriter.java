package uk.ac.ebi.intact.dataexchange.psimi.exporter.pmid;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.batch.item.ItemStreamException;
import org.springframework.util.Assert;
import psidev.psi.mi.jami.xml.cache.InMemoryIdentityObjectCache;
import psidev.psi.mi.jami.xml.cache.PsiXmlObjectCache;
import psidev.psi.mi.jami.xml.model.extension.factory.options.PsiXmlWriterOptions;

/**
 * Extension of single publication interaction writer for PSI XML
 *
 * @author Marine Dumousseau (marine@ebi.ac.uk)
 * @version $Id$
 * @since <pre>22/09/11</pre>
 */

public class SinglePublicationInteractionXmlWriter extends SinglePublicationInteractionWriter {

    private static final Log log = LogFactory.getLog(SinglePublicationInteractionXmlWriter.class);

    /**
     * The name of the sequence id which is persisted
     */
    private final static String SEQUENCE_ID = "sequence_id";

    private int currentId = 0;


    @Override
    public void open(ExecutionContext executionContext) throws ItemStreamException {
        Assert.notNull(executionContext, "ExecutionContext must not be null");

        // we get the last id generated by this processor
        if (executionContext.containsKey(SEQUENCE_ID)){
            currentId = executionContext.getInt(SEQUENCE_ID);
        }
        else {
            // we need to reset the current id of the IdSequenceGenerator to the first position
            currentId = 0;
        }
        
        super.open(executionContext);
    }

    @Override
    public void update(ExecutionContext executionContext) throws ItemStreamException {
        Assert.notNull(executionContext, "ExecutionContext must not be null");

        // we can persist the current position
        executionContext.putInt(SEQUENCE_ID, this.currentId);
        
        super.update(executionContext);
    }

    @Override
    public void close() throws ItemStreamException {
        this.currentId = 0;
        super.close();
    }

    @Override
    protected void addSupplementaryOptions() {
        if (getWriterOptions().containsKey(PsiXmlWriterOptions.ELEMENT_WITH_ID_CACHE_OPTION)){
            PsiXmlObjectCache previousCache = (PsiXmlObjectCache)getWriterOptions().get(PsiXmlWriterOptions.ELEMENT_WITH_ID_CACHE_OPTION);
            this.currentId = previousCache.getLastGeneratedId();
        }
        // add cache with id cache
        PsiXmlObjectCache cache = new InMemoryIdentityObjectCache();
        cache.resetLastGeneratedIdTo(this.currentId);
        getWriterOptions().put(PsiXmlWriterOptions.ELEMENT_WITH_ID_CACHE_OPTION, cache);
    }
}
