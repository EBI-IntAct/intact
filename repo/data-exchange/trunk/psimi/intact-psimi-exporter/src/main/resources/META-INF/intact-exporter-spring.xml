<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.2.xsd">

    <context:component-scan base-package="uk.ac.ebi.intact.dataexchange.psimi.exporter" />
    <context:component-scan base-package="uk.ac.ebi.intact.jami" />

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath*:/exporter.properties</value>
            </list>
        </property>
    </bean>

    <import resource="classpath*:/META-INF/psimi-batch-spring.xml"/>
    <context:annotation-config/>
    <tx:annotation-driven proxy-target-class="true"/>

    <!-- so the @Transactional annotations work -->
    <tx:annotation-driven transaction-manager="jamiTransactionManager"/>

    <!--
        Post-processor to perform exception translation on @Repository classes
        (from native exceptions such as JPA PersistenceExceptions to
        Spring&rsquo;s DataAccessException hierarchy).
    -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
    <!--  BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations,
    for injection of the corresponding JPA resources EntityManagerFactory and EntityManager.
    Any such annotated fields or methods in any Spring-managed object will automatically be injected.
    This post-processor will inject sub-interfaces of EntityManagerFactory and EntityManager if the annotated
    fields or methods are declared as such. The actual type will be verified early, with the exception of
    a shared ("transactional") EntityManager reference, where type mismatches might be detected as late as on
    the first actual invocation. -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>

    <!-- for autowired annotations to work propertly -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <!-- JPATransactionManager is not dependent on hibernate. It is a more global platform -->
    <!-- We use entity manager because it is JPA and not just specific to hibernate -->
    <bean id="jamiTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="intactEntityManagerFactory"/>
        <property name="dataSource" ref="jamiCoreDataSource"/>
        <qualifier value="jamiTransactionManager"/>
    </bean>


    <!-- The LocalContainerEntityManagerFactoryBean gives full control over EntityManagerFactory configuration
    and is appropriate for environments where fine-grained customization is required-->
    <bean id="intactEntityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="intact-jami"/>
        <property name="persistenceXmlLocation" value="classpath*:/META-INF/jami-persistence.xml"/>
        <property name="dataSource" ref="jamiCoreDataSource"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.generate_statistics">true</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">${db.hbm2ddl}</prop>
                <prop key="hibernate.connection.release_mode">after_transaction</prop>
            </props>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="databasePlatform" value="${db.platform}"/>
                <property name="showSql" value="false"/>
                <property name="generateDdl" value="false"/>
            </bean>
        </property>
    </bean>
    <!-- Intact core basic datasource -->
    <bean id="jamiCoreDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.user}"/>
        <property name="password" value="${db.password}"/>
    </bean>

    <!-- INTACT more specific beans -->
    <bean id="jamiUserContext" class="uk.ac.ebi.intact.jami.context.UserContext" scope="prototype">
        <property name="userId" value="${jami.user.context.id}"/>
    </bean>

    <bean id="intactJamiConfiguration" class="uk.ac.ebi.intact.jami.context.IntactConfiguration" scope="prototype">
        <property name="acPrefix" value="${ac.prefix}"/>
        <property name="defaultInstitution" ref="sourceIntact"/>
    </bean>

    <!-- Default institutions -->
    <bean id="sourceIntact" class="uk.ac.ebi.intact.jami.model.extension.IntactSource">
        <constructor-arg index="0" value="intact"/>
        <property name="fullName" value="European Bioinformatics Institute"/>
        <property name="MIIdentifier" value="MI:0469"/>
        <property name="url" value="http://www.ebi.ac.uk/intact/"/>
        <property name="postalAddress" value="European Bioinformatics Institute; Wellcome Trust Genome Campus; Hinxton, Cambridge; CB10 1SD; United Kingdom"/>
    </bean>

    <!-- readers -->
    <!-- simple interaction evidence reader -->
    <bean id="intactInteractionEvidenceReader" class="org.springframework.batch.item.database.JpaPagingItemReader" lazy-init="true">
        <property name="queryString" value="select i from IntactInteractionEvidence i
        order by i.created, i.ac"/>
        <property name="entityManagerFactory" ref="intactEntityManagerFactory"/>
    </bean>
    <!-- simple negative interaction evidence reader -->
    <bean id="intactNegativeInteractionEvidenceReader" class="org.springframework.batch.item.database.JpaPagingItemReader" lazy-init="true">
        <property name="queryString" value="select i from IntactInteractionEvidence i
        join i.dbAnnotations as a
        where a.topic.shortName = :negative
        order by i.created, i.ac"/>
        <property name="entityManagerFactory" ref="intactEntityManagerFactory"/>
        <property name="parameterValues">
            <map>
                <entry key="negative" value="negative"/>
            </map>
        </property>
    </bean>
    <!-- simple positive interaction evidence reader -->
    <bean id="intactPositiveInteractionEvidenceReader" class="org.springframework.batch.item.database.JpaPagingItemReader" lazy-init="true">
        <property name="queryString" value="select i from IntactInteractionEvidence i
        where i.ac not in
        (select distinct i2.ac from IntactInteractionEvidence i2
        join i2.dbAnnotations as a
        where a.topic.shortName = :negative)
        order by i.created, i.ac"/>
        <property name="entityManagerFactory" ref="intactEntityManagerFactory"/>
        <property name="parameterValues">
            <map>
                <entry key="negative" value="negative"/>
            </map>
        </property>
    </bean>
    <!-- simple complex reader -->
    <bean id="intactComplexReader" class="org.springframework.batch.item.database.JpaPagingItemReader" lazy-init="true">
        <property name="queryString" value="select i from IntactComplex i
        order by i.created, i.ac"/>
        <property name="entityManagerFactory" ref="intactEntityManagerFactory"/>
    </bean>
    <!-- simple publication reader -->
    <bean id="intactPublicationReader" class="org.springframework.batch.item.database.JpaPagingItemReader" lazy-init="true">
        <property name="queryString" value="select i from IntactPublication i
        where i.shortLabel &lt;&gt; :intactPub
        order by i.created, i.ac"/>
        <property name="entityManagerFactory" ref="intactEntityManagerFactory"/>
        <property name="parameterValues">
            <map>
                <entry key="intactPub" value="14681455"/>
            </map>
        </property>
    </bean>
    <!-- reader returning publication label with publication ordered by species
    <bean id="publicationOrderedBySpeciesReader" class="org.springframework.batch.item.database.JdbcCursorItemReader" lazy-init="true">
        <property name="dataSource" ref="intactReleaseDataSource"/>
        <property name="sql" value="select distinct p.shortlabel as pubid, EXTRACT (YEAR FROM p.created ) as year, b.shortlabel as species, e.shortlabel as experiment_label, v.count_interaction as total_interactions, greatest(2000, v.count_interaction)
        from ia_publication p
        join ia_experiment e on p.ac = e.publication_ac
        join ia_int2exp ie on ie.experiment_ac = e.ac
        join ia_component c on ie.interaction_ac = c.interaction_ac
        join ia_interactor i on i.ac = c.interactor_ac
        join ia_biosource b on b.ac = i.biosource_ac
        join (select count(ie2.interaction_ac) as count_interaction, ie2.experiment_ac as experiment_ac
        from ia_int2exp ie2 group by ie2.experiment_ac) v on v.experiment_ac = e.ac
        where p.shortLabel != '14681455'
        group by b.shortlabel, p.shortlabel, e.shortlabel, p.created, v.count_interaction
        order by b.shortlabel, greatest(2000, v.count_interaction) DESC, p.shortlabel, v.count_interaction DESC, e.shortLabel"/>
        <property name="rowMapper">
            <bean class="uk.ac.ebi.intact.release.psixml.species.classification.PublicationSpeciesRowMapper"/>
        </property>
    </bean> -->
    <!-- the reader will read publication shortlabel, publication created year and dataset. It will order the results first by dataset and then by publication id-->
    <!--<bean id="publicationOrderedByDatasetReader" class="org.springframework.batch.item.database.JdbcCursorItemReader" lazy-init="true">
        <property name="dataSource" ref="intactReleaseDataSource"/>
        <property name="sql" value="select distinct p.shortlabel as pubid, EXTRACT ( YEAR FROM p.created ) as year, a.description as dataset
        from ia_publication p
        join ia_pub2annot pa on p.ac = pa.publication_ac
        join ia_annotation a on pa.annotation_ac = a.ac
        join ia_controlledvocab c on c.ac = a.topic_ac
        where p.shortLabel != '14681455'
        and c.shortlabel='dataset'
        order by a.description, EXTRACT ( YEAR FROM p.created ), p.shortLabel"/>
        <property name="rowMapper">
            <bean class="uk.ac.ebi.intact.release.psixml.dataset.PublicationDatasetRowMapper"/>
        </property>
    </bean>-->

    <!-- processors -->

    <!-- writers -->
    <bean id="spokeExpansion" class="psidev.psi.mi.jami.binary.expansion.InteractionEvidenceSpokeExpansion"/>

    <!-- interaction writer -->
    <bean id="miFileOutput" class="org.springframework.core.io.FileSystemResource">
        <constructor-arg value="${mi.output}"/>
    </bean>
    <!-- interaction evidence html writer -->
    <bean id="intactHtmlEvidenceWriter" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.simple.IntactHtmlExporter">
        <property name="writerOptions">
            <map>
                <entry key="write_html_header_option_key" value-type="java.lang.Boolean" value="true" />
                <entry key="output_format_key" value="mi_html"/>
                <entry key="interaction_category_key" value-type="psidev.psi.mi.jami.model.InteractionCategory" value="evidence"/>
            </map>
        </property>
        <property name="output" ref="miFileOutput"/>
    </bean>
    <!-- complex html writer -->
    <bean id="intactHtmlModelledWriter" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.simple.IntactHtmlExporter">
        <property name="writerOptions">
            <map>
                <entry key="write_html_header_option_key" value-type="java.lang.Boolean" value="true" />
                <entry key="output_format_key" value="mi_html"/>
                <entry key="interaction_category_key" value-type="psidev.psi.mi.jami.model.InteractionCategory" value="modelled"/>
            </map>
        </property>
        <property name="output" ref="miFileOutput"/>
    </bean>
    <!-- interaction evidence json writer -->
    <bean id="intactJsonEvidenceWriter" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.simple.IntactInteractionViewerJsonExporter">
        <property name="writerOptions">
            <map>
                <entry key="write_html_header_option_key" value-type="java.lang.Boolean" value="true" />
                <entry key="output_format_key" value="mi_html"/>
                <entry key="interaction_category_key" value-type="psidev.psi.mi.jami.model.InteractionCategory" value="evidence"/>
            </map>
        </property>
        <property name="output" ref="miFileOutput"/>
    </bean>
    <!-- complex json writer -->
    <bean id="intactJsonModelledWriter" class="uk.ac.ebi.intact.dataexchange.psimi.exporter.simple.IntactInteractionViewerJsonExporter">
        <property name="writerOptions">
            <map>
                <entry key="write_html_header_option_key" value-type="java.lang.Boolean" value="true" />
                <entry key="output_format_key" value="interaction_viewer_json"/>
                <entry key="interaction_category_key" value-type="psidev.psi.mi.jami.model.InteractionCategory" value="modelled"/>
            </map>
        </property>
        <property name="output" ref="miFileOutput"/>
    </bean>

    <!-- Basic Step configuration -->

    <!-- Export Steps -->

    <!-- Export job -->

</beans>