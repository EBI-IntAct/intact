/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:27:18
 * Time to generate: 01:04.953 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;

import com.agitar.lib.mockingbird.Mockingbird;

public class CvObjectXrefAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = CvObjectXref.class;

    public void testConstructor() throws Throwable {
        Institution owner = new Institution( "testCvObjectXrefShortLabel" );
        CvDatabase aDatabase = new CvDatabase( owner, "testCvObjectXrefShortLabel" );
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( owner, "testCvObjectXrefShortLabel" );
        Institution anOwner = new Institution( "testCvObjectXrefShortLabel1" );
        CvObjectXref cvObjectXref = new CvObjectXref( anOwner, aDatabase, "1", "testCvObjectXrefASecondaryId", "testCvObjectXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "cvObjectXref.getPrimaryId()", "1", cvObjectXref.getPrimaryId() );
        assertEquals( "cvObjectXref.getEvidences().size()", 0, cvObjectXref.getEvidences().size() );
        assertEquals( "cvObjectXref.getDbRelease()", "testCvObjectXrefADatabaseRelease", cvObjectXref.getDbRelease() );
        assertSame( "cvObjectXref.getCvXrefQualifier()", aCvXrefQualifier, cvObjectXref.getCvXrefQualifier() );
        assertSame( "cvObjectXref.getCvDatabase()", aDatabase, cvObjectXref.getCvDatabase() );
        assertSame( "cvObjectXref.getOwner()", anOwner, cvObjectXref.getOwner() );
        assertEquals( "cvObjectXref.getSecondaryId()", "testCvObjectXrefASecondaryId", cvObjectXref.getSecondaryId() );
    }

    public void testConstructor1() throws Throwable {
        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
        CvDatabase aDatabase = ( CvDatabase ) Mockingbird.getProxyObject( CvDatabase.class );
        CvXrefQualifier aCvXrefQualifier = ( CvXrefQualifier ) Mockingbird.getProxyObject( CvXrefQualifier.class );
        Mockingbird.enterTestMode();
        CvObjectXref cvObjectXref = new CvObjectXref( anOwner, aDatabase, " \r\t\r$XXX$XXXXX$XXXXXXXX\nXXXXXXXXX\nX  \n ", "testCvObjectXrefASecondaryId", "testCvObjectXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "cvObjectXref.getPrimaryId()", "$XXX$XXXXX$XXXXXXXX\nXXXXXXXXX\n", cvObjectXref.getPrimaryId() );
        assertEquals( "cvObjectXref.getEvidences().size()", 0, cvObjectXref.getEvidences().size() );
        assertEquals( "cvObjectXref.getDbRelease()", "testCvObjectXrefADatabaseRelease", cvObjectXref.getDbRelease() );
        assertSame( "cvObjectXref.getCvXrefQualifier()", aCvXrefQualifier, cvObjectXref.getCvXrefQualifier() );
        assertSame( "cvObjectXref.getCvDatabase()", aDatabase, cvObjectXref.getCvDatabase() );
        assertSame( "cvObjectXref.getOwner()", anOwner, cvObjectXref.getOwner() );
        assertEquals( "cvObjectXref.getSecondaryId()", "testCvObjectXrefASecondaryId", cvObjectXref.getSecondaryId() );
    }

    public void testConstructor2() throws Throwable {
        CvObjectXref cvObjectXref = new CvObjectXref( null, null, "XXXX XXXXXXXXX XXX\rXXX#XXXXX X \n", "testCvObjectXrefASecondaryId", "testCvObjectXrefADatabaseRelease", null );
        assertEquals( "cvObjectXref.getPrimaryId()", "XXXX XXXXXXXXX XXX\rXXX#XXXXX X", cvObjectXref.getPrimaryId() );
        assertEquals( "cvObjectXref.getEvidences().size()", 0, cvObjectXref.getEvidences().size() );
        assertEquals( "cvObjectXref.getDbRelease()", "testCvObjectXrefADatabaseRelease", cvObjectXref.getDbRelease() );
        assertNull( "cvObjectXref.getCvXrefQualifier()", cvObjectXref.getCvXrefQualifier() );
        assertNull( "cvObjectXref.getCvDatabase()", cvObjectXref.getCvDatabase() );
        assertNull( "cvObjectXref.getOwner()", cvObjectXref.getOwner() );
        assertEquals( "cvObjectXref.getSecondaryId()", "testCvObjectXrefASecondaryId", cvObjectXref.getSecondaryId() );
    }

    public void testConstructor3() throws Throwable {
        CvObjectXref cvObjectXref = new CvObjectXref( null, null, "\nXXXXXX    X#X XXXXXXXX XX  XX  ", "testCvObjectXrefASecondaryId", "testCvObjectXrefADatabaseRelease", null );
        assertEquals( "cvObjectXref.getPrimaryId()", "XXXXXX    X#X XXXXXXXX XX  XX", cvObjectXref.getPrimaryId() );
        assertEquals( "cvObjectXref.getEvidences().size()", 0, cvObjectXref.getEvidences().size() );
        assertEquals( "cvObjectXref.getDbRelease()", "testCvObjectXrefADatabaseRelease", cvObjectXref.getDbRelease() );
        assertNull( "cvObjectXref.getCvXrefQualifier()", cvObjectXref.getCvXrefQualifier() );
        assertNull( "cvObjectXref.getCvDatabase()", cvObjectXref.getCvDatabase() );
        assertNull( "cvObjectXref.getOwner()", cvObjectXref.getOwner() );
        assertEquals( "cvObjectXref.getSecondaryId()", "testCvObjectXrefASecondaryId", cvObjectXref.getSecondaryId() );
    }

    public void testConstructor4() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testCvObjectXrefShortLabel" ), "testCvObjectXrefShortLabel" );
        Institution anOwner = new Institution( "testCvObjectXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testCvObjectXrefShortLabel2" ), "testCvObjectXrefShortLabel" );
        CvObjectXref cvObjectXref = new CvObjectXref( anOwner, aDatabase, "1", aCvXrefQualifier );
        assertEquals( "cvObjectXref.getPrimaryId()", "1", cvObjectXref.getPrimaryId() );
        assertEquals( "cvObjectXref.getEvidences().size()", 0, cvObjectXref.getEvidences().size() );
        assertSame( "cvObjectXref.getCvDatabase()", aDatabase, cvObjectXref.getCvDatabase() );
        assertSame( "cvObjectXref.getCvXrefQualifier()", aCvXrefQualifier, cvObjectXref.getCvXrefQualifier() );
        assertSame( "cvObjectXref.getOwner()", anOwner, cvObjectXref.getOwner() );
    }

    public void testConstructor5() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testCvObjectXrefShortLabel1" ), "testCvObjectXrefShortLabel" );
        Institution anOwner = new Institution( "testCvObjectXrefShortLabel2" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testCvObjectXrefShortLabel" ), "testCvObjectXrefShortLabel" );
        CvObjectXref cvObjectXref = new CvObjectXref( anOwner, aDatabase, "XXXXXXXXXXXXXXXXX$XXXXXXXXXXX X\r", aCvXrefQualifier );
        assertEquals( "cvObjectXref.getPrimaryId()", "XXXXXXXXXXXXXXXXX$XXXXXXXXXXX ", cvObjectXref.getPrimaryId() );
        assertEquals( "cvObjectXref.getEvidences().size()", 0, cvObjectXref.getEvidences().size() );
        assertSame( "cvObjectXref.getCvDatabase()", aDatabase, cvObjectXref.getCvDatabase() );
        assertSame( "cvObjectXref.getCvXrefQualifier()", aCvXrefQualifier, cvObjectXref.getCvXrefQualifier() );
        assertSame( "cvObjectXref.getOwner()", anOwner, cvObjectXref.getOwner() );
    }

    public void testConstructor6() throws Throwable {
        CvDatabase aDatabase = new CvDatabase( new Institution( "testCvObjectXrefShortLabel" ), "testCvObjectXrefShortLabel" );
        Institution anOwner = new Institution( "testCvObjectXrefShortLabel2" );
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testCvObjectXrefShortLabel1" ), "testCvObjectXrefShortLabel" );
        CvObjectXref cvObjectXref = new CvObjectXref( anOwner, aDatabase, "XXXXXXXXXXXXXXXXX X  XXXX\rXXXX\n", aCvXrefQualifier );
        assertEquals( "cvObjectXref.getPrimaryId()", "XXXXXXXXXXXXXXXXX X  XXXX\rXXXX", cvObjectXref.getPrimaryId() );
        assertEquals( "cvObjectXref.getEvidences().size()", 0, cvObjectXref.getEvidences().size() );
        assertSame( "cvObjectXref.getCvDatabase()", aDatabase, cvObjectXref.getCvDatabase() );
        assertSame( "cvObjectXref.getCvXrefQualifier()", aCvXrefQualifier, cvObjectXref.getCvXrefQualifier() );
        assertSame( "cvObjectXref.getOwner()", anOwner, cvObjectXref.getOwner() );
    }

    public void testGetParent() throws Throwable {
        CvObjectXref cvObjectXref = new CvObjectXref( new Institution( "testCvObjectXrefShortLabel2" ), new CvDatabase( new Institution( "testCvObjectXrefShortLabel" ), "testCvObjectXrefShortLabel" ), "testCvObjectXrefAPrimaryId", new CvXrefQualifier( new Institution( "testCvObjectXref\rShortLabel" ), "testCvObjectXrefShortLabel" ) );
        AnnotatedObject parent = new CvFuzzyType( new Institution( "testCvObjectXrefShortLabel1" ), "testCvObjectXrefShortLabel" );
        cvObjectXref.setParent( parent );
        AnnotatedObject result = cvObjectXref.getParent();
        assertSame( "result", parent, result );
    }

    public void testGetParent1() throws Throwable {
        Institution owner = new Institution( "testCvObjectXrefShortLabel" );
        CvDatabase aDatabase = new CvDatabase( owner, "testCvObjectXrefShortLabel" );
        AnnotatedObject result = new CvObjectXref( new Institution( "testCvObjectXrefShortLabel1" ), aDatabase, "testCvObjectXrefAPrimaryId", new CvXrefQualifier( owner, "testCvObjectXrefShortLabel" ) ).getParent();
        assertNull( "result", result );
    }

    public void testGetParentAc() throws Throwable {
        Institution owner = new Institution( "testCvObjectXrefShortLabel1" );
        CvObjectXref cvObjectXref = new CvObjectXref( owner, new CvDatabase( new Institution( "testCvObjectXrefShortLabel" ), "testCvObjectXrefShortLabel" ), "testCvObjectXrefAPrimaryId", new CvXrefQualifier( owner, "testCvObjectXrefShortLabel" ) );
        cvObjectXref.setParentAc( "testCvObjectXrefParentAc" );
        String result = cvObjectXref.getParentAc();
        assertEquals( "result", "testCvObjectXrefParentAc", result );
        assertEquals( "cvObjectXref.parentAc", "testCvObjectXrefParentAc", getPrivateField( cvObjectXref, "parentAc" ) );
        assertNull( "cvObjectXref.getParent()", cvObjectXref.getParent() );
    }

    public void testGetParentAc1() throws Throwable {
        Institution owner = new Institution( "testCvObjectXrefShortLabel1" );
        CvObjectXref cvObjectXref = new CvObjectXref( owner, new CvDatabase( new Institution( "testCvObjectXrefShortLabel" ), "testCvObjectXrefShortLabel" ), "testCvObjectXrefAPrimaryId", "testCvObjectXrefASecondaryId", "testCvObjectXrefADatabaseRelease", new CvXrefQualifier( owner, "testCvObjectXrefShortLabel" ) );
        String result = cvObjectXref.getParentAc();
        assertNull( "result", result );
        assertNull( "cvObjectXref.parentAc", getPrivateField( cvObjectXref, "parentAc" ) );
        assertNull( "cvObjectXref.getParent()", cvObjectXref.getParent() );
    }

    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        try {
            new CvObjectXref( new Institution( "testCvObjectXrefShortLabel2" ), new CvDatabase( new Institution( "testCvObjectXrefShortLabel1" ), "testCvObjectXrefShortLabel" ), "", "testCvObjectXrefASecondaryId", "testCvObjectXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testCvObjectXrefShortLabel" ), "testCvObjectXrefShortLabel" ) );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty primaryId for an Xref.", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsIllegalArgumentException1() throws Throwable {
        Institution owner = new Institution( "testCvObjectXrefShortLabel" );
        CvDatabase aDatabase = new CvDatabase( owner, "testCvObjectXrefShortLabel" );
        try {
            new CvObjectXref( owner, aDatabase, "", new CvXrefQualifier( owner, "testCvObjectXrefShortLabel" ) );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty primaryId for an Xref.", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new CvObjectXref( new Institution( "testCvObjectXrefShortLabel2" ), new CvDatabase( new Institution( "testCvObjectXrefShortLabel" ), "testCvObjectXrefShortLabel" ), null, "testCvObjectXrefASecondaryId", "testCvObjectXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testCvObjectXrefShortLabel1" ), "testCvObjectXrefShortLabel" ) );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Xref must have a primary ID!", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException1() throws Throwable {
        Institution owner = new Institution( "testCvObjectXrefShortLabel" );
        try {
            new CvObjectXref( owner, new CvDatabase( null, "testCvObjectXrefShortLabel" ), null, new CvXrefQualifier( owner, "testCvObjectXrefShortLabel" ) );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Xref must have a primary ID!", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }
}

