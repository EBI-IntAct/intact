/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:26:47
 * Time to generate: 02:19.515 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;
import uk.ac.ebi.intact.model.util.AnnotatedObjectUtils;

import java.util.ArrayList;
import java.util.Collection;

public class PublicationAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = Publication.class;

    public void testConstructor() throws Throwable {
        Institution owner = new Institution( "testPublicationShortLabel" );
        Publication publication = new Publication( owner, "-38971" );
        assertEquals( "publication.xrefs.size()", 0, publication.xrefs.size() );
        assertEquals( "publication.getAliases().size()", 0, publication.getAliases().size() );
        assertEquals( "publication.getEvidences().size()", 0, publication.getEvidences().size() );
        assertEquals( "publication.shortLabel", "-38971", publication.getShortLabel() );
        assertEquals( "publication.experiments.size()", 0, publication.getExperiments().size() );
        assertEquals( "publication.annotations.size()", 0, publication.annotations.size() );
        assertSame( "publication.getOwner()", owner, publication.getOwner() );
        assertEquals( "publication.references.size()", 0, publication.references.size() );
//        assertEquals( "publication.getPmid()", "-38971", publication.getPmid() );
    }

    public void testEquals() throws Throwable {
        boolean result = new Publication( null, "-38971" ).equals( new Publication( new Institution( "testPublicationShortLabel" ), "55611" ) );
        assertFalse( "result", result );
    }

    public void testEquals1() throws Throwable {
        boolean result = new Publication( null, "-38971" ).equals( "testString" );
        assertFalse( "result", result );
    }

    public void testEquals2() throws Throwable {
        boolean result = new Publication( new Institution( "testPublicationShortLabel" ), "-38971" ).equals( null );
        assertFalse( "result", result );
    }

    public void testEquals3() throws Throwable {
        Publication o = new Publication( new Institution( "testPublicationShortLabel" ), "-38971" );
        boolean result = o.equals( o );
        assertTrue( "result", result );
    }

    public void testGetAliases() throws Throwable {
        ArrayList result = ( ArrayList ) new Publication( new Institution( "testPublicationShortLabel" ), "-38971" ).getAliases();
        assertEquals( "result.size()", 0, result.size() );
    }

    public void testGetAnnotations() throws Throwable {
        Publication publication = new Publication( new Institution( "testPublicationShortLabel" ), "-38971" );
        Collection someAnnotation = new ArrayList( 100 );
        publication.setAnnotations( someAnnotation );
        publication.addAnnotation( null );
        Collection result = publication.getAnnotations();
        assertSame( "result", someAnnotation, result );
        assertTrue( "(ArrayList) someAnnotation.contains(null)", someAnnotation.contains( null ) );
    }

    public void testGetAnnotations1() throws Throwable {
        ArrayList result = ( ArrayList ) new Publication( new Institution( "testPublicationShortLabel" ), "-38971" ).getAnnotations();
        assertEquals( "result.size()", 0, result.size() );
    }

//    public void testGetExperiments() throws Throwable {
//        Collection experiments = new ArrayList( 100 );
//        Publication publication = new Publication( new Institution( "testPublicationShortLabel" ), "-38971" );
//        publication.addExperiment( experiments );
//        Collection result = publication.getExperiments();
//        assertSame( "result", experiments, result );
//    }

    public void testGetXrefs() throws Throwable {
        Publication publication = new Publication( null, "-38971" );
        Xref aXref = new PublicationXref( new Institution( "testPublicationShortLabel2" ), new CvDatabase( new Institution( "testPublicationShortLabel1" ), "testPublicationShortLabel" ), "testPublicationAPrimaryId", new CvXrefQualifier( new Institution( "testPublicationShortLabel" ), "testPublicationShortLabel" ) );
        publication.addXref( ( PublicationXref ) aXref );
        ArrayList result = ( ArrayList ) publication.getXrefs();
        assertEquals( "result.size()", 1, result.size() );
        assertTrue( "(ArrayList) result.contains(aXref)", result.contains( aXref ) );
    }

    public void testGetXrefs1() throws Throwable {
        ArrayList result = ( ArrayList ) new Publication( new Institution( "testPublicationShortLabel" ), "-38971" ).getXrefs();
        assertEquals( "result.size()", 0, result.size() );
    }

//    public void testHashCode() throws Throwable {
//        Publication publication = new Publication( new Institution( "testPublicationShortLabel" ), "-38971" );
//        int result = publication.hashCode();
//        assertEquals( "result", 1459404515, result );
//        assertEquals( "publication.xrefs.size()", 0, publication.xrefs.size() );
//        assertEquals( "publication.shortLabel", "-38971", publication.getShortLabel() );
//        assertNull( "publication.ac", publication.getAc());
//        assertNull( "publication.fullName", publication.getFullName() );
//        assertEquals( "publication.getPmid()", "-38971", publication.getPmid() );
//    }

//    public void testSetExperiments() throws Throwable {
//        Publication publication = new Publication( new Institution( "testPublicationShortLabel" ), "-38971" );
//        Collection experiments = new ArrayList( 100 );
//        publication.setExperiments( experiments );
//        assertSame( "publication.experiments", experiments, publication.getExperiments() );
//    }

//    public void testSetPmid() throws Throwable {
//        Publication publication = new Publication( new Institution( "testPublicationShortLabel" ), "-38971" );
//        publication.setPmid( "-100000" );
//        assertEquals( "publication.getPmid()", "-100000", publication.getPmid() );
//    }

//    public void testToString() throws Throwable {
//        Collection arrayList = new ArrayList( 100 );
//        arrayList.add( new Annotation( new Institution( "testPublicationShortLabel2" ), new CvTopic( new Institution( "testPublicationShortLabel" ), "testPublicationShortLabel" ), "testPublicationAnnotationText" ) );
//        Publication publication = new Publication( new Institution( "testPublicationShortLabel1" ), "-38971" );
//        publication.annotations = arrayList;
//        String result = publication.toString();
//        assertEquals( "result", "Publication{ac='null', pmid='-38971', annotations={annotation('testPublicationShort', 'testPublicationAnnotationText')}}", result );
//        assertSame( "publication.annotations", arrayList, publication.annotations );
//    }
//
//    public void testToString1() throws Throwable {
//        Publication publication = new Publication( new Institution( "testPublicationShortLabel" ), "-38971" );
//        String result = publication.toString();
//        assertEquals( "result", "Publication{ac='null', pmid='-38971'}", result );
//        assertEquals( "publication.annotations.size()", 0, publication.annotations.size() );
//    }

    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        try {
            new Publication( new Institution( "testPublicationShortLabel" ), "" );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty short label", ex.getMessage() );
            assertThrownBy( AnnotatedObjectUtils.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new Publication( new Institution( "testPublicationShortLabel" ), null );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non null short label", ex.getMessage() );
            assertThrownBy( AnnotatedObjectUtils.class, ex );
        }
    }

//    public void testConstructorThrowsNumberFormatException() throws Throwable {
//        try {
//            new Publication( new Institution( "testPublicationShortLabel" ), "testPublicationPmid" );
//            fail( "Expected NumberFormatException to be thrown" );
//        } catch ( NumberFormatException ex ) {
//            assertEquals( "ex.getMessage()", "For input string: \"testPublicationPmid\"", ex.getMessage() );
//            assertThrownBy( NumberFormatException.class, ex );
//        }
//    }

//    public void testSetExperimentsThrowsIllegalArgumentException() throws Throwable {
//        Publication publication = new Publication( new Institution( "testPublicationShortLabel" ), "-38971" );
//        try {
//            publication.setExperiments( null );
//            fail( "Expected IllegalArgumentException to be thrown" );
//        } catch ( IllegalArgumentException ex ) {
//            assertEquals( "ex.getMessage()", "Experiments cannot be null.", ex.getMessage() );
//            assertThrownBy( Publication.class, ex );
//            assertEquals( "publication.experiments.size()", 0, publication.getExperiments().size() );
//        }
//    }

//    public void testSetPmidThrowsIllegalArgumentException() throws Throwable {
//        Publication publication = new Publication( new Institution( "testPublicationShortLabel" ), "-38971" );
//        try {
//            publication.setPmid( null );
//            fail( "Expected IllegalArgumentException to be thrown" );
//        } catch ( IllegalArgumentException ex ) {
//            assertEquals( "ex.getMessage()", "You must give a non null PubMed ID.", ex.getMessage() );
//            assertThrownBy( Publication.class, ex );
//            assertEquals( "publication.getPmid()", "-38971", publication.getPmid() );
//        }
//    }
//
//    public void testSetPmidThrowsNumberFormatException() throws Throwable {
//        Publication publication = new Publication( new Institution( "testPublicationShortLabel" ), "-38971" );
//        try {
//            publication.setPmid( "testPublicationPmid" );
//            fail( "Expected NumberFormatException to be thrown" );
//        } catch ( NumberFormatException ex ) {
//            assertEquals( "ex.getMessage()", "For input string: \"testPublicationPmid\"", ex.getMessage() );
//            assertThrownBy( NumberFormatException.class, ex );
//            assertEquals( "publication.getPmid()", "-38971", publication.getPmid() );
//        }
//    }

    public void testToStringThrowsNullPointerException() throws Throwable {
        Publication publication = new Publication( null, "-38971" );
        publication.annotations = null;
        try {
            publication.toString();
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertNull( "ex.getMessage()", ex.getMessage() );
            assertThrownBy( Publication.class, ex );
            assertNull( "publication.annotations", publication.annotations );
        }
    }
}

