/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:27:47
 * Time to generate: 00:41.589 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt;

import uk.ac.ebi.intact.model.*; 

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;

public class ComponentXrefAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = ComponentXref.class;

    public void testConstructor() throws Throwable {
        CvDatabase aDatabase = new CvDatabase( new Institution( "testComponentXrefShortLabel" ), "testComponentXrefShortLabel" );
        Institution anOwner = new Institution( "testComponentXrefShortLabel1" );
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testComponentXrefShortLabel2" ), "testComponentXrefShortLabel" );
        ComponentXref componentXref = new ComponentXref( anOwner, aDatabase, "testComponentXrefAPrimaryId", "testComponentXrefASecondaryId", "testComponentXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "componentXref.getPrimaryId()", "testComponentXrefAPrimaryId", componentXref.getPrimaryId() );
        assertEquals( "componentXref.getEvidences().size()", 0, componentXref.getEvidences().size() );
        assertEquals( "componentXref.getDbRelease()", "testComponentXrefADatabaseRelease", componentXref.getDbRelease() );
        assertSame( "componentXref.getCvXrefQualifier()", aCvXrefQualifier, componentXref.getCvXrefQualifier() );
        assertSame( "componentXref.getCvDatabase()", aDatabase, componentXref.getCvDatabase() );
        assertSame( "componentXref.getOwner()", anOwner, componentXref.getOwner() );
        assertEquals( "componentXref.getSecondaryId()", "testComponentXrefASecondaryId", componentXref.getSecondaryId() );
    }

    public void testConstructor1() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testComponentXrefShortLabel" ), "testComponentXrefShortLabel" );
        Institution anOwner = new Institution( "testComponentXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testComponentXrefShortLabel2" ), "testComponentXrefShortLabel" );
        ComponentXref componentXref = new ComponentXref( anOwner, aDatabase, "XX$ XXXXXXXX XXXX\rXX XXXXXXXXX  \t\t ", "testComponentXrefASecondaryId1", "testComponentXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "componentXref.getPrimaryId()", "XX$ XXXXXXXX XXXX\rXX XXXXXXXXX", componentXref.getPrimaryId() );
        assertEquals( "componentXref.getEvidences().size()", 0, componentXref.getEvidences().size() );
        assertEquals( "componentXref.getDbRelease()", "testComponentXrefADatabaseRelease", componentXref.getDbRelease() );
        assertSame( "componentXref.getCvXrefQualifier()", aCvXrefQualifier, componentXref.getCvXrefQualifier() );
        assertSame( "componentXref.getCvDatabase()", aDatabase, componentXref.getCvDatabase() );
        assertSame( "componentXref.getOwner()", anOwner, componentXref.getOwner() );
        assertEquals( "componentXref.getSecondaryId()", "testComponentXrefASecondaryId1", componentXref.getSecondaryId() );
    }

    public void testConstructor2() throws Throwable {
        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
        CvDatabase aDatabase = ( CvDatabase ) Mockingbird.getProxyObject( CvDatabase.class );
        CvXrefQualifier aCvXrefQualifier = ( CvXrefQualifier ) Mockingbird.getProxyObject( CvXrefQualifier.class );
        Mockingbird.enterTestMode();
        ComponentXref componentXref = new ComponentXref( anOwner, aDatabase, "X  ", "testComponentXrefASecondaryId1", "testComponentXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "componentXref.getPrimaryId()", "X", componentXref.getPrimaryId() );
        assertEquals( "componentXref.getEvidences().size()", 0, componentXref.getEvidences().size() );
        assertEquals( "componentXref.getDbRelease()", "testComponentXrefADatabaseRelease", componentXref.getDbRelease() );
        assertSame( "componentXref.getCvXrefQualifier()", aCvXrefQualifier, componentXref.getCvXrefQualifier() );
        assertSame( "componentXref.getCvDatabase()", aDatabase, componentXref.getCvDatabase() );
        assertSame( "componentXref.getOwner()", anOwner, componentXref.getOwner() );
        assertEquals( "componentXref.getSecondaryId()", "testComponentXrefASecondaryId1", componentXref.getSecondaryId() );
    }

    public void testConstructor3() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testComponentXrefShortLabel" ), "testComponentXrefShortLabel" );
        Institution anOwner = new Institution( "testComponentXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testComponentXrefShortLabel2" ), "testComponentXrefShortLabel" );
        ComponentXref componentXref = new ComponentXref( anOwner, aDatabase, "\tXXXX XXXXXXXXXXXXXX\tXXXXXXXXXXX", "testComponentXrefASecondaryId1", "testComponentXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "componentXref.getPrimaryId()", "XXXX XXXXXXXXXXXXXX\tXXXXXXXXXX", componentXref.getPrimaryId() );
        assertEquals( "componentXref.getEvidences().size()", 0, componentXref.getEvidences().size() );
        assertEquals( "componentXref.getDbRelease()", "testComponentXrefADatabaseRelease", componentXref.getDbRelease() );
        assertSame( "componentXref.getCvXrefQualifier()", aCvXrefQualifier, componentXref.getCvXrefQualifier() );
        assertSame( "componentXref.getCvDatabase()", aDatabase, componentXref.getCvDatabase() );
        assertSame( "componentXref.getOwner()", anOwner, componentXref.getOwner() );
        assertEquals( "componentXref.getSecondaryId()", "testComponentXrefASecondaryId1", componentXref.getSecondaryId() );
    }

    public void testConstructor4() throws Throwable {
        CvDatabase aDatabase = new CvDatabase( new Institution( "testComponentXrefShortLabel" ), "testComponentXrefShortLabel" );
        Institution anOwner = new Institution( "testComponentXrefShortLabel2" );
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testComponentXrefShortLabel1" ), "testComponentXrefShortLabel" );
        ComponentXref componentXref = new ComponentXref( anOwner, aDatabase, "XXXXXXXXXXXXXXXXXXX XXXX\rXXXXX\t", aCvXrefQualifier );
        assertEquals( "componentXref.getPrimaryId()", "XXXXXXXXXXXXXXXXXXX XXXX\rXXXXX", componentXref.getPrimaryId() );
        assertEquals( "componentXref.getEvidences().size()", 0, componentXref.getEvidences().size() );
        assertSame( "componentXref.getCvDatabase()", aDatabase, componentXref.getCvDatabase() );
        assertSame( "componentXref.getCvXrefQualifier()", aCvXrefQualifier, componentXref.getCvXrefQualifier() );
        assertSame( "componentXref.getOwner()", anOwner, componentXref.getOwner() );
    }

    public void testConstructor5() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testComponentXrefShortLabel" ), "testComponentXrefShortLabel" );
        Institution anOwner = new Institution( "testComponentXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testComponentXrefShortLabel2" ), "testComponentXrefShortLabel" );
        ComponentXref componentXref = new ComponentXref( anOwner, aDatabase, "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\t\r", aCvXrefQualifier );
        assertEquals( "componentXref.getPrimaryId()", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", componentXref.getPrimaryId() );
        assertEquals( "componentXref.getEvidences().size()", 0, componentXref.getEvidences().size() );
        assertSame( "componentXref.getCvDatabase()", aDatabase, componentXref.getCvDatabase() );
        assertSame( "componentXref.getCvXrefQualifier()", aCvXrefQualifier, componentXref.getCvXrefQualifier() );
        assertSame( "componentXref.getOwner()", anOwner, componentXref.getOwner() );
    }

    public void testGetParent() throws Throwable {
        Institution owner = new Institution( "testComponentXrefShortLabel" );
        AnnotatedObject result = new ComponentXref( owner, new CvDatabase( owner, "testComponentXrefShortLabel" ), "testComponentXrefAPrimaryId", "testComponentXrefASecondaryId", "testComponentXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testComponentXrefShortLabel1" ), "testComponentXrefShortLabel" ) ).getParent();
        assertNull( "result", result );
    }

    public void testGetParent1() throws Throwable {
        ComponentXref componentXref = new ComponentXref( new Institution( "testComponentXrefShortLabel2" ), new CvDatabase( new Institution( "testComponentXrefShortLabel1" ), "testComponentXrefShortLabel" ), "testComponentXrefAPrimaryId", "testComponentXrefASecondaryId", "testComponentXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testComponentXrefShortLabel" ), "testComponentXrefShortLabel" ) );
        AnnotatedObject parent = new CvGoNode();
        componentXref.setParent( parent );
        AnnotatedObject result = componentXref.getParent();
        assertSame( "result", parent, result );
    }

    public void testGetParentAc() throws Throwable {
        Institution owner = new Institution( "testComponentXrefShortLabel" );
        ComponentXref componentXref = new ComponentXref( owner, new CvDatabase( owner, "testComponentXrefShortLabel" ), "testComponentXrefAPrimaryId", new CvXrefQualifier( new Institution( "testComponentXrefShortLabel1" ), "testComponentXrefShortLabel" ) );
        String result = componentXref.getParentAc();
        assertNull( "result", result );
        assertNull( "componentXref.parentAc", getPrivateField( componentXref, "parentAc" ) );
        assertNull( "componentXref.getParent()", componentXref.getParent() );
    }

    public void testGetParentAc1() throws Throwable {
        ComponentXref componentXref = new ComponentXref( new Institution( "testComponentXrefShortLabel1" ), new CvDatabase( new Institution( "testComponentXrefShortLabel" ), "testComponentXrefShortLabel" ), "testComponentXrefAPrimaryId", "testComponentXrefASecondaryId", "testComponentXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testComponentXrefShortLabel2" ), "testComponentXrefShortLabel" ) );
        componentXref.setParentAc( "testComponentXrefParentAc" );
        String result = componentXref.getParentAc();
        assertEquals( "result", "testComponentXrefParentAc", result );
        assertEquals( "componentXref.parentAc", "testComponentXrefParentAc", getPrivateField( componentXref, "parentAc" ) );
        assertNull( "componentXref.getParent()", componentXref.getParent() );
    }

    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        try {
            new ComponentXref( new Institution( "testComponentXrefShortLabel2" ), new CvDatabase( new Institution( "testComponentXrefShortLabel1" ), "testComponentXrefShortLabel" ), "", "testComponentXrefASecondaryId", "testComponentXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testComponentXrefShortLabel" ), "testComponentXrefShortLabel" ) );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty primaryId for an Xref.", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsIllegalArgumentException1() throws Throwable {
        Institution owner = new Institution( "testComponentXrefShortLabel" );
        CvDatabase aDatabase = new CvDatabase( owner, "testComponentXrefShortLabel" );
        try {
            new ComponentXref( owner, aDatabase, "", new CvXrefQualifier( owner, "testComponentXrefShortLabel" ) );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty primaryId for an Xref.", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new ComponentXref( new Institution( "testComponentXrefShortLabel2" ), new CvDatabase( new Institution( "testComponentXrefShortLabel" ), "testComponentXrefShortLabel" ), null, "testComponentXrefASecondaryId", "testComponentXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testComponentXrefShortLabel1" ), "testComponentXrefShortLabel" ) );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Xref must have a primary ID!", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException1() throws Throwable {
        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
        CvDatabase aDatabase = ( CvDatabase ) Mockingbird.getProxyObject( CvDatabase.class );
        CvXrefQualifier aCvXrefQualifier = ( CvXrefQualifier ) Mockingbird.getProxyObject( CvXrefQualifier.class );
        Mockingbird.enterTestMode();
        try {
            new ComponentXref( anOwner, aDatabase, null, aCvXrefQualifier );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Xref must have a primary ID!", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }
}

