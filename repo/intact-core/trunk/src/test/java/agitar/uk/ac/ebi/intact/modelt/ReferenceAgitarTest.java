/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:30:19
 * Time to generate: 01:34.134 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;

import java.util.ArrayList;
import java.util.Date;

public class ReferenceAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = Reference.class;

    public void testConstructor() throws Throwable {
        Institution owner = new Institution( "testReferenceShortLabel" );
        Reference reference = new Reference( owner, "testReferenceTitle", "testReferenceAuthors" );
        assertEquals( "reference.getEvidences().size()", 0, reference.getEvidences().size() );
        assertEquals( "reference.getAuthors()", "testReferenceAuthors", reference.getAuthors() );
        assertEquals( "reference.getTitle()", "testReferenceTitle", reference.getTitle() );
        assertEquals( "reference.getAnnotatedObjects().size()", 0, reference.getAnnotatedObjects().size() );
        assertSame( "reference.getOwner()", owner, reference.getOwner() );
    }

    public void testConstructor1() throws Throwable {
        Reference reference = new Reference();
        assertEquals( "reference.getEvidences().size()", 0, reference.getEvidences().size() );
        assertEquals( "reference.getAnnotatedObjects().size()", 0, reference.getAnnotatedObjects().size() );
    }

    public void testAddAnnotatedObject() throws Throwable {
        AnnotatedObject annotatedObject = new CvModificationType( null, "testReferenceShortLabel" );
        new SubmissionRef().addAnnotatedObject( annotatedObject );
        Reference journalRef = new JournalRef( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "testReferenceAuthors", new Integer( 0 ), "testReferenceFirstpage", new CvJournal( null, "testReferenceShortLabel" ) );
        journalRef.addAnnotatedObject( annotatedObject );
        assertEquals( "(JournalRef) journalRef.getAnnotatedObjects().size()", 1, journalRef.getAnnotatedObjects().size() );
    }

    public void testAddAnnotatedObject1() throws Throwable {
        Reference reference = new Reference();
        AnnotatedObject annotatedObject = new Complex();
        reference.addAnnotatedObject( annotatedObject );
        reference.addAnnotatedObject( annotatedObject );
        assertEquals( "reference.getAnnotatedObjects().size()", 1, reference.getAnnotatedObjects().size() );
    }

    public void testEquals() throws Throwable {
        boolean result = new Reference( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "testReferenceAuthors" ).equals( new Integer( 2 ) );
        assertFalse( "result", result );
    }

    public void testEquals1() throws Throwable {
        Reference reference = new Reference( new Institution( "testReferenceShortLabel" ), "testString", "testString" );
        Reference o = new Reference();
        o.setTitle( "testString" );
        o.setAuthors( "testString" );
        boolean result = reference.equals( o );
        assertTrue( "result", result );
    }

    public void testEquals2() throws Throwable {
        boolean result = new SubmissionRef().equals( new SubmissionRef() );
        assertTrue( "result", result );
    }

    public void testEquals3() throws Throwable {
        Reference reference = new Reference( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "testString" );
        boolean result = reference.equals( new Reference( new Institution( "testReferenceShortLabel1" ), "testReferenceTitle1", "testString" ) );
        assertFalse( "result", result );
    }

    public void testEquals4() throws Throwable {
        Reference submissionRef = new SubmissionRef();
        submissionRef.setAuthors( "valiEd Reference must have a non-null title!" );
        boolean result = submissionRef.equals( new Reference( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "valiEd Reference must have a non-null title!" ) );
        assertFalse( "result", result );
    }

    public void testEquals5() throws Throwable {
        Reference reference = new Reference();
        reference.setAuthors( "testReferenceAuthors" );
        boolean result = reference.equals( new Reference( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "testReferenceAuthors1" ) );
        assertFalse( "result", result );
    }

    public void testEquals6() throws Throwable {
        boolean result = new SubmissionRef().equals( new Reference( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "testReferenceAuthors" ) );
        assertFalse( "result", result );
    }

    public void testEquals7() throws Throwable {
        Reference o = new Reference();
        boolean result = o.equals( o );
        assertTrue( "result", result );
    }

    public void testGetAnnotatedObjects() throws Throwable {
        ArrayList result = ( ArrayList ) new Reference().getAnnotatedObjects();
        assertEquals( "result.size()", 0, result.size() );
    }

    public void testGetAnnotatedObjects1() throws Throwable {
        Reference reference = new Reference();
        AnnotatedObject annotatedObject = new CvExperimentalRole( new Institution( "testReferenceShortLabel" ), "testReferenceShortLabel" );
        reference.addAnnotatedObject( annotatedObject );
        ArrayList result = ( ArrayList ) reference.getAnnotatedObjects();
        assertEquals( "result.size()", 1, result.size() );
        assertTrue( "(ArrayList) result.contains(annotatedObject)", result.contains( annotatedObject ) );
    }

    public void testGetSubmissionRefAc() throws Throwable {
        Reference submissionRef = new SubmissionRef( ( Institution ) new Institution( "testReferenceShortLabel" ).clone(), "testReferenceTitle", "testReferenceAuthors", new Reference(), new Date() );
        submissionRef.setSubmissionRefAc( "testReferenceAc" );
        String result = submissionRef.getSubmissionRefAc();
        assertEquals( "result", "testReferenceAc", result );
    }

    public void testGetSubmissionRefAc1() throws Throwable {
        String result = new SubmissionRef( ( Institution ) new Institution( "testReferenceShortLabel" ).clone(), "testReferenceTitle", "testReferenceAuthors", new Reference(), new Date() ).getSubmissionRefAc();
        assertNull( "result", result );
    }

    public void testGetXrefAc() throws Throwable {
        Reference reference = new Reference();
        reference.setXrefAc( "testReferenceAc" );
        String result = reference.getXrefAc();
        assertEquals( "result", "testReferenceAc", result );
    }

    public void testGetXrefAc1() throws Throwable {
        String result = new Reference().getXrefAc();
        assertNull( "result", result );
    }

    public void testHashCode() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef();
        Reference reference = new Reference();
        reference.setAuthors( "testReferenceAuthors" );
        reference.setSubmissionRef( submissionRef );
        int result = reference.hashCode();
        assertEquals( "result", 2010105191, result );
        assertNull( "reference.xref", getPrivateField( reference, "xref" ) );
        assertEquals( "reference.getAuthors()", "testReferenceAuthors", reference.getAuthors() );
        assertNull( "reference.getTitle()", reference.getTitle() );
        assertSame( "reference.getSubmissionRef()", submissionRef, reference.getSubmissionRef() );
    }

    public void testHashCode1() throws Throwable {
        Reference reference = new Reference( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "testReferenceAuthors" );
        int result = reference.hashCode();
        assertEquals( "result", -1187486430, result );
        assertNull( "reference.xref", getPrivateField( reference, "xref" ) );
        assertEquals( "reference.getAuthors()", "testReferenceAuthors", reference.getAuthors() );
        assertEquals( "reference.getTitle()", "testReferenceTitle", reference.getTitle() );
        assertNull( "reference.getSubmissionRef()", reference.getSubmissionRef() );
    }

    public void testHashCode2() throws Throwable {
        Reference submissionRef = new SubmissionRef();
        int result = submissionRef.hashCode();
        assertEquals( "result", 0, result );
        assertNull( "(SubmissionRef) submissionRef.xref", getPrivateField( submissionRef, "xref" ) );
        assertNull( "(SubmissionRef) submissionRef.getAuthors()", submissionRef.getAuthors() );
        assertNull( "(SubmissionRef) submissionRef.getTitle()", submissionRef.getTitle() );
        assertNull( "(SubmissionRef) submissionRef.getSubmissionRef()", submissionRef.getSubmissionRef() );
    }

    public void testHashCode3() throws Throwable {
        Reference reference = new Reference();
        SubmissionRef submissionRef = new SubmissionRef();
        reference.setSubmissionRef( submissionRef );
        int result = reference.hashCode();
        assertEquals( "result", 0, result );
        assertNull( "reference.xref", getPrivateField( reference, "xref" ) );
        assertNull( "reference.getAuthors()", reference.getAuthors() );
        assertNull( "reference.getTitle()", reference.getTitle() );
        assertSame( "reference.getSubmissionRef()", submissionRef, reference.getSubmissionRef() );
    }

    public void testHashCode4() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef( new Institution( "testReferenceShortLabel1" ), "testReferenceTitle", "testReferenceAuthors", new SubmissionRef(), null );
        Reference reference = new Reference( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "testReferenceAuthors" );
        reference.setSubmissionRef( submissionRef );
        int result = reference.hashCode();
        assertEquals( "result", -1264854532, result );
        assertNull( "reference.xref", getPrivateField( reference, "xref" ) );
        assertEquals( "reference.getAuthors()", "testReferenceAuthors", reference.getAuthors() );
        assertEquals( "reference.getTitle()", "testReferenceTitle", reference.getTitle() );
        assertSame( "reference.getSubmissionRef()", submissionRef, reference.getSubmissionRef() );
    }

    public void testHashCode5() throws Throwable {
        Reference submissionRef = new SubmissionRef();
        submissionRef.setAuthors( "testReferenceAuthors" );
        int result = submissionRef.hashCode();
        assertEquals( "result", 2010105191, result );
        assertNull( "(SubmissionRef) submissionRef.xref", getPrivateField( submissionRef, "xref" ) );
        assertEquals( "(SubmissionRef) submissionRef.getAuthors()", "testReferenceAuthors", submissionRef.getAuthors() );
        assertNull( "(SubmissionRef) submissionRef.getTitle()", submissionRef.getTitle() );
        assertNull( "(SubmissionRef) submissionRef.getSubmissionRef()", submissionRef.getSubmissionRef() );
    }

    public void testHashCode6() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef();
        Reference reference = new Reference( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "testReferenceAuthors" );
        reference.setSubmissionRef( submissionRef );
        int result = reference.hashCode();
        assertEquals( "result", -1187486430, result );
        assertNull( "reference.xref", getPrivateField( reference, "xref" ) );
        assertEquals( "reference.getAuthors()", "testReferenceAuthors", reference.getAuthors() );
        assertEquals( "reference.getTitle()", "testReferenceTitle", reference.getTitle() );
        assertSame( "reference.getSubmissionRef()", submissionRef, reference.getSubmissionRef() );
    }

    public void testRemoveAnnotatedObject() throws Throwable {
        AnnotatedObject annotatedObject = new CvModificationType( null, "testReferenceShortLabel" );
        new SubmissionRef().addAnnotatedObject( annotatedObject );
        Reference journalRef = new JournalRef( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "testReferenceAuthors", new Integer( 0 ), "testReferenceFirstpage", new CvJournal( null, "testReferenceShortLabel" ) );
        journalRef.addAnnotatedObject( annotatedObject );
        journalRef.removeAnnotatedObject( annotatedObject );
        assertEquals( "(JournalRef) journalRef.getAnnotatedObjects().size()", 0, journalRef.getAnnotatedObjects().size() );
    }

    public void testRemoveAnnotatedObject1() throws Throwable {
        Reference submissionRef = new SubmissionRef();
        AnnotatedObject annotatedObject = new Complex();
        submissionRef.addAnnotatedObject( annotatedObject );
        Reference clone = ( Reference ) submissionRef.clone();
        clone.setAuthors( "testReferenceAuthors" );
        clone.removeAnnotatedObject( annotatedObject );
        assertEquals( "(SubmissionRef) clone.getAnnotatedObjects().size()", 0, clone.getAnnotatedObjects().size() );
    }

    public void testRemoveAnnotatedObject2() throws Throwable {
        Reference submissionRef = new SubmissionRef();
        submissionRef.removeAnnotatedObject( new Complex() );
        assertEquals( "(SubmissionRef) submissionRef.getAnnotatedObjects().size()", 0, submissionRef.getAnnotatedObjects().size() );
    }

    public void testSetAuthors() throws Throwable {
        Reference reference = new Reference();
        reference.setAuthors( "testReferenceAuthors" );
        assertEquals( "reference.getAuthors()", "testReferenceAuthors", reference.getAuthors() );
    }

    public void testSetSubmissionRef() throws Throwable {
        Reference reference = new Reference();
        SubmissionRef submissionRef = new SubmissionRef();
        reference.setSubmissionRef( submissionRef );
        assertSame( "reference.getSubmissionRef()", submissionRef, reference.getSubmissionRef() );
    }

    public void testSetSubmissionRef1() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef( ( Institution ) new Institution( "testReferenceShortLabel" ).clone(), "testReferenceTitle", "testReferenceAuthors", new Reference(), new Date() );
        Reference reference = new Reference();
        reference.setSubmissionRef( submissionRef );
        reference.setSubmissionRef( submissionRef );
        assertSame( "reference.getSubmissionRef()", submissionRef, reference.getSubmissionRef() );
        assertNull( "submissionRef.getReferenceAc()", submissionRef.getReferenceAc() );
    }

    public void testSetSubmissionRef2() throws Throwable {
        Reference reference = new Reference( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "testReferenceAuthors" );
        reference.setSubmissionRef( new SubmissionRef() );
        reference.setSubmissionRef( null );
        assertNull( "reference.getSubmissionRef()", reference.getSubmissionRef() );
    }

    public void testSetSubmissionRef3() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef( ( Institution ) new Institution( "testReferenceShortLabel" ).clone(), "testReferenceTitle", "testReferenceAuthors", new Reference(), new Date() );
        submissionRef.setSubmissionRef( submissionRef );
        submissionRef.setSubmissionRef( null );
        submissionRef.setSubmissionRef( submissionRef );
        assertSame( "submissionRef.getSubmissionRef()", submissionRef, submissionRef.getSubmissionRef() );
    }

    public void testSetSubmissionRefAc() throws Throwable {
        Reference reference = new Reference();
        reference.setSubmissionRefAc( "testReferenceAc" );
        assertEquals( "reference.submissionRefAc", "testReferenceAc", reference.getSubmissionRefAc() );
    }

    public void testSetTitle() throws Throwable {
        Reference reference = new Reference();
        reference.setTitle( "testReferenceTitle" );
        assertEquals( "reference.getTitle()", "testReferenceTitle", reference.getTitle() );
    }

    public void testSetXrefAc() throws Throwable {
        Reference reference = new Reference();
        reference.setXrefAc( "testReferenceAc" );
        assertEquals( "reference.xrefAc", "testReferenceAc", reference.getXrefAc() );
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new Reference( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", null );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Reference must have a non-null authors!", ex.getMessage() );
            assertThrownBy( Reference.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException1() throws Throwable {
        try {
            new Reference( new Institution( "testReferenceShortLabel" ), null, "testReferenceAuthors" );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Reference must have a non-null title!", ex.getMessage() );
            assertThrownBy( Reference.class, ex );
        }
    }

    public void testAddAnnotatedObjectThrowsNullPointerException() throws Throwable {
        Reference submissionRef = new SubmissionRef( ( Institution ) new Institution( "testReferenceShortLabel" ).clone(), "testReferenceTitle", "testReferenceAuthors", new Reference(), new Date() );
        AnnotatedObject annotatedObject = new CvGoNode();
        try {
            submissionRef.addAnnotatedObject( annotatedObject );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertNull( "ex.getMessage()", ex.getMessage() );
            assertThrownBy( CvObject.class, ex );
            assertEquals( "(SubmissionRef) submissionRef.getAnnotatedObjects().size()", 1, submissionRef.getAnnotatedObjects().size() );
        }
    }

    public void testHashCodeThrowsStackOverflowError() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef( ( Institution ) new Institution( "testReferenceShortLabel1" ).clone(), "testReferenceTitle", "testReferenceAuthors", new Reference(), new Date() );
        submissionRef.setSubmissionRef( submissionRef );
        Reference reference = new Reference( new Institution( "testReferenceShortLabel" ), "testReferenceTitle", "testReferenceAuthors" );
        reference.setSubmissionRef( submissionRef );
        try {
            reference.hashCode();
            fail( "Expected StackOverflowError to be thrown" );
        } catch ( StackOverflowError ex ) {
            assertEquals( "ex.getClass()", StackOverflowError.class, ex.getClass() );
            assertEquals( "reference.getAuthors()", "testReferenceAuthors", reference.getAuthors() );
            assertEquals( "reference.getTitle()", "testReferenceTitle", reference.getTitle() );
            assertNull( "reference.xref", getPrivateField( reference, "xref" ) );
            assertSame( "reference.getSubmissionRef()", submissionRef, reference.getSubmissionRef() );
        }
    }

    public void testHashCodeThrowsStackOverflowError1() throws Throwable {
        SubmissionRef submissionRef = new SubmissionRef( ( Institution ) new Institution( "testReferenceShortLabel" ).clone(), "testReferenceTitle", "testReferenceAuthors", new Reference(), new Date() );
        submissionRef.setSubmissionRef( submissionRef );
        Reference submissionRef2 = new SubmissionRef();
        submissionRef2.setTitle( "testReferenceTitle" );
        SubmissionRef submissionRef3 = new SubmissionRef();
        submissionRef3.setSubmissionRef( submissionRef );
        submissionRef3.setTitle( "testReferenceTitle1" );
        submissionRef2.setSubmissionRef( submissionRef3 );
        try {
            submissionRef2.hashCode();
            fail( "Expected StackOverflowError to be thrown" );
        } catch ( StackOverflowError ex ) {
            assertEquals( "ex.getClass()", StackOverflowError.class, ex.getClass() );
            assertNull( "(SubmissionRef) submissionRef2.getAuthors()", submissionRef2.getAuthors() );
            assertEquals( "(SubmissionRef) submissionRef2.getTitle()", "testReferenceTitle", submissionRef2.getTitle() );
            assertNull( "(SubmissionRef) submissionRef2.xref", getPrivateField( submissionRef2, "xref" ) );
            assertSame( "(SubmissionRef) submissionRef2.getSubmissionRef()", submissionRef3, submissionRef2.getSubmissionRef() );
        }
    }
}

