 -----
 Migration from OJB to Hibernate
 -----

Purpose of this chapter.

 The purpose of this chapter is -given some exemple- help you to move your
 code to the new IntactCore relying on Hibernate.

What are the changes to do?

 You will have to type of changes :

    * remove all IntactHelper usage. This class has totaly disappeared from
    our code and won't be maintained.

    * remove any call to ojb classes (org.apache.ojb.) like import org.apache.ojb.broker.query.Query.

Which version of the intact-core should you use to migrate?

 In the last version of the intact-core, ojb and hibernate are not co-existing. This
 means that if you decide to use this one, you will need to remove all the IntactHelper
 at once, then compile and keep your finger crossed so that it works.
 Instead, what you can do, is to use the version : 1.1.1 . There the OJB and Hibernate co-exist
 so you can move progressively and test, step by step.
 To do a checkout of the intact-core 1.1.1 :

+-----+
svn co https://svn.sourceforge.net/svnroot/intact/repo/intact-core/tags/1_1_1
+-----+

 If you are using maven for your application, you can just add in the pom.xml
 of your application a dependency :

+-----+
<dependencies>

       ...

        <!-- Needed by the EditorTopic plugin -->
         <dependency>
            <groupId>uk.ac.ebi.intact</groupId>
            <artifactId>intact-core</artifactId>
            <version>1.1.1</version>
        </dependency>

        ...

</dependencies>
+-----+

Removing IntactHelper usages using IntactCore 1.1.1

 The classes that replace the IntactHelper are to be found in the package : uk.ac.ebi.intact.persistence.dao
 Here are some exemple :

 Before to search for an experiment by its shortlabel you would have done :

+-----+
IntactHelper helper = new IntactHelper();
Experiment experiment = helper.getObjectByLabel(Experiment.class, "butkevich-2004-1");
helper.closeStore();
+-----+

 Now you would do :

+-----+
//Opening the transaction.
private IntactTransaction tx = DaoFactory.beginTransaction();
// Get the ExperimentDao.
ExperimentDao experimentDao = DaoFactory.getExperimentDao();
// Get the experiment by label.
Experiment experiment = experimentDao.getByShortLabel("butkevich-2004-1");
//Close the Hibernate transaction
tx.commit();
+-----+

 If you have a look the DaoExperiment has lots of other methods :

   * getByAc(String ac) (will get the experiment have the ac given in parameter)

   * getByXrefLike(CvDatabase database, CvXrefQualifier qualifier, String primaryId)(will
     the experiment have an xref with the database, qualifier, and primaryId given in
     paremeter.

   * saveOrUpdate()

 If you would like to do the same (i.e. searchByAc(), searchByShortlabel()...) for
 a Protein and not for an Experiment. You would do as follow :

+-----+
//Opening the transaction.
IntactTransaction tx = DaoFactory.beginTransaction();
//Get the proteinDao.
ProteinDao proteinDao =  DaoFactory.getProteinDao();
proteinDao.getByAc("EBI-141");
tx.commit();
+-----+

 If you need to get a CvObject you could in the same way get the CvObjectDao and use the method getByXref()...etc
 but the best is to use the CvContext class. At the first time you ask for a particular cv, it will load it from the
 database and store it in a map. The second time you ask for this cv it will take it from the map. You have as well
 some methods to force the reload or to update the cvs loaded in the CvContext in the case you would update
 a cv in the database.

Removing OJB query usage

 If you have an ojb Query, you can replace it by a new method in the relevant Dao (ExperimentDao,
 AnnotatedObjectDao...).
 Let's take an exemple, here is the ojb method :

+-----+
public Query getSearchQuery(Class clazz, String value) {
        // Replace * with % for SQL
        String sqlValue = value.replaceAll("\\*", "%");

        //Criteria 1 : the ac should be like "sqlvalue".
        Criteria crit1 = new Criteria();
        crit1.addLike("ac", sqlValue);

        //Criteria 2 : the shortlabel should be like "sqlvalue"
        Criteria crit2 = new Criteria();
        crit2.addLike("shortLabel", sqlValue);

        // Ac or shortlabel should be like "sqlvalue"
        crit1.addOrCriteria(crit2);

        ReportQueryByCriteria query = QueryFactory.newReportQuery(clazz, crit1);
        // Limit to ac and shortlabel
        query.setAttributes(new String[] {"ac", "shortLabel", "fullName","created_user","userstamp","created","updated" });
        // Sorts on shortlabel
        query.addOrderByAscending("shortLabel");
        return query;
}
+-----+

 As you can see when this query is run it will search in the table corresponding to the class clazz (ex : ia_experiment
 if class is Experiment.class) all the experiment having the shortlabel or the ac like the given sqlvalue (ex : "EBI-123%"
 or "gavin-200%"...etc).

 To replace this ojb query we could add a method getByShortlabelOrAcLike(String searchString) in the AnnotatedObjectDaoImpl.

 Here is the code :

+-----+
public List<T> getByShortlabelOrAcLike(String searchString){
        return getSession().createCriteria(getEntityClass()).addOrder(Order.asc("shortLabel"))
                .add(Restrictions.or(
                        Restrictions.like("ac",searchString).ignoreCase(),
                        Restrictions.like("shortLabel",searchString).ignoreCase())).list();
}
+-----+

 Then to use it, you can just do as follow :

+-----+
//Opening the transaction.
IntactTransaction tx = DaoFactory.beginTransaction();
ExperimentDao experimentDao = DaoFactory.getExperimentDao();
Collection<Experiments> experiments = experimentDao.getByShortlabelOrAcLike("butland-%");
tx.commit();
+-----+

For web applications

 Opening and closing a transaction can be a bit of a pain, so what you can do is create a Filter that will open the
 transaction at the begining of the request and close it at the end of the request.
 Be carefull, if you load an objet at a request, you might have to reload it at the next request because some information
 are loaded from the data base only if you need them, if you try to get those informations after having closing the
 transaction that loaded the object you will get a org.hibernate.LazyInitializationException.

I have removed all the call to IntactHelper and ojb classes what shall I do?

 You should move to intact-core 1.4.1. To load it :

+-----+
svn co https://svn.sourceforge.net/svnroot/intact/repo/intact-core/tags/1_1_4
+-----+

 With intact-core 1.1.1 to get an experiment by it's shortlabel you used to do :

+-----+
//Opening the transaction.
private IntactTransaction tx = DaoFactory.beginTransaction();
// Get the ExperimentDao.
ExperimentDao experimentDao = DaoFactory.getExperimentDao();
// Get the experiment by label.
Experiment experiment = experimentDao.getByShortLabel("butkevich-2004-1");
//Close the Hibernate transaction
tx.commit();
+-----+

 now with intact-core 1.4.1 you will do :

+-----+
// Get the ExperimentDao. IntactContext.getCurrentInstance().getDataContext().getDaoFactory() will as well automatically open an Hibernate transaction
ExperimentDao experimentDao = IntactContext.getCurrentInstance().getDataContext().getDaoFactory().getExperimentDao();
// Get the experiment by label.
Experiment experiment = experimentDao.getByShortLabel("butkevich-2004-1");
//Close the Hibernate transaction
IntactContext.getCurrentInstance().getDataContext().commitTransaction();
+-----+

 This implies, that you will have to remove all the calls to the static methods of DaoFactory (DaoFactory.getExperiment(),
 DaoFactory.getCvObject()...etc) as they do not exist anymore.

 It might be a bit heavy to write everytime :

+-----+
IntactContext.getCurrentInstance().getDataContext().getDaoFactory()
+-----+

 So you can replace it by a class DaoFactoryProvider with on static method inside :

+-----+
public static DaoFactory getDaoFactory(){
return IntactContext.getCurrentInstance().getDataContext().getDaoFactory();
}
+-----+

 Then you would use it that way :

+-----+
// Get the ExperimentDao. IntactContext.getCurrentInstance().getDataContext().getDaoFactory() will as well automatically
// open an Hibernate transaction
ExperimentDao experimentDao = DaoFactoryProvide.getDaoFactory().getExperimentDao();
// Get the experiment by label.
Experiment experiment = experimentDao.getByShortLabel("butkevich-2004-1");
//Close the Hibernate transaction
IntactContext.getCurrentInstance().getDataContext().commitTransaction();
+-----+


