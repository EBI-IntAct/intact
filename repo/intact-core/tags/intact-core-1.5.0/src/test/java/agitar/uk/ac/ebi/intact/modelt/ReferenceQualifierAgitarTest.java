/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:30:20
 * Time to generate: 00:23.895 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;

import java.util.Date;

public class ReferenceQualifierAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = ReferenceQualifier.class;

    public void testConstructor() throws Throwable {
        Reference reference = new Reference();
        CvReferenceQualifier cvReferenceQualifier = new CvReferenceQualifier( "testReferenceQualifierShortLabel", new Institution( "testReferenceQualifierShortLabel" ) );
        ReferenceQualifier referenceQualifier = new ReferenceQualifier( reference, cvReferenceQualifier );
        assertSame( "referenceQualifier.getCvReferenceQualifier()", cvReferenceQualifier, referenceQualifier.getCvReferenceQualifier() );
        assertSame( "referenceQualifier.getReference()", reference, referenceQualifier.getReference() );
    }

    public void testConstructor1() throws Throwable {
        ReferenceQualifier referenceQualifier = new ReferenceQualifier();
        assertNull( "referenceQualifier.getCvReferenceQualifierAc()", referenceQualifier.getCvReferenceQualifierAc() );
    }

    public void testEquals() throws Throwable {
        boolean result = new ReferenceQualifier().equals( "testString" );
        assertFalse( "result", result );
    }

    public void testEquals1() throws Throwable {
        CvReferenceQualifier cvReferenceQualifier = new CvReferenceQualifier( "testReferenceQualifierShortLabel", new Institution( "testReferenceQualifierShortLabel" ) );
        Reference reference = new SubmissionRef();
        ReferenceQualifier referenceQualifier = new ReferenceQualifier( reference, cvReferenceQualifier );
        boolean result = referenceQualifier.equals( new ReferenceQualifier( new SubmissionRef(), cvReferenceQualifier ) );
        assertTrue( "result", result );
        assertSame( "referenceQualifier.getCvReferenceQualifier()", cvReferenceQualifier, referenceQualifier.getCvReferenceQualifier() );
        assertSame( "referenceQualifier.getReference()", reference, referenceQualifier.getReference() );
    }

    public void testEquals2() throws Throwable {
        boolean result = new ReferenceQualifier().equals( new ReferenceQualifier() );
        assertTrue( "result", result );
    }

    public void testEquals3() throws Throwable {
        Institution owner = new Institution( "testReferenceQualifierShortLabel" );
        CvReferenceQualifier cvReferenceQualifier = new CvReferenceQualifier( "testReferenceQualifierShortLabel", owner );
        Reference reference = new Reference( owner, "testReferenceQualifierTitle", "testReferenceQualifierAuthors" );
        ReferenceQualifier o = new ReferenceQualifier( new Reference(), cvReferenceQualifier );
        ReferenceQualifier referenceQualifier = new ReferenceQualifier( reference, cvReferenceQualifier );
        boolean result = referenceQualifier.equals( o );
        assertFalse( "result", result );
        assertSame( "referenceQualifier.getCvReferenceQualifier()", cvReferenceQualifier, referenceQualifier.getCvReferenceQualifier() );
        assertSame( "referenceQualifier.getReference()", reference, referenceQualifier.getReference() );
    }

    public void testEquals4() throws Throwable {
        CvReferenceQualifier cvReferenceQualifier = new CvReferenceQualifier( "testReferenceQualifierShortLabel", new Institution( "testReferenceQualifierShortLabel" ) );
        ReferenceQualifier referenceQualifier = new ReferenceQualifier( new Reference(), cvReferenceQualifier );
        boolean result = referenceQualifier.equals( new ReferenceQualifier() );
        assertFalse( "result", result );
        assertSame( "referenceQualifier.getCvReferenceQualifier()", cvReferenceQualifier, referenceQualifier.getCvReferenceQualifier() );
    }

    public void testEquals5() throws Throwable {
        boolean result = new ReferenceQualifier().equals( new ReferenceQualifier( new Reference(), new CvReferenceQualifier( "testReferenceQualifierShortLabel", new Institution( "testReferenceQualifierShortLabel" ) ) ) );
        assertFalse( "result", result );
    }

    public void testEquals6() throws Throwable {
        ReferenceQualifier o = new ReferenceQualifier();
        boolean result = o.equals( o );
        assertTrue( "result", result );
    }

    public void testGetCvReferenceQualifierAc() throws Throwable {
        String result = new ReferenceQualifier( new Reference(), new CvReferenceQualifier( "testReferenceQualifierShortLabel", new Institution( "testReferenceQualifierShortLabel" ) ) ).getCvReferenceQualifierAc();
        assertNull( "result", result );
    }

    public void testGetCvReferenceQualifierAc1() throws Throwable {
        ReferenceQualifier referenceQualifier = new ReferenceQualifier();
        referenceQualifier.cvReferenceQualifierAc = "testString";
        String result = referenceQualifier.getCvReferenceQualifierAc();
        assertEquals( "result", "testString", result );
    }

    public void testGetReferenceAc() throws Throwable {
        Institution owner = new Institution( "testReferenceQualifierShortLabel1" );
        Reference reference = new JournalRef( owner, "testReferenceQualifierTitle", "testReferenceQualifierAuthors", new Integer( 0 ), "testReferenceQualifierFirstpage", new CvJournal( new Institution( "testReferenceQualifierShortLabel" ), "testReferenceQualifierShortLabel" ) );
        String result = new ReferenceQualifier( reference, new CvReferenceQualifier( "testReferenceQualifierShortLabel", owner ) ).getReferenceAc();
        assertNull( "result", result );
    }

    public void testGetReferenceAc1() throws Throwable {
        ReferenceQualifier referenceQualifier = new ReferenceQualifier();
        referenceQualifier.referenceAc = "}a+dmL/K{Kf*x0%";
        String result = referenceQualifier.getReferenceAc();
        assertEquals( "result", "}a+dmL/K{Kf*x0%", result );
    }

    public void testHashCode() throws Throwable {
        Reference reference = new Reference();
        CvReferenceQualifier cvReferenceQualifier = new CvReferenceQualifier( "testReferenceQualifierShortLabel", new Institution( "testReferenceQualifierShortLabel" ) );
        ReferenceQualifier referenceQualifier = new ReferenceQualifier( reference, cvReferenceQualifier );
        int result = referenceQualifier.hashCode();
        assertEquals( "result", 1967628157, result );
        assertSame( "referenceQualifier.getCvReferenceQualifier()", cvReferenceQualifier, referenceQualifier.getCvReferenceQualifier() );
        assertSame( "referenceQualifier.getReference()", reference, referenceQualifier.getReference() );
    }

    public void testHashCode1() throws Throwable {
        ReferenceQualifier referenceQualifier = new ReferenceQualifier();
        Reference reference = new SubmissionRef();
        referenceQualifier.setReference( reference );
        int result = referenceQualifier.hashCode();
        assertEquals( "result", 0, result );
        assertNull( "referenceQualifier.getCvReferenceQualifier()", referenceQualifier.getCvReferenceQualifier() );
        assertSame( "referenceQualifier.getReference()", reference, referenceQualifier.getReference() );
    }

    public void testHashCode2() throws Throwable {
        ReferenceQualifier referenceQualifier = new ReferenceQualifier();
        int result = referenceQualifier.hashCode();
        assertEquals( "result", 0, result );
        assertNull( "referenceQualifier.getCvReferenceQualifier()", referenceQualifier.getCvReferenceQualifier() );
        assertNull( "referenceQualifier.getReference()", referenceQualifier.getReference() );
    }

    public void testSetCvReferenceQualifier() throws Throwable {
        ReferenceQualifier referenceQualifier = new ReferenceQualifier();
        CvReferenceQualifier cvReferenceQualifier = new CvReferenceQualifier( "testReferenceQualifierShortLabel", new Institution( "testReferenceQualifierShortLabel" ) );
        referenceQualifier.setCvReferenceQualifier( cvReferenceQualifier );
        assertSame( "referenceQualifier.getCvReferenceQualifier()", cvReferenceQualifier, referenceQualifier.getCvReferenceQualifier() );
    }

    public void testSetCvReferenceQualifierAc() throws Throwable {
        ReferenceQualifier referenceQualifier = new ReferenceQualifier();
        referenceQualifier.setCvReferenceQualifierAc( "testReferenceQualifierAc" );
        assertEquals( "referenceQualifier.cvReferenceQualifierAc", "testReferenceQualifierAc", referenceQualifier.cvReferenceQualifierAc );
    }

    public void testSetReference() throws Throwable {
        Reference reference = new JournalRef( new Institution( "testReferenceQualifierShortLabel1" ), "testReferenceQualifierTitle", "testReferenceQualifierAuthors", new Integer( 0 ), "testReferenceQualifierFirstpage", new CvJournal( new Institution( "testReferenceQualifierShortLabel" ), "testReferenceQualifierShortLabel" ) );
        ReferenceQualifier referenceQualifier = new ReferenceQualifier();
        referenceQualifier.setReference( reference );
        assertSame( "referenceQualifier.getReference()", reference, referenceQualifier.getReference() );
    }

    public void testSetReferenceAc() throws Throwable {
        ReferenceQualifier referenceQualifier = new ReferenceQualifier();
        referenceQualifier.setReferenceAc( "testReferenceQualifierAc" );
        assertEquals( "referenceQualifier.referenceAc", "testReferenceQualifierAc", referenceQualifier.referenceAc );
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        try {
            new ReferenceQualifier( null, new CvReferenceQualifier( "testReferenceQualifierShortLabel", new Institution( "testReferenceQualifierShortLabel" ) ) );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid ReferenceQualifier must have a non-null reference!", ex.getMessage() );
            assertThrownBy( ReferenceQualifier.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException1() throws Throwable {
        try {
            new ReferenceQualifier( new Reference(), null );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid ReferenceQualifier must have a non-null cvReferenceQualifier!", ex.getMessage() );
            assertThrownBy( ReferenceQualifier.class, ex );
        }
    }

    public void testHashCodeThrowsStackOverflowError() throws Throwable {
        Institution owner = new Institution( "testReferenceQualifierShortLabel" );
        CvReferenceQualifier cvReferenceQualifier = new CvReferenceQualifier( "testReferenceQualifierShortLabel", owner );
        SubmissionRef submissionRef = new SubmissionRef( new Institution( "testReferenceQualifierShortLabel2" ), "testReferenceQualifierTitle", "testReferenceQualifierAuthors", new JournalRef( new Institution( "testReferenceQualifierShortLabel1" ), "testReferenceQualifierTitle", "testReferenceQualifierAuthors", new Integer( 0 ), "testReferenceQualifierFirstpage", new CvJournal( owner, "testReferenceQualifierShortLabel" ) ), new Date() );
        submissionRef.setSubmissionRef( submissionRef );
        ReferenceQualifier referenceQualifier = new ReferenceQualifier( submissionRef, cvReferenceQualifier );
        try {
            referenceQualifier.hashCode();
            fail( "Expected StackOverflowError to be thrown" );
        } catch ( StackOverflowError ex ) {
            assertEquals( "ex.getClass()", StackOverflowError.class, ex.getClass() );
            assertSame( "referenceQualifier.getCvReferenceQualifier()", cvReferenceQualifier, referenceQualifier.getCvReferenceQualifier() );
            assertSame( "referenceQualifier.getReference()", submissionRef, referenceQualifier.getReference() );
        }
    }
}

