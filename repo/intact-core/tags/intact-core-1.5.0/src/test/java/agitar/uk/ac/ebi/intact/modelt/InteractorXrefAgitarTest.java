/**
 * Generated by Agitar build: Agitator Version 1.0.4.000276 (Build date: Mar 27, 2007) [1.0.4.000276]
 * JDK Version: 1.5.0_09
 *
 * Generated on 04-Apr-2007 08:29:44
 * Time to generate: 00:47.302 seconds
 *
 */

package agitar.uk.ac.ebi.intact.modelt; import uk.ac.ebi.intact.model.*;

import com.agitar.lib.junit.AgitarTestCase;
import com.agitar.lib.mockingbird.Mockingbird;

public class InteractorXrefAgitarTest extends AgitarTestCase {

    static Class TARGET_CLASS = InteractorXref.class;

    public void testConstructor() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testInteractorXrefShortLabel" ), "testInteractorXrefShortLabel" );
        Institution anOwner = new Institution( "testInteractorXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testInteractorXrefShortLabel2" ), "testInteractorXrefShortLabel" );
        InteractorXref interactorXref = new InteractorXref( anOwner, aDatabase, "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\t\r", aCvXrefQualifier );
        assertEquals( "interactorXref.getPrimaryId()", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", interactorXref.getPrimaryId() );
        assertEquals( "interactorXref.getEvidences().size()", 0, interactorXref.getEvidences().size() );
        assertSame( "interactorXref.getCvDatabase()", aDatabase, interactorXref.getCvDatabase() );
        assertSame( "interactorXref.getCvXrefQualifier()", aCvXrefQualifier, interactorXref.getCvXrefQualifier() );
        assertSame( "interactorXref.getOwner()", anOwner, interactorXref.getOwner() );
    }

    public void testConstructor1() throws Throwable {
        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
        CvDatabase aDatabase = ( CvDatabase ) Mockingbird.getProxyObject( CvDatabase.class );
        CvXrefQualifier aCvXrefQualifier = ( CvXrefQualifier ) Mockingbird.getProxyObject( CvXrefQualifier.class );
        Mockingbird.enterTestMode();
        InteractorXref interactorXref = new InteractorXref( anOwner, aDatabase, "1", aCvXrefQualifier );
        assertEquals( "interactorXref.getPrimaryId()", "1", interactorXref.getPrimaryId() );
        assertEquals( "interactorXref.getEvidences().size()", 0, interactorXref.getEvidences().size() );
        assertSame( "interactorXref.getCvDatabase()", aDatabase, interactorXref.getCvDatabase() );
        assertSame( "interactorXref.getCvXrefQualifier()", aCvXrefQualifier, interactorXref.getCvXrefQualifier() );
        assertSame( "interactorXref.getOwner()", anOwner, interactorXref.getOwner() );
    }

    public void testConstructor2() throws Throwable {
        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
        CvDatabase aDatabase = ( CvDatabase ) Mockingbird.getProxyObject( CvDatabase.class );
        CvXrefQualifier aCvXrefQualifier = ( CvXrefQualifier ) Mockingbird.getProxyObject( CvXrefQualifier.class );
        Mockingbird.enterTestMode();
        InteractorXref interactorXref = new InteractorXref( anOwner, aDatabase, "testInteractorXrefAPrimaryId1", aCvXrefQualifier );
        assertEquals( "interactorXref.getPrimaryId()", "testInteractorXrefAPrimaryId1", interactorXref.getPrimaryId() );
        assertEquals( "interactorXref.getEvidences().size()", 0, interactorXref.getEvidences().size() );
        assertSame( "interactorXref.getCvDatabase()", aDatabase, interactorXref.getCvDatabase() );
        assertSame( "interactorXref.getCvXrefQualifier()", aCvXrefQualifier, interactorXref.getCvXrefQualifier() );
        assertSame( "interactorXref.getOwner()", anOwner, interactorXref.getOwner() );
    }

    public void testConstructor3() throws Throwable {
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( new Institution( "testInteractorXrefShortLabel" ), "testInteractorXrefShortLabel" );
        Institution anOwner = new Institution( "testInteractorXrefShortLabel1" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testInteractorXrefShortLabel2" ), "testInteractorXrefShortLabel" );
        InteractorXref interactorXref = new InteractorXref( anOwner, aDatabase, "\tXXXX XXXXXXXXXXXXXX\tXXXXXXXXXXX", "testInteractorXrefASecondaryId1", "testInteractorXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "interactorXref.getPrimaryId()", "XXXX XXXXXXXXXXXXXX\tXXXXXXXXXX", interactorXref.getPrimaryId() );
        assertEquals( "interactorXref.getEvidences().size()", 0, interactorXref.getEvidences().size() );
        assertEquals( "interactorXref.getDbRelease()", "testInteractorXrefADatabaseRelease", interactorXref.getDbRelease() );
        assertSame( "interactorXref.getCvXrefQualifier()", aCvXrefQualifier, interactorXref.getCvXrefQualifier() );
        assertSame( "interactorXref.getCvDatabase()", aDatabase, interactorXref.getCvDatabase() );
        assertSame( "interactorXref.getOwner()", anOwner, interactorXref.getOwner() );
        assertEquals( "interactorXref.getSecondaryId()", "testInteractorXrefASecondaryId", interactorXref.getSecondaryId() );
    }

    public void testConstructor4() throws Throwable {
        Institution owner = new Institution( "testInteractorXrefShortLabel" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testInteractorXrefShortLabel1" ), "testInteractorXrefShortLabel" );
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( owner, "testInteractorXrefShortLabel" );
        InteractorXref interactorXref = new InteractorXref( owner, aDatabase, "testInteractorXrefAPrimaryId1", "", "testInteractorXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "interactorXref.getPrimaryId()", "testInteractorXrefAPrimaryId1", interactorXref.getPrimaryId() );
        assertEquals( "interactorXref.getEvidences().size()", 0, interactorXref.getEvidences().size() );
        assertEquals( "interactorXref.getDbRelease()", "testInteractorXrefADatabaseRelease", interactorXref.getDbRelease() );
        assertSame( "interactorXref.getCvXrefQualifier()", aCvXrefQualifier, interactorXref.getCvXrefQualifier() );
        assertSame( "interactorXref.getCvDatabase()", aDatabase, interactorXref.getCvDatabase() );
        assertSame( "interactorXref.getOwner()", owner, interactorXref.getOwner() );
        assertEquals( "interactorXref.getSecondaryId()", "", interactorXref.getSecondaryId() );
    }

    public void testConstructor5() throws Throwable {
        Institution owner = new Institution( "testInteractorXrefShortLabel" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testInteractorXrefShortLabel1" ), "testInteractorXrefShortLabel" );
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( owner, "testInteractorXrefShortLabel" );
        InteractorXref interactorXref = new InteractorXref( owner, aDatabase, "1", "", "testInteractorXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "interactorXref.getPrimaryId()", "1", interactorXref.getPrimaryId() );
        assertEquals( "interactorXref.getEvidences().size()", 0, interactorXref.getEvidences().size() );
        assertEquals( "interactorXref.getDbRelease()", "testInteractorXrefADatabaseRelease", interactorXref.getDbRelease() );
        assertSame( "interactorXref.getCvXrefQualifier()", aCvXrefQualifier, interactorXref.getCvXrefQualifier() );
        assertSame( "interactorXref.getCvDatabase()", aDatabase, interactorXref.getCvDatabase() );
        assertSame( "interactorXref.getOwner()", owner, interactorXref.getOwner() );
        assertEquals( "interactorXref.getSecondaryId()", "", interactorXref.getSecondaryId() );
    }

    public void testConstructor6() throws Throwable {
        Institution owner = new Institution( "testInteractorXrefShortLabel" );
        CvDatabase aDatabase = new CvDatabase( new Institution( "testInteractorXrefShortLabel1" ), "testInteractorXrefShortLabel" );
        CvXrefQualifier aCvXrefQualifier = new CvXrefQualifier( owner, "testInteractorXrefShortLabel" );
        InteractorXref interactorXref = new InteractorXref( owner, aDatabase, "1", "testInteractorXrefASecondaryId", "testInteractorXrefADatabaseRelease", aCvXrefQualifier );
        assertEquals( "interactorXref.getPrimaryId()", "1", interactorXref.getPrimaryId() );
        assertEquals( "interactorXref.getEvidences().size()", 0, interactorXref.getEvidences().size() );
        assertEquals( "interactorXref.getDbRelease()", "testInteractorXrefADatabaseRelease", interactorXref.getDbRelease() );
        assertSame( "interactorXref.getCvXrefQualifier()", aCvXrefQualifier, interactorXref.getCvXrefQualifier() );
        assertSame( "interactorXref.getCvDatabase()", aDatabase, interactorXref.getCvDatabase() );
        assertSame( "interactorXref.getOwner()", owner, interactorXref.getOwner() );
        assertEquals( "interactorXref.getSecondaryId()", "testInteractorXrefASecondaryId", interactorXref.getSecondaryId() );
    }

    public void testGetParent() throws Throwable {
        Institution owner = new Institution( "testInteractorXrefShortLabel" );
        AnnotatedObject result = new InteractorXref( owner, new CvDatabase( owner, "testInteractorXrefShortLabel" ), "testInteractorXrefAPrimaryId", "testInteractorXrefASecondaryId", "testInteractorXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testInteractorXrefShortLabel1" ), "testInteractorXrefShortLabel" ) ).getParent();
        assertNull( "result", result );
    }

    public void testGetParent1() throws Throwable {
        InteractorXref interactorXref = new InteractorXref( new Institution( "testInteractorXrefShortLabel2" ), new CvDatabase( new Institution( "testInteractorXrefShortLabel1" ), "testInteractorXrefShortLabel" ), "testInteractorXrefAPrimaryId", "testInteractorXrefASecondaryId", "testInteractorXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testInteractorXrefShortLabel" ), "testInteractorXrefShortLabel" ) );
        AnnotatedObject parent = new CvGoNode();
        interactorXref.setParent( parent );
        AnnotatedObject result = interactorXref.getParent();
        assertSame( "result", parent, result );
    }

    public void testGetParentAc() throws Throwable {
        InteractorXref interactorXref = new InteractorXref( ( Institution ) Mockingbird.getProxyObject( Institution.class ), ( CvDatabase ) Mockingbird.getProxyObject( CvDatabase.class ), "testInteractorXrefAPrimaryId", ( CvXrefQualifier ) Mockingbird.getProxyObject( CvXrefQualifier.class ) );
        interactorXref.setParentAc( "testInteractorXrefParentAc" );
        Mockingbird.enterTestMode();
        String result = interactorXref.getParentAc();
        assertEquals( "result", "testInteractorXrefParentAc", result );
        assertEquals( "interactorXref.parentAc", "testInteractorXrefParentAc", getPrivateField( interactorXref, "parentAc" ) );
        assertNull( "interactorXref.getParent()", interactorXref.getParent() );
    }

    public void testGetParentAc1() throws Throwable {
        Institution owner = new Institution( "testInteractorXrefShortLabel" );
        InteractorXref interactorXref = new InteractorXref( owner, new CvDatabase( owner, "testInteractorXrefShortLabel" ), "testInteractorXrefAPrimaryId", new CvXrefQualifier( new Institution( "testInteractorXrefShortLabel1" ), "testInteractorXrefShortLabel" ) );
        String result = interactorXref.getParentAc();
        assertNull( "result", result );
        assertNull( "interactorXref.parentAc", getPrivateField( interactorXref, "parentAc" ) );
        assertNull( "interactorXref.getParent()", interactorXref.getParent() );
    }

    public void testConstructorThrowsIllegalArgumentException() throws Throwable {
        Institution owner = new Institution( "testInteractorXrefShortLabel" );
        CvDatabase aDatabase = new CvDatabase( owner, "testInteractorXrefShortLabel" );
        try {
            new InteractorXref( owner, aDatabase, "", new CvXrefQualifier( owner, "testInteractorXrefShortLabel" ) );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty primaryId for an Xref.", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsIllegalArgumentException1() throws Throwable {
        try {
            new InteractorXref( new Institution( "testInteractorXrefShortLabel2" ), new CvDatabase( new Institution( "testInteractorXrefShortLabel1" ), "testInteractorXrefShortLabel" ), "", "testInteractorXrefASecondaryId", "testInteractorXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testInteractorXrefShortLabel" ), "testInteractorXrefShortLabel" ) );
            fail( "Expected IllegalArgumentException to be thrown" );
        } catch ( IllegalArgumentException ex ) {
            assertEquals( "ex.getMessage()", "Must define a non empty primaryId for an Xref.", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException() throws Throwable {
        Institution anOwner = ( Institution ) Mockingbird.getProxyObject( Institution.class );
        CvDatabase aDatabase = ( CvDatabase ) Mockingbird.getProxyObject( CvDatabase.class );
        CvXrefQualifier aCvXrefQualifier = ( CvXrefQualifier ) Mockingbird.getProxyObject( CvXrefQualifier.class );
        Mockingbird.enterTestMode();
        try {
            new InteractorXref( anOwner, aDatabase, null, aCvXrefQualifier );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Xref must have a primary ID!", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }

    public void testConstructorThrowsNullPointerException1() throws Throwable {
        try {
            new InteractorXref( new Institution( "testInteractorXrefShortLabel2" ), new CvDatabase( new Institution( "testInteractorXrefShortLabel" ), "testInteractorXrefShortLabel" ), null, "testInteractorXrefASecondaryId", "testInteractorXrefADatabaseRelease", new CvXrefQualifier( new Institution( "testInteractorXrefShortLabel1" ), "testInteractorXrefShortLabel" ) );
            fail( "Expected NullPointerException to be thrown" );
        } catch ( NullPointerException ex ) {
            assertEquals( "ex.getMessage()", "valid Xref must have a primary ID!", ex.getMessage() );
            assertThrownBy( Xref.class, ex );
        }
    }
}

