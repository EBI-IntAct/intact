<?xml version="1.0"?>
<faqs title="Maven tips for IntAct developers">
<part id="about">
    <faq id="1">
      <question>How to get the classpath of an artifact ?</question>
      <answer>
        <p>
          Go in the pom.xml directory of yourartifact and type :
          <pre>
            mvn dependency:build-classpath
          </pre>
        </p>
      </answer>
    </faq>
    <faq id="2">
      <question>How to run an IntAct web-application in Jetty ?</question>
      <answer>
        <p>
          Go in the pom.xml directory of your web-application and type :
          <pre>
            mvn -PjettyConfig,your-database-profile -Ddb=your-db-type-oracle-or-postgres clean jetty:run
          </pre>
        </p>
      </answer>
    </faq>
    <faq id="3">
      <question>How to create an IntelliJ/Eclipse project for a given Maven module ?</question>
      <answer>
        <p>
          Maven comes with a few plugin allowing to auto-generate project configuration for some Java IDE.
          <br/>
          If you are using <a href="http://www.jetbrains.com/idea/" target="_blank">IntelliJ</a>, you can use:
          <pre>
                mvn idea:idea
          </pre>
          If you are using <a href="http://www.eclipse.org/" target="_blank">Eclipse</a>, you can use:
          <pre>
                mvn eclipse:eclipse
          </pre>
        </p>
      </answer>
    </faq>
    <faq id="4">
      <question>How to run create a new Maven artifact for IntAct ?</question>
      <answer>
        <p>
          We advise to use the Maven Archetype we have developped to create the base structure of the module you are
          about to create. Running the command below should do the job: <br/>
          <pre>
          mvn archetype:create -Dversion=1.0-SNAPSHOT \
                               -DgroupId=uk.ac.ebi.intact.mygroup \
                               -DartifactId=myTest
          </pre>
        </p>
      </answer>
    </faq>
    <faq id="5">
      <question>How to run create a new Maven plugin for IntAct ?</question>
      <answer>
        <p>
          We advise to use the Maven Archetype we have developped to create the base structure of the module you are
          about to create. Running the command below should do the job: <br/>
          <pre>
          mvn archetype:create -Dversion=1.0-SNAPSHOT \
                               -DgroupId=uk.ac.ebi.intact.mygroup \
                               -DartifactId=myTest \
                               -DarchetypeArtifactId=maven-archetype-mojo
          </pre>
        </p>
      </answer>
    </faq>
    <faq id="6">
      <question>How to install a Jar file onto my local maven repository ?</question>
      <answer>
        <p>
          We advise to use the Maven install plugin for this task.
          <br/>
          Running the command below should do the job: <br/>
          <pre>
          mvn install:install-file -Dfile=file.jar \
                                   -DgroupId=myGroup \
                                   -DartifactId=myArtifact \
                                   -Dversion=1.0 \
                                   -Dpackaging=jar \
          </pre>
          More information can be found on the <a href="http://maven.apache.org/plugins/maven-install-plugin/install-file-mojo.html" target="_blank">plugin page</a>
        </p>
      </answer>
    </faq>
    <faq id="7">
      <question>How to deploy a Jar file onto a maven repository ?</question>
      <answer>
        <p>
          We advise to use the Maven Deploy plugin for this task.
          <br/>
          Running the command below should do the job: <br/>
          <pre>
          mvn deploy:deploy-file -Dfile=file.jar \
                                 -DgroupId=myGroup \
                                 -DartifactId=myArtifact \
                                 -Dversion=1.0 \
                                 -Dpackaging=jar \
                                 -DrepositoryId=my-repo \
                                 -Durl=scp_command \
                                 -DpomFile=my-pom.xml
          </pre>
          More information can be found on the <a href="http://maven.apache.org/plugins/maven-deploy-plugin/deploy-file-mojo.html" target="_blank">plugin page</a>
        </p>
      </answer>
    </faq>
    <faq id="8">
      <question>Releasing a Maven module is a pain, is there a way to do this easily ?</question>
      <answer>
        <p>
          Yes there is ;)
          <br/>
          We recommend the use of the
          <a href="http://maven.apache.org/plugins/maven-release-plugin/" target="_blank">Maven release plugin</a>
          to do so.
          <br/>
          Here is how to proceed with it:
          <br/>
          1. Make sure you have commited all pending modification in your Maven module
          <br/>
          2. Make sure the SCM section of your POM file is up to date. The release plugin uses it to access Subversion.
          <br/>
          3. Make sure the version of the module you are working on is a SNAPSHOT (eg. 1.2-SNAPSHOT)
          <br/>
          4. run <pre>mvn release:prepare</pre> to check that everything is fine and prepare the release for things
          like what will the next version be, how will the tag in Subversion be called...
          <br/>
          5. If everything went fine, run <pre>mvn release:perform</pre> to finalize the release.
          <br/>
          <br/>
          <u>Note</u>:If anything goes bad and you wish to start from scratch again, you can run
          <pre>mvn release:prepare -Dresume=false</pre>
          <br/>
          <u>Final note</u>: This said, it does happen that the plugin chokes while releasing your artifact, reading the
          verbose Maven output you should be able to work around any problems.
        </p>
      </answer>
    </faq>
    <faq id="9">
      <question>How to generate the hibernate.cfg.xml file?</question>
      <answer>
        <p>
          Go in the pom.xml directory of your web-application and type : <br/>
            mvn hibernateconfig:generate-config <br/>
          This will generate the hibernate.cfg.xml file in target/hibernate/config file.
        </p>
      </answer>
    </faq>
    <faq id="10">
      <question>How to skip db schema version check?</question>
      <answer>
        <p>
          Create the file <b>intact.properties</b> in <b>src/main/ressources</b> and add the following line :<br/>
            uk.ac.ebi.intact.FORCE_NO_SCHEMA_VERSION_CHECK=true<br/>
          This will set the value of FORCE_NO_SCHEMA_VERSION_CHECK of the IntactEnvironment class of the intact-core.
          If it's a web application, you can do it as well in the web.xml file by adding a context-param tag. You'll
          find an exemple of it in the web.xml of the editor-app for exemple.
        </p>
      </answer>
    </faq>
    <faq id="11">
      <question> How to skip the tests?</question>
      <answer>
        <p>
          To skip the tests, add the following option to your maven command line :<br/>
            -Dmaven.skip.test<br/>
          <b>Example</b> : mvn -Dmaven.skip.test package
        </p>
      </answer>
    </faq>
  </part>
</faqs> 
